!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
Activate	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Activate; virtual;$/;"	p
Activate	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure Activate; inline;$/;"	p
Add	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Add(const Section, Key: UTF8String); static;$/;"	p
Add	Engines/MondoZenGL/MondoZenGL.pas	/^    function Add(const Sprite: TMZSprite): Integer;$/;"	f
Add	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Add(const Name, Value: UTF8String);$/;"	p
AddAnimatedTile	Engines/MondoZenGL/mzTileMaps.pas	/^    function AddAnimatedTile(const Anim: TMZTileAnimated): Integer;$/;"	f
AddBody	Engines/MondoZenGL/mzChipmunk.pas	/^    function AddBody(const Body: TCPBody): TCPBody; inline;$/;"	f
AddCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure AddCollisionHandler(const A, B: TCPCollisionType;$/;"	p
AddConstraint	Engines/MondoZenGL/mzChipmunk.pas	/^    function AddConstraint(const Constraint: TCPConstraint): TCPConstraint; inline;$/;"	f
AddEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure AddEmitter(const Emitter: TMZParticleEmitter);$/;"	p
AddEmitterCopy	Engines/MondoZenGL/MondoZenGL.pas	/^    function AddEmitterCopy(const Source: TMZParticleEmitter;$/;"	f
AddFrame	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure AddFrame(const Frame: Integer);$/;"	p
AddHole	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure AddHole(const Contour: array of TMZPoint); overload; static;$/;"	p
AddHole	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure AddHole(const Contour: array of TMZPoint;$/;"	p
AddLayer	Engines/MondoZenGL/mzTileMaps.pas	/^    function AddLayer: TMZTileLayer;$/;"	f
AddPostStepCallback	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure AddPostStepCallback(const OnPostStep: TCPPostStepEvent;$/;"	p
AddProperty	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure AddProperty(const Name, Value: UTF8String);$/;"	p
AddShape	Engines/MondoZenGL/mzChipmunk.pas	/^    function AddShape(const Shape: TCPShape): TCPShape; inline;$/;"	f
AddSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    function  AddSprite : Integer; overload; virtual;$/;"	f
AddSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    function  AddSprite( Texture : zglPTexture; Layer : Integer ) : zglCSprite2D; overload; virt/;"	f
AddSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure AddSprite( Sprite : zglCSprite2D; Layer : Integer ); overload; virtual;$/;"	p
AddStaticShape	Engines/MondoZenGL/mzChipmunk.pas	/^    function AddStaticShape(const Shape: TCPShape): TCPShape; inline;$/;"	f
AddTileSet	Engines/MondoZenGL/mzTileMaps.pas	/^    function AddTileSet: TMZTileSet;$/;"	f
Already	Engines/ZenGL/src/zgl_screen.pas	/^  function Already( Width, Height : Integer ) : Boolean;$/;"	f
AlwaysCollide	Engines/MondoZenGL/mzChipmunk.pas	/^    function AlwaysCollide(const Space: TCPSpace;$/;"	f
Angle	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Angle(const X1, Y1, X2, Y2: Single): Single; static;$/;"	f
Angle	Engines/MondoZenGL/MondoZenGL.pas	/^    function Angle: Single;$/;"	f
AngleTo	Engines/MondoZenGL/MondoZenGL.pas	/^    function AngleTo(const Other: TMZPoint): Single; overload;$/;"	f
AngleTo	Engines/MondoZenGL/MondoZenGL.pas	/^    function AngleTo(const X, Y: Single): Single; overload;$/;"	f
AppData	Engines/ZenGL/src/zgl_lib_zip.pas	/^  TAlloc = function( AppData : Pointer; Items, Size : cuint ): Pointer; cdecl;$/;"	f
AppData	Engines/ZenGL/src/zgl_lib_zip.pas	/^  TFree = procedure( AppData, Block : Pointer ); cdecl;$/;"	p
ApplyForce	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ApplyForce(const Force, RelativeOffset: TCPVect); inline;$/;"	p
ApplyImpulse	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ApplyImpulse(const Impulse, RelativeOffset: TCPVect); inline;$/;"	p
ApplyMask	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure ApplyMask(const Mask: TMZTexture);$/;"	p
ArcTan2	Engines/ZenGL/src/zgl_math_2d.pas	/^function ArcTan2( dx, dy : Single ) : Single;$/;"	f
ArrayIterator	Engines/MondoZenGL/mzChipmunk.pas	/^procedure ArrayIterator(Ptr: Pointer; Data: Pointer); cdecl;$/;"	p
AudioSessionInitialize	Engines/ZenGL/src/zgl_sound.pas	/^function AudioSessionInitialize( inRunLoop : CFRunLoopRef; inRunLoopMode : CFStringRef; inInterr/;"	f
AudioSessionSetActive	Engines/ZenGL/src/zgl_sound.pas	/^function AudioSessionSetActive( active : Boolean ) : Pointer; cdecl; external;$/;"	f
AudioSessionSetProperty	Engines/ZenGL/src/zgl_sound.pas	/^function AudioSessionSetProperty( inID : LongWord; inDataSize : LongWord; inData : Pointer ) : P/;"	f
Axis	Engines/ZenGL/headers/zglHeader.pas	/^  mouse_Wheel      : function( Axis : Byte ) : Boolean;$/;"	f
Axis	Engines/ZenGL/src/zgl_mouse.pas	/^  mouse_PWheel   : procedure( Axis : Byte );$/;"	p
BeginBatch	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure BeginBatch; static;$/;"	p
BeginReadText	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure BeginReadText(const InitialText: UTF8String = '';$/;"	p
BeginTriangulation	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure BeginTriangulation(const Contour: array of TMZPoint); overload; static;$/;"	p
BeginTriangulation	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure BeginTriangulation(const Contour: array of TMZPoint;$/;"	p
BodyIterator	Engines/MondoZenGL/mzChipmunk.pas	/^procedure BodyIterator(Body: PcpBody; Data: Pointer); cdecl;$/;"	p
BodyPositionFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure BodyPositionFunc(Body: PcpBody; DT: cpFloat); cdecl;$/;"	p
BodyVelocityFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure BodyVelocityFunc(Body: PcpBody; Gravity: cpVect; Damping: cpFloat;$/;"	p
BoolToStr	Engines/MondoZenGL/MondoZenGL.pas	/^    class function BoolToStr(const Value: Boolean): UTF8String; static;$/;"	f
Button	Engines/ZenGL/headers/zglHeader.pas	/^  mouse_Click      : function( Button : Byte ) : Boolean;$/;"	f
Button	Engines/ZenGL/headers/zglHeader.pas	/^  mouse_DblClick   : function( Button : Byte ) : Boolean;$/;"	f
Button	Engines/ZenGL/headers/zglHeader.pas	/^  mouse_Down       : function( Button : Byte ) : Boolean;$/;"	f
Button	Engines/ZenGL/headers/zglHeader.pas	/^  mouse_Up         : function( Button : Byte ) : Boolean;$/;"	f
Button	Engines/ZenGL/src/zgl_mouse.pas	/^  mouse_PPress   : procedure( Button : Byte );$/;"	p
Button	Engines/ZenGL/src/zgl_mouse.pas	/^  mouse_PRelease : procedure( Button : Byte );$/;"	p
CPBBNew	Engines/MondoZenGL/mzChipmunk.pas	/^function CPBBNew(const L, B, R, T: TCPFloat): TCPBB; inline;$/;"	f
CPV	Engines/MondoZenGL/mzChipmunk.pas	/^function CPV(const X, Y: TCPFloat): TCPVect; inline;$/;"	f
CP_HASH_PAIR	Engines/MondoZenGL/mzChipmunk.pas	/^function CP_HASH_PAIR(const A, B: TCPCollisionType): cpHashValue; inline;$/;"	f
CacheBoundingBox	Engines/MondoZenGL/mzChipmunk.pas	/^    function CacheBoundingBox: TCPBB;$/;"	f
CalculateTextHeight	Engines/MondoZenGL/MondoZenGL.pas	/^    class function CalculateTextHeight(const Font: TMZFont; const Width: Single;$/;"	f
CalculateTextWidth	Engines/MondoZenGL/MondoZenGL.pas	/^    class function CalculateTextWidth(const Font: TMZFont; const Text: UTF8String;$/;"	f
Center	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Center; static;$/;"	p
Clamp	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Clamp(const V: TCPVect; const Len: TCPFloat): TCPVect; overload; inline; stat/;"	f
Clamp	Engines/MondoZenGL/mzChipmunk.pas	/^    function Clamp(const Len: TCPFloat): TCPVect; overload; inline;$/;"	f
ClampVect	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ClampVect(const BB: TCPBB; const V: TCPVect): TCPVect; overload; inline; stat/;"	f
ClampVect	Engines/MondoZenGL/mzChipmunk.pas	/^    function ClampVect(const V: TCPVect): TCPVect; overload; inline;$/;"	f
ClassCreate	Engines/MondoZenGL/MondoZenGL.pas	/^    class constructor ClassCreate;$/;"	p
ClassCreate	Engines/MondoZenGL/mzTileMaps.pas	/^    class constructor ClassCreate;$/;"	p
ClassDestroy	Engines/MondoZenGL/MondoZenGL.pas	/^    class destructor ClassDestroy;$/;"	p
ClassDestroy	Engines/MondoZenGL/mzTileMaps.pas	/^    class destructor ClassDestroy;$/;"	p
Clear	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Clear(const Section: UTF8String); static;$/;"	p
Clear	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Clear; static;$/;"	p
Clear	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Clear;$/;"	p
ClearAll	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure ClearAll; virtual;$/;"	p
ClearState	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure ClearState; static;$/;"	p
ClipToRect	Engines/MondoZenGL/MondoZenGL.pas	/^    function ClipToRect(const ClipRect: TMZRect): TMZRect;$/;"	f
Clone	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Clone(out stm: IStream): HResult; stdcall;$/;"	f
CloseArchive	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure CloseArchive; static;$/;"	p
CoInitialize	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function CoInitialize(pvReserved: Pointer): HResult; stdcall; external 'ole32.dll' name 'CoIniti/;"	f
CoUninitialize	Engines/ZenGL/src/zgl_sound_dsound.pas	/^procedure CoUninitialize; stdcall; external 'ole32.dll' name 'CoUninitialize';$/;"	p
CollisionBeginFunc	Engines/MondoZenGL/mzChipmunk.pas	/^function CollisionBeginFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Pointer): TCPBoo/;"	f
CollisionHandlerSetEqual	Engines/MondoZenGL/mzChipmunk.pas	/^function CollisionHandlerSetEqual(Ptr, Elt: Pointer): TCPBool; cdecl;$/;"	f
CollisionHandlerSetTrans	Engines/MondoZenGL/mzChipmunk.pas	/^function CollisionHandlerSetTrans(Ptr: Pointer; Data: Pointer): Pointer; cdecl;$/;"	f
CollisionPostSolveFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure CollisionPostSolveFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Pointer); c/;"	p
CollisionPreSolveFunc	Engines/MondoZenGL/mzChipmunk.pas	/^function CollisionPreSolveFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Pointer): TCP/;"	f
CollisionSeparateFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure CollisionSeparateFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Pointer); cd/;"	p
Commit	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Commit(grfCommitFlags: Longint): HResult; stdcall;$/;"	f
Compact	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Compact: HResult; stdcall;$/;"	f
ConstrainViewToScreen	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure ConstrainViewToScreen;$/;"	p
ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ConstraintType: TCPConstraintType; override;$/;"	f
ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ConstraintType: TCPConstraintType; virtual; abstract;$/;"	f
Contains	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Contains(const BB, Other: TCPBB): TCPBool; overload; inline; static;$/;"	f
Contains	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Contains(const BB: TCPBB; const V: TCPVect): TCPBool; overload; inline; stati/;"	f
Contains	Engines/MondoZenGL/mzChipmunk.pas	/^    function Contains(const Other: TCPBB): TCPBool; overload; inline;$/;"	f
Contains	Engines/MondoZenGL/mzChipmunk.pas	/^    function Contains(const V: TCPVect): TCPBool; overload; inline;$/;"	f
ContainsPoint	Engines/MondoZenGL/MondoZenGL.pas	/^    function ContainsPoint(const Point: TMZPoint): Boolean; overload;$/;"	f
ContainsPoint	Engines/MondoZenGL/MondoZenGL.pas	/^    function ContainsPoint(const X, Y: Single): Boolean; overload;$/;"	f
CopyEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    class function CopyEmitter(const Src: zglTEmitter2D): zglTEmitter2D; static;$/;"	f
CopyTo	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function CopyTo(stm: IStream; cb: Largeint; out cbRead: Largeint;$/;"	f
Cos	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Cos(const Angle: Integer): Single; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const Center: TMZPoint; const Radius: Single): TMZCircle; overload; st/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const P0, P1: TMZPoint): TMZLine; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const P1, P2, P3: TMZPoint): TMZTriangle; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const X, Y, Radius: Single): TMZCircle; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const X, Y, W, H: Single): TMZRect; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const X, Y: Single): TMZPoint; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create(const X0, Y0, X1, Y1: Single): TMZLine; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create: TMZCircle; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create: TMZLine; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create: TMZPoint; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Create: TMZRect; overload; static;$/;"	f
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Buffer: Pointer; const Size: Integer;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Buffer: Pointer;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Engine: TMZSpriteEngine; const Texture: TMZTexture;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Filename: UTF8String); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Filename: UTF8String; const KeyColor: Cardinal = NO_KEY_COLOR;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Filename: UTF8String; const MaxChannels: Integer = 8); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Filename: UTF8String; const OpenMode: TMZFileOpenMode);$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Filename: UTF8String; const Texture: TMZTexture = nil); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Handle: zglPTexture); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const ID: Byte; const Handle: zglPJoyInfo);$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const MaxChannels: Integer = 8); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Memory: TMZMemory); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Memory: TMZMemory; const Extension: UTF8String); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Memory: TMZMemory; const Extension: UTF8String;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Memory: TMZMemory;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const OnTimer: TNotifyEvent; const IntervalMs: Integer);$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const RowCount, ColumnCount: Integer);$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Size: Integer); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Source: TMZParticleEmitter); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Stream: TStream); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Stream: TStream; const Extension: UTF8String); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Stream: TStream; const Extension: UTF8String;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Stream: TStream; const Texture: TMZTexture = nil); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Texture: TMZTexture); overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Texture: TMZTexture;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create(const Width, Height: Integer; const Color: Cardinal = $000000;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create; overload;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create; virtual;$/;"	p
Create	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor Create;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Create(const L, B, R, T: TCPFloat): TCPBB; inline; static;$/;"	f
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Create(const X, Y: TCPFloat): TCPVect; overload; inline; static;$/;"	f
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Create: TCPVect; overload; inline; static;$/;"	f
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Anchor1, Anchor2: TCPVect); overload;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Anchor1, Anchor2: TCPVect);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Anchor1, Anchor2: TCPVect;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const GrooveA, GrooveB, Anchor2: TCPVect);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Min, Max: TCPFloat);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Phase, Ratchet: TCPFloat);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Phase, Ratio: TCPFloat);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Pivot: TCPVect); overload;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const Rate: TCPFloat);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const A, B: TCPBody; const RestAngle, Stiffness, Damping: TCPFloat);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const Body: TCPBody);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const Body: TCPBody; const Radius: TCPFloat;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const Body: TCPBody; const V1, V2: TCPVect;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const Body: TCPBody; const Verts: array of TCPVect;$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create(const Mass, Moment: TCPFloat);$/;"	p
Create	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor Create;$/;"	p
Create	Engines/MondoZenGL/mzTileMaps.pas	/^        constructor Create(const Texture: TMZTexture);$/;"	p
Create	Engines/MondoZenGL/mzTileMaps.pas	/^    constructor Create(const Filename: UTF8String);$/;"	p
Create	Engines/MondoZenGL/mzTileMaps.pas	/^    constructor Create(const Filename: UTF8String;$/;"	p
Create	Engines/MondoZenGL/mzTileMaps.pas	/^    constructor Create(const Map: TMZTileMap);$/;"	p
Create	Engines/MondoZenGL/mzTileMaps.pas	/^    constructor Create(const Map: TMZTileMap; const Index: Integer);$/;"	p
Create	Engines/MondoZenGL/mzTileMaps.pas	/^    constructor Create; overload;$/;"	p
Create	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    constructor Create( _Manager : zglCSEngine2D; _ID : Integer ); virtual;$/;"	p
CreateBox	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor CreateBox(const Body: TCPBody; const Width, Height: TCPFloat);$/;"	p
CreateDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^    class function CreateDirectory(const DirectoryName: UTF8String): Boolean; static;$/;"	f
CreateFromHandle	Engines/MondoZenGL/MondoZenGL.pas	/^    constructor CreateFromHandle(const Handle: zglPCamera2D);$/;"	p
CreateSoundBuffer	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function CreateSoundBuffer(const lpDSBufferDesc: TDSBufferDesc;$/;"	f
CreateStatic	Engines/MondoZenGL/mzChipmunk.pas	/^    constructor CreateStatic(const Body: cpBody);$/;"	p
CreateStreamOnHGlobal	Engines/ZenGL/src/zgl_textures_jpg.pas	/^  function CreateStreamOnHGlobal(hglob: HGlobal; fDeleteOnRelease: BOOL;$/;"	f
CrossProduct	Engines/MondoZenGL/mzChipmunk.pas	/^    class function CrossProduct(const V1, V2: TCPVect): TCPFloat; overload; inline; static;$/;"	f
CrossProduct	Engines/MondoZenGL/mzChipmunk.pas	/^    function CrossProduct(const Other: TCPVect): TCPFloat; overload; inline;$/;"	f
DC	Engines/ZenGL/src/zgl_opengl_all.pas	/^  wglCreatePbufferARB: function(hDC: HDC; iPixelFormat: GLint; iWidth: GLint; iHeight: GLint; co/;"	f
DampedSpringForceFunc	Engines/MondoZenGL/mzChipmunk.pas	/^function DampedSpringForceFunc(Spring: PcpConstraint; Dist: cpFloat): cpFloat; cdecl;$/;"	f
Data	Engines/ZenGL/src/zgl_render_target.pas	/^  zglTRenderCallback = procedure( Data : Pointer );$/;"	p
Deactivate	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Deactivate; virtual;$/;"	p
DefaultCollisionBeginFunc	Engines/MondoZenGL/mzChipmunk.pas	/^function DefaultCollisionBeginFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Pointer):/;"	f
DefaultCollisionPostSolveFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure DefaultCollisionPostSolveFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Poin/;"	p
DefaultCollisionPreSolveFunc	Engines/MondoZenGL/mzChipmunk.pas	/^function DefaultCollisionPreSolveFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Pointe/;"	f
DefaultCollisionSeparateFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure DefaultCollisionSeparateFunc(Arb: zglChipmunk.PcpArbiter; Space: PcpSpace; Data: Point/;"	p
DelSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure DelSprite( ID : Integer ); virtual;$/;"	p
Delete	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Delete(const Section, Key: UTF8String); static;$/;"	p
DeleteDeadSprites	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure DeleteDeadSprites;$/;"	p
DeleteEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure DeleteEmitter(const Index: Integer);$/;"	p
DeleteFile	Engines/MondoZenGL/MondoZenGL.pas	/^    class function DeleteFile(const Filename: UTF8String): Boolean; static;$/;"	f
Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^    destructor Destroy; override;$/;"	p
Destroy	Engines/MondoZenGL/mzChipmunk.pas	/^    destructor Destroy; override;$/;"	p
Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^        destructor Destroy; override;$/;"	p
Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^    destructor Destroy; override;$/;"	p
Destroy	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    destructor  Destroy; override;$/;"	p
Destroy	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    destructor Destroy; override;$/;"	p
DisableOption	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DisableOption(const Option: TMZCanvasOption); static;$/;"	p
Distance	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Distance(const X1, Y1, X2, Y2: Single): Single; static;$/;"	f
Distance	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Distance(const V1, V2: TCPVect): TCPFloat; overload; inline; static;$/;"	f
Distance	Engines/MondoZenGL/mzChipmunk.pas	/^    function Distance(const Other: TCPVect): TCPFloat; overload; inline;$/;"	f
DistanceSq	Engines/MondoZenGL/mzChipmunk.pas	/^    class function DistanceSq(const V1, V2: TCPVect): TCPFloat; overload; inline; static;$/;"	f
DistanceSq	Engines/MondoZenGL/mzChipmunk.pas	/^    function DistanceSq(const Other: TCPVect): TCPFloat; overload; inline;$/;"	f
DistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^    function DistanceTo(const Other: TMZPoint): Single; overload;$/;"	f
DistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^    function DistanceTo(const X, Y: Single): Single; overload;$/;"	f
DotProduct	Engines/MondoZenGL/mzChipmunk.pas	/^    class function DotProduct(const V1, V2: TCPVect): TCPFloat; overload; inline; static;$/;"	f
DotProduct	Engines/MondoZenGL/mzChipmunk.pas	/^    function DotProduct(const Other: TCPVect): TCPFloat; overload; inline;$/;"	f
Draw	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Draw; virtual;$/;"	p
Draw	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure Draw; virtual;$/;"	p
DrawCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawCircle(const Center: TMZPoint; const Radius: Single;$/;"	p
DrawCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawCircle(const X, Y, Radius: Single; const Color: Cardinal;$/;"	p
DrawEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawEllipse(const Center: TMZPoint;$/;"	p
DrawEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawEllipse(const X, Y, XRadius, YRadius: Single;$/;"	p
DrawLine	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawLine(const StartPoint, EndPoint: TMZPoint; const Color: Cardinal;$/;"	p
DrawLine	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawLine(const X1, Y1, X2, Y2: Single; const Color: Cardinal;$/;"	p
DrawPixel	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawPixel(const Point: TMZPoint; const Color: Cardinal;$/;"	p
DrawPixel	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawPixel(const X, Y: Single; const Color: Cardinal;$/;"	p
DrawPolygon	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawPolygon(const Points: PMZPoint; const Count: Integer;$/;"	p
DrawPolygon	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawPolygon(const Points: array of TMZPoint;$/;"	p
DrawRect	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawRect(const Rect: TMZRect; const Color: Cardinal;$/;"	p
DrawRect	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawRect(const X, Y, W, H: Single; const Color: Cardinal;$/;"	p
DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSprite(const Texture: TMZTexture; const DR: TMZRect;$/;"	p
DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSprite(const Texture: TMZTexture; const SR, DR: TMZRect;$/;"	p
DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSprite(const Texture: TMZTexture; const SR: TMZRect;$/;"	p
DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSprite(const Texture: TMZTexture;$/;"	p
DrawSpriteFrame	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSpriteFrame(const Texture: TMZTexture; const FrameNum: Integer;$/;"	p
DrawSpriteFrame	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSpriteFrame(const Texture: TMZTexture;$/;"	p
DrawSpriteTiles	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSpriteTiles(const Texture: TMZTexture; const XOffset,$/;"	p
DrawSpriteTiles	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawSpriteTiles(const Texture: TMZTexture;$/;"	p
DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawText(const Font: TMZFont; const Point: TMZPoint;$/;"	p
DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawText(const Font: TMZFont; const Rect: TMZRect;$/;"	p
DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawText(const Font: TMZFont; const X, Y, Scale, Step: Single;$/;"	p
DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawText(const Font: TMZFont; const X, Y: Single;$/;"	p
DrawTexture	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawTexture(const Texture: TMZTexture; const TL, TR, BR,$/;"	p
DrawTexture	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawTexture(const Texture: TMZTexture;$/;"	p
DrawTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawTriangleList(const Triangles: PMZTriangle;$/;"	p
DrawTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure DrawTriangleList(const Triangles: array of TMZTriangle;$/;"	p
DuplicateSoundBuffer	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function DuplicateSoundBuffer(lpDsbOriginal: IDirectSoundBuffer;$/;"	f
EnableOption	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure EnableOption(const Option: TMZCanvasOption); static;$/;"	p
EndBatch	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure EndBatch; static;$/;"	p
EndReadText	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure EndReadText; static;$/;"	p
EndTag	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure EndTag;$/;"	p
EndTriangulation	Engines/MondoZenGL/MondoZenGL.pas	/^    class function EndTriangulation: TMZTriangleArray; static;$/;"	f
EnterMainLoop	Engines/ZenGL/src/zgl_application.pas	/^    procedure EnterMainLoop; message 'EnterMainLoop';$/;"	p
Equals	Engines/MondoZenGL/MondoZenGL.pas	/^    function Equals(const Other: TMZCircle): Boolean;$/;"	f
Equals	Engines/MondoZenGL/MondoZenGL.pas	/^    function Equals(const Other: TMZLine): Boolean;$/;"	f
Equals	Engines/MondoZenGL/MondoZenGL.pas	/^    function Equals(const Other: TMZPoint): Boolean;$/;"	f
Equals	Engines/MondoZenGL/MondoZenGL.pas	/^    function Equals(const Other: TMZRect): Boolean;$/;"	f
Equals	Engines/MondoZenGL/MondoZenGL.pas	/^    function Equals(const Other: TMZTriangle): Boolean;$/;"	f
Equals	Engines/MondoZenGL/mzChipmunk.pas	/^    function Equals(const Other: TCPVect): Boolean; inline;$/;"	f
Equals	Engines/MondoZenGL/mzTileMaps.pas	/^    function Equals(Obj: TObject): Boolean; override;$/;"	f
Expand	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Expand(const BB: TCPBB; const V: TCPVect): TCPBB; overload; inline; static;$/;"	f
Expand	Engines/MondoZenGL/mzChipmunk.pas	/^    function Expand(const V: TCPVect): TCPBB; overload; inline;$/;"	f
FSAA	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_Init         : procedure( FSAA : Byte = 0; StencilBits : Byte = 0 );$/;"	p
FileExists	Engines/MondoZenGL/MondoZenGL.pas	/^    class function FileExists(const Filename: UTF8String): Boolean; static;$/;"	f
FillCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillCircle(const Center: TMZPoint; const Radius: Single;$/;"	p
FillCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillCircle(const X, Y, Radius: Single; const Color: Cardinal;$/;"	p
FillEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillEllipse(const Center: TMZPoint;$/;"	p
FillEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillEllipse(const X, Y, XRadius, YRadius: Single;$/;"	p
FillRect	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillRect(const Rect: TMZRect; const Color: Cardinal;$/;"	p
FillRect	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillRect(const X, Y, W, H: Single; const Color: Cardinal;$/;"	p
FillTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillTriangleList(const Triangles: PMZTriangle;$/;"	p
FillTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FillTriangleList(const Triangles: array of TMZTriangle;$/;"	p
Filter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Filter(const Filter: TMZTextureFilter; const Wrap: TMZTextureWrap);$/;"	p
Finalize	Engines/MondoZenGL/mzChipmunk.pas	/^    class procedure Finalize; static;$/;"	p
Find	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Find(const DirectoryName: UTF8String;$/;"	f
Finger	Engines/ZenGL/src/zgl_touch.pas	/^  touch_PMove    : procedure( Finger : Byte; X, Y : Integer );$/;"	p
Finger	Engines/ZenGL/src/zgl_touch.pas	/^  touch_PPress   : procedure( Finger : Byte );$/;"	p
Finger	Engines/ZenGL/src/zgl_touch.pas	/^  touch_PRelease : procedure( Finger : Byte );$/;"	p
FloatToStr	Engines/MondoZenGL/MondoZenGL.pas	/^    class function FloatToStr(const Value: Single; const Digits: Integer = 2): UTF8String; stati/;"	f
Flush	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Flush; static;$/;"	p
Flush	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Flush;$/;"	p
FlushBatch	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure FlushBatch; static;$/;"	p
ForAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ForAngle(const Angle: TCPFloat): TCPVect; inline; static;$/;"	f
ForEachArbiter	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ForEachArbiter(const OnArbiter: TCPForEachArbiterEvent;$/;"	p
ForEachBody	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ForEachBody(const OnBody: TCPForEachBodyEvent;$/;"	p
ForEachShape	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ForEachShape(const OnShape: TCPForEachShapeEvent;$/;"	p
ForEachStaticShape	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ForEachStaticShape(const OnShape: TCPForEachShapeEvent;$/;"	p
Format	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Format(const Format: UTF8String;$/;"	f
Free	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Free;$/;"	p
FreeAGL	Engines/ZenGL/src/zgl_opengl_all.pas	/^procedure FreeAGL;$/;"	p
FreeDSound	Engines/ZenGL/src/zgl_sound_dsound.pas	/^procedure FreeDSound;$/;"	p
FreeFBO	Engines/ZenGL/src/zgl_render_target.pas	/^  procedure FreeFBO( var Target : zglPRenderTarget; Stage : Integer );$/;"	p
FreeGL	Engines/ZenGL/src/zgl_opengl_all.pas	/^procedure FreeGL;$/;"	p
FreeGLES	Engines/ZenGL/src/zgl_opengles_all.pas	/^procedure FreeGLES;$/;"	p
FreeModPlug	Engines/ZenGL/extra/zglModPlug.pas	/^procedure FreeModPlug;$/;"	p
FreeOgg	Engines/ZenGL/src/zgl_lib_ogg.pas	/^procedure FreeOgg;$/;"	p
FreeOpenAL	Engines/ZenGL/src/zgl_sound_openal.pas	/^procedure FreeOpenAL;$/;"	p
FreePBuffer	Engines/ZenGL/src/zgl_render_target.pas	/^  procedure FreePBuffer( var Target : zglPRenderTarget; Stage : Integer );$/;"	p
FreeTheora	Engines/ZenGL/src/zgl_lib_theora.pas	/^procedure FreeTheora;$/;"	p
FreeVorbis	Engines/ZenGL/src/zgl_lib_ogg.pas	/^procedure FreeVorbis;$/;"	p
FreeWrap	Engines/MondoZenGL/mzChipmunk.pas	/^procedure FreeWrap(Elt: Pointer; Data: Pointer); cdecl;$/;"	p
GL_NEVER	Engines/ZenGL/src/zgl_opengl_all.pas	/^  GL_NEVER                          = $0200;$/;"	f
GL_NEVER	Engines/ZenGL/src/zgl_opengles_all.pas	/^  GL_NEVER                            = $0200;$/;"	f
Get	Engines/MondoZenGL/mzTileMaps.pas	/^    function Get(const Name: UTF8String): UTF8String; overload;$/;"	f
Get	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Get(const Index: Integer; out Name, Value: UTF8String); overload;$/;"	p
GetActive	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetActive: Boolean;$/;"	f
GetAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetAngle: TCPFloat; inline;$/;"	f
GetAngularVelocity	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetAngularVelocity: Single;$/;"	f
GetAngularVelocityVariation	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetAngularVelocityVariation: Single;$/;"	f
GetAnisotropyLevel	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetAnisotropyLevel: Integer; static;$/;"	f
GetAntiAlias	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetAntiAlias: Boolean; static;$/;"	f
GetApplicationDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetApplicationDirectory: UTF8String; static;$/;"	f
GetArbiter	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetArbiter(const Index: Integer): PCPArbiter; inline;$/;"	f
GetArbiterCount	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetArbiterCount: Integer; inline;$/;"	f
GetAxisCount	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetAxisCount: Integer;$/;"	f
GetAxisPos	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetAxisPos(const Axis: TMZJoystickAxis): Single;$/;"	f
GetBlendMode	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetBlendMode: TMZBlendMode;$/;"	f
GetBody	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetBody(const Index: Integer): TCPBody; inline;$/;"	f
GetBodyCount	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetBodyCount: Integer; inline;$/;"	f
GetBottom	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetBottom: Single;$/;"	f
GetBoundingBox	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetBoundingBox: TMZRect;$/;"	f
GetBoundingBox	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetBoundingBox: TCPBB; inline;$/;"	f
GetButtonCount	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetButtonCount: Integer;$/;"	f
GetCaps	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetCaps: TMZJoystickCaps;$/;"	f
GetCaps	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetCaps(lpDSCaps: Pointer) : HResult; stdcall;$/;"	f
GetCenter	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetCenter: TMZPoint;$/;"	f
GetCenterX	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetCenterX: Single;$/;"	f
GetCenterY	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetCenterY: Single;$/;"	f
GetColorMode	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetColorMode: TMZColorMode;$/;"	f
GetConstraint	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetConstraint(const Index: Integer): TCPConstraint; inline;$/;"	f
GetConstraintCount	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetConstraintCount: Integer; inline;$/;"	f
GetContactPoint	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetContactPoint(const Index: Integer): PCPContact; inline;$/;"	f
GetCount	Engines/MondoZenGL/mzTileMaps.pas	/^    function GetCount: Integer; inline;$/;"	f
GetCurrentPosition	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetCurrentPosition$/;"	f
GetCurrentRenderFrameRate	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetCurrentRenderFrameRate: Integer; static;$/;"	f
GetCurrentVideoRamUsage	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetCurrentVideoRamUsage: Integer; static;$/;"	f
GetDX	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetDX: Integer; static;$/;"	f
GetDY	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetDY: Integer; static;$/;"	f
GetData	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetData: PByteArray;$/;"	f
GetDesktopHeight	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetDesktopHeight: Integer; static;$/;"	f
GetDesktopWidth	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetDesktopWidth: Integer; static;$/;"	f
GetDir	Engines/ZenGL/src/zgl_file.pas	/^function GetDir( const Path : UTF8String ) : UTF8String;$/;"	f
GetDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetDirectory(const Filename: UTF8String): UTF8String; static;$/;"	f
GetDurationMs	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetDurationMs: Double;$/;"	f
GetEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetEmitter(const Index: Integer): TMZParticleEmitter;$/;"	f
GetEmitterType	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetEmitterType: TMZParticleEmitterType;$/;"	f
GetEndFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetEndFrameNumber: Integer;$/;"	f
GetExtension	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetExtension(const Filename: UTF8String): UTF8String; static;$/;"	f
GetFirstTV	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetFirstTV: PCPVect; inline;$/;"	f
GetFirstVertex	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetFirstVertex: PCPVect; inline;$/;"	f
GetForce	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetForce: TCPVect; inline;$/;"	f
GetFormat	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetFormat: TMZTextureFormat;$/;"	f
GetFormat	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetFormat(lpwfxFormat: Pointer; dwSizeAllocated: LongWord;$/;"	f
GetFrameCount	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetFrameCount: Integer;$/;"	f
GetFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetFrameNumber: Integer;$/;"	f
GetFrameRate	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetFrameRate: Single;$/;"	f
GetFrequency	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetFrequency(out lpdwFrequency: LongWord) : HResult; stdcall;$/;"	f
GetGravity	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetGravity: TCPVect; inline;$/;"	f
GetHeight	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetHeight: Integer;$/;"	f
GetHeight	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetHeight: TCPFloat; inline;$/;"	f
GetHeight	Engines/MondoZenGL/mzTileMaps.pas	/^    function GetHeight: Integer; inline;$/;"	f
GetHomeDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetHomeDirectory: UTF8String; static;$/;"	f
GetID	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetID: Cardinal;$/;"	f
GetInterval	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetInterval: Integer;$/;"	f
GetJoystick	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetJoystick(const Index: Integer): TMZJoystick; static;$/;"	f
GetJoystickCount	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetJoystickCount: Integer; static;$/;"	f
GetLength	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetLength: Double;$/;"	f
GetMax	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetMax: TCPFloat; inline;$/;"	f
GetMaxAnisotropyLevel	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetMaxAnisotropyLevel: Integer; static;$/;"	f
GetMaxHeight	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetMaxHeight: Integer;$/;"	f
GetMaxTextureSize	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetMaxTextureSize: Integer; static;$/;"	f
GetMaxTextureUnits	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetMaxTextureUnits: Integer; static;$/;"	f
GetMin	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetMin: TCPFloat; inline;$/;"	f
GetMondoZenGLVersion	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetMondoZenGLVersion: Integer; static;$/;"	f
GetMondoZenGLVersionDate	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetMondoZenGLVersionDate: String; static;$/;"	f
GetMondoZenGLVersionString	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetMondoZenGLVersionString: String; static;$/;"	f
GetMonitorInfoW	Engines/ZenGL/src/zgl_screen.pas	/^function GetMonitorInfoW( monitor : HMONITOR; var moninfo : MONITORINFOEX ) : BOOL; stdcall; ext/;"	f
GetName	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetName(const Filename: UTF8String): UTF8String; static;$/;"	f
GetName	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetName: UTF8String;$/;"	f
GetNormal	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetNormal(const I: Integer = 0): TCPVect; inline;$/;"	f
GetNormal	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetNormal: TCPVect; inline;$/;"	f
GetNullJoystick	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetNullJoystick: TMZJoystick; static;$/;"	f
GetOpenGLContext	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetOpenGLContext: THandle; static;$/;"	f
GetPan	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetPan(out lplPan: integer) : HResult; stdcall;$/;"	f
GetPercentComplete	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetPercentComplete: Integer;$/;"	f
GetPlaybackPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetPlaybackPosition: Double;$/;"	f
GetPoint	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetPoint(const I: Integer): TCPVect; inline;$/;"	f
GetPoint	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetPoint: TCPVect; inline;$/;"	f
GetPos	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure GetPos(const Finger: Byte; out X, Y: Integer); static;$/;"	p
GetPos	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure GetPos(out X, Y: Integer); static;$/;"	p
GetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetPosition(const Finger: Byte): TMZPoint; static;$/;"	f
GetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetPosition: TMZPoint; static;$/;"	f
GetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetPosition: Integer;$/;"	f
GetPosition	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetPosition: TCPVect; inline;$/;"	f
GetPosition	Engines/ZenGL/src/zgl_sound.pas	/^function GetPosition( const Source : {$IFDEF USE_OPENAL} LongWord {$ELSE} IDirectSoundBuffer {$E/;"	f
GetPositionMs	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetPositionMs: Double;$/;"	f
GetRate	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetRate: TCPFloat; inline;$/;"	f
GetRestAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetRestAngle: TCPFloat; inline;$/;"	f
GetRight	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetRight: Single;$/;"	f
GetRotation	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetRotation: TCPVect; inline;$/;"	f
GetRotationAngle	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetRotationAngle: Single;$/;"	f
GetRotationalVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetRotationalVelocity: TCPFloat; inline;$/;"	f
GetScreenResolutions	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetScreenResolutions: TMZScreenResolutionArray; static;$/;"	f
GetShapes	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure GetShapes(out A, B: TCPShape); inline;$/;"	p
GetSize	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetSize: Integer;$/;"	f
GetSpeakerConfig	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetSpeakerConfig(out lpdwSpeakerConfig: LongWord) : HResult; stdcall;$/;"	f
GetSpinAngle	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetSpinAngle: Single;$/;"	f
GetSpinAngleVariation	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetSpinAngleVariation: Single;$/;"	f
GetSprite	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetSprite(const Index: Integer): TMZSprite;$/;"	f
GetSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    function  GetSprite( ID : Integer ) : zglCSprite2D;$/;"	f
GetStartFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetStartFrameNumber: Integer;$/;"	f
GetStatus	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetStatus(out lpdwStatus: LongWord) : HResult; stdcall;$/;"	f
GetStatusLooped	Engines/ZenGL/src/zgl_sound.pas	/^function GetStatusLooped( const Source : {$IFDEF USE_OPENAL} LongWord {$ELSE} IDirectSoundBuffer/;"	f
GetStatusPlaying	Engines/ZenGL/src/zgl_sound.pas	/^function GetStatusPlaying( const Source : {$IFDEF USE_OPENAL} LongWord {$ELSE} IDirectSoundBuffe/;"	f
GetStr	Engines/ZenGL/src/zgl_file.pas	/^function GetStr( const Str : UTF8String; const d : AnsiChar; const b : Boolean ) : UTF8String;$/;"	f
GetSupportsAutomaticMipmapGeneration	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetSupportsAutomaticMipmapGeneration: Boolean; static;$/;"	f
GetSupportsSeparateAlpha	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetSupportsSeparateAlpha: Boolean; static;$/;"	f
GetSurfaceVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetSurfaceVelocity: TCPVect; inline;$/;"	f
GetTV	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetTV(const Index: Integer): TCPVect; inline;$/;"	f
GetText	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetText: UTF8String; static;$/;"	f
GetVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetVelocity: TCPVect; inline;$/;"	f
GetVelocityBias	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetVelocityBias: TCPVect;$/;"	f
GetVertex	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetVertex(const Row, Column: Integer): TMZPoint;$/;"	f
GetVertex	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetVertex(const Index: Integer): TCPVect; inline;$/;"	f
GetVertexCount	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetVertexCount: Integer; inline;$/;"	f
GetViewportBounds	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetViewportBounds: TMZRect; static;$/;"	f
GetVolume	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function GetVolume(out lplVolume: integer) : HResult; stdcall;$/;"	f
GetWidth	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetWidth: Integer;$/;"	f
GetWidth	Engines/MondoZenGL/mzChipmunk.pas	/^    function GetWidth: TCPFloat; inline;$/;"	f
GetWidth	Engines/MondoZenGL/mzTileMaps.pas	/^    function GetWidth: Integer; inline;$/;"	f
GetWindowBounds	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetWindowBounds: TMZRect; static;$/;"	f
GetWindowHandle	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetWindowHandle: THandle; static;$/;"	f
GetX	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetX(const Finger: Byte): Integer; static;$/;"	f
GetX	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetX: Integer; static;$/;"	f
GetXOffset	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetXOffset: Single;$/;"	f
GetY	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetY(const Finger: Byte): Integer; static;$/;"	f
GetY	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetY: Integer; static;$/;"	f
GetYSOffset	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetYSOffset: Single;$/;"	f
GetZenGLVersion	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetZenGLVersion: Integer; static;$/;"	f
GetZenGLVersionDate	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetZenGLVersionDate: UTF8String; static;$/;"	f
GetZenGLVersionString	Engines/MondoZenGL/MondoZenGL.pas	/^    class function GetZenGLVersionString: UTF8String; static;$/;"	f
GetZoomX	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetZoomX: Single;$/;"	f
GetZoomY	Engines/MondoZenGL/MondoZenGL.pas	/^    function GetZoomY: Single;$/;"	f
Handle	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_InitToHandle : procedure( Handle : Ptr; FSAA : Byte = 0; StencilBits : Byte = 0 );$/;"	p
HasWheelScrolledDown	Engines/MondoZenGL/MondoZenGL.pas	/^    class function HasWheelScrolledDown: Boolean; static;$/;"	f
HasWheelScrolledUp	Engines/MondoZenGL/MondoZenGL.pas	/^    class function HasWheelScrolledUp: Boolean; static;$/;"	f
HashEach	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure HashEach(const Hash: PcpSpaceHash; const OnShape: TCPForEachShapeEvent;$/;"	p
HitDist	Engines/MondoZenGL/mzChipmunk.pas	/^    function HitDist(const A, B: TCPVect): TCPFloat; inline;$/;"	f
HitPoint	Engines/MondoZenGL/mzChipmunk.pas	/^    function HitPoint(const A, B: TCPVect): TCPVect; inline;$/;"	f
Ignore	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure Ignore; inline;$/;"	p
InRect	Engines/MondoZenGL/MondoZenGL.pas	/^    function InRect(const X, Y, W, H: Single): Boolean;$/;"	f
InTriangle	Engines/MondoZenGL/MondoZenGL.pas	/^    function InTriangle(const P1, P2, P3: TMZPoint): Boolean;$/;"	f
IndexOfTileSet	Engines/MondoZenGL/mzTileMaps.pas	/^    function IndexOfTileSet(const TileSet: TMZTileSet): Integer;$/;"	f
InitAGL	Engines/ZenGL/src/zgl_opengl_all.pas	/^function InitAGL : Boolean;$/;"	f
InitCosSinTables	Engines/ZenGL/src/zgl_math_2d.pas	/^procedure InitCosSinTables;$/;"	p
InitDSound	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function  InitDSound : Boolean;$/;"	f
InitDSound	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function InitDSound : Boolean;$/;"	f
InitGL	Engines/ZenGL/src/zgl_opengl_all.pas	/^function InitGL : Boolean;$/;"	f
InitGLES	Engines/ZenGL/src/zgl_opengles_all.pas	/^function InitGLES : Boolean;$/;"	f
InitModPlug	Engines/ZenGL/extra/zglModPlug.pas	/^procedure InitModPlug;$/;"	p
InitOgg	Engines/ZenGL/src/zgl_lib_ogg.pas	/^function  InitOgg : Boolean;$/;"	f
InitOgg	Engines/ZenGL/src/zgl_lib_ogg.pas	/^function InitOgg : Boolean;$/;"	f
InitOpenAL	Engines/ZenGL/src/zgl_sound_openal.pas	/^function  InitOpenAL : Boolean;$/;"	f
InitOpenAL	Engines/ZenGL/src/zgl_sound_openal.pas	/^function InitOpenAL : Boolean;$/;"	f
InitSoundVideo	Engines/ZenGL/src/zgl_main.pas	/^procedure InitSoundVideo;$/;"	p
InitTheora	Engines/ZenGL/src/zgl_lib_theora.pas	/^function  InitTheora : Boolean;$/;"	f
InitTheora	Engines/ZenGL/src/zgl_lib_theora.pas	/^function InitTheora : Boolean;$/;"	f
InitVorbis	Engines/ZenGL/src/zgl_lib_ogg.pas	/^function  InitVorbis : Boolean;$/;"	f
InitVorbis	Engines/ZenGL/src/zgl_lib_ogg.pas	/^function InitVorbis : Boolean;$/;"	f
Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Initialize; static;$/;"	p
Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Initialize; virtual;$/;"	p
Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Initialize;$/;"	p
Initialize	Engines/MondoZenGL/mzChipmunk.pas	/^    class procedure Initialize; static;$/;"	p
Initialize	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Initialize(lpDirectSound: IDirectSound;$/;"	f
Initialize	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Initialize(lpGuid: PGUID) : HResult; stdcall;$/;"	f
InsideCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    function InsideCircle(const Circle: TMZCircle): Boolean;$/;"	f
InsideCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    function InsideCircle(const OuterCircle: TMZCircle): Boolean;$/;"	f
InsideRect	Engines/MondoZenGL/MondoZenGL.pas	/^    function InsideRect(const OuterRect: TMZRect): Boolean;$/;"	f
InsideRectangle	Engines/MondoZenGL/MondoZenGL.pas	/^    function InsideRectangle(const X, Y, W, H: Single): Boolean;$/;"	f
IntToStr	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IntToStr(const Value: Integer): UTF8String; static;$/;"	f
InternalRemoveCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure InternalRemoveCollisionHandler(const A, B: TCPCollisionType);$/;"	p
Intersects	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Intersects(const A, B: TCPBB): TCPBool; overload; inline; static;$/;"	f
Intersects	Engines/MondoZenGL/mzChipmunk.pas	/^    function Intersects(const Other: TCPBB): TCPBool; overload; inline;$/;"	f
IntersectsCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    function IntersectsCircle(const Circle: TMZCircle): Boolean;$/;"	f
IntersectsCircle	Engines/MondoZenGL/MondoZenGL.pas	/^    function IntersectsCircle(const Other: TMZCircle): Boolean;$/;"	f
IntersectsLine	Engines/MondoZenGL/MondoZenGL.pas	/^    function IntersectsLine(const Other: TMZLine; const Intersection: PMZPoint): Boolean;$/;"	f
IntersectsRect	Engines/MondoZenGL/MondoZenGL.pas	/^    function IntersectsRect(const Other: TMZRect): Boolean;$/;"	f
IntersectsRectangle	Engines/MondoZenGL/MondoZenGL.pas	/^    function IntersectsRectangle(const Rect: TMZRect): Boolean;$/;"	f
IsButtonClicked	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsButtonClicked(const Button: TMZMouseButton): Boolean; static;$/;"	f
IsButtonDoubleClicked	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsButtonDoubleClicked(const Button: TMZMouseButton): Boolean; static;$/;"	f
IsButtonDown	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsButtonDown(const Button: TMZMouseButton): Boolean; static;$/;"	f
IsButtonDown	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsButtonDown(const Index: Integer): Boolean;$/;"	f
IsButtonPressed	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsButtonPressed(const Index: Integer): Boolean;$/;"	f
IsButtonUp	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsButtonUp(const Button: TMZMouseButton): Boolean; static;$/;"	f
IsButtonUp	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsButtonUp(const Index: Integer): Boolean;$/;"	f
IsFingerDoubleTapped	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsFingerDoubleTapped(const Finger: Byte): Boolean; static;$/;"	f
IsFingerDown	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsFingerDown(const Finger: Byte): Boolean; static;$/;"	f
IsFingerTapped	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsFingerTapped(const Finger: Byte): Boolean; static;$/;"	f
IsFingerUp	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsFingerUp(const Finger: Byte): Boolean; static;$/;"	f
IsFirstContact	Engines/MondoZenGL/mzChipmunk.pas	/^    function IsFirstContact: Boolean; inline;$/;"	f
IsKeyDown	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsKeyDown(const KeyCode: TMZKeyCode): Boolean; static;$/;"	f
IsKeyPressed	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsKeyPressed(const KeyCode: TMZKeyCode): Boolean; static;$/;"	f
IsKeyUp	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsKeyUp(const KeyCode: TMZKeyCode): Boolean; static;$/;"	f
IsLooped	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsLooped(const Channel: Integer): Boolean;$/;"	f
IsLooped	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsLooped: Boolean;$/;"	f
IsPlaying	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsPlaying(const Channel: Integer): Boolean;$/;"	f
IsPlaying	Engines/MondoZenGL/MondoZenGL.pas	/^    function IsPlaying: Boolean;$/;"	f
IsRogue	Engines/MondoZenGL/mzChipmunk.pas	/^    function IsRogue: TCPBool; inline;$/;"	f
IsSleeping	Engines/MondoZenGL/mzChipmunk.pas	/^    function IsSleeping: TCPBool; inline;$/;"	f
IsStatic	Engines/MondoZenGL/mzChipmunk.pas	/^    function IsStatic: TCPBool; inline;$/;"	f
IsZeroTexture	Engines/MondoZenGL/MondoZenGL.pas	/^    class function IsZeroTexture(const Handle: zglPTexture): Boolean; static;$/;"	f
JNI_CreateJavaVM	Engines/ZenGL/src/jni.pas	/^function JNI_CreateJavaVM(vm:PPJavaVM;AEnv:PPJNIEnv;p:pointer):jint;{$ifdef mswindows}stdcall;{$/;"	f
JNI_GetCreatedJavaVMs	Engines/ZenGL/src/jni.pas	/^function JNI_GetCreatedJavaVMs(vm:PPJavaVM;ASize:jsize;p:Pjsize):jint;{$ifdef mswindows}stdcall;/;"	f
JNI_GetDefaultJavaVMInitArgs	Engines/ZenGL/src/jni.pas	/^function JNI_GetDefaultJavaVMInitArgs(p:pointer):jint;{$ifdef mswindows}stdcall;{$else}cdecl;{$e/;"	f
JNI_OnLoad	Engines/ZenGL/src/jni.pas	/^function JNI_OnLoad(vm:PJavaVM;reserved:pointer):jint;{$ifdef mswindows}stdcall;{$else}cdecl;{$e/;"	f
JNI_OnLoad	Engines/ZenGL/src/zgl_application.pas	/^function  JNI_OnLoad( vm : PJavaVM; reserved : Pointer ) : jint; cdecl;$/;"	f
JNI_OnLoad	Engines/ZenGL/src/zgl_application.pas	/^function JNI_OnLoad( vm : PJavaVM; reserved : Pointer) : jint;$/;"	f
JNI_OnUnload	Engines/ZenGL/src/jni.pas	/^procedure JNI_OnUnload(vm:PJavaVM;reserved:pointer);{$ifdef mswindows}stdcall;{$else}cdecl;{$end/;"	p
JNI_OnUnload	Engines/ZenGL/src/zgl_application.pas	/^function  JNI_OnUnload( vm : PJavaVM; reserved : Pointer) : jint; cdecl;$/;"	f
JNI_OnUnload	Engines/ZenGL/src/zgl_application.pas	/^function JNI_OnUnload( vm : PJavaVM; reserved : Pointer) : jint;$/;"	f
Java_zengl_android_ZenGL_zglNativeActivate	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeActivate( env : PJNIEnv; thiz : jobject; Activate : /;"	p
Java_zengl_android_ZenGL_zglNativeBackspace	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeBackspace( env : PJNIEnv; thiz : jobject ); cdecl;$/;"	p
Java_zengl_android_ZenGL_zglNativeBackspace	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeBackspace( env : PJNIEnv; thiz : jobject );$/;"	p
Java_zengl_android_ZenGL_zglNativeCloseQuery	Engines/ZenGL/src/zgl_application.pas	/^function  Java_zengl_android_ZenGL_zglNativeCloseQuery( env : PJNIEnv; thiz : jobject ) : Boolea/;"	f
Java_zengl_android_ZenGL_zglNativeCloseQuery	Engines/ZenGL/src/zgl_application.pas	/^function Java_zengl_android_ZenGL_zglNativeCloseQuery( env : PJNIEnv; thiz : jobject ) : Boolean/;"	f
Java_zengl_android_ZenGL_zglNativeDestroy	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeDestroy( env : PJNIEnv; thiz : jobject ); cdecl;$/;"	p
Java_zengl_android_ZenGL_zglNativeDestroy	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeDestroy( env : PJNIEnv; thiz : jobject );$/;"	p
Java_zengl_android_ZenGL_zglNativeDrawFrame	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeDrawFrame( env : PJNIEnv; thiz : jobject ); cdecl;$/;"	p
Java_zengl_android_ZenGL_zglNativeDrawFrame	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeDrawFrame( env : PJNIEnv; thiz : jobject );$/;"	p
Java_zengl_android_ZenGL_zglNativeInit	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeInit( env : PJNIEnv; thiz : jobject; AppDirectory, H/;"	p
Java_zengl_android_ZenGL_zglNativeInputText	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeInputText( env : PJNIEnv; thiz : jobject; text : jst/;"	p
Java_zengl_android_ZenGL_zglNativeSurfaceChanged	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeSurfaceChanged( env : PJNIEnv; thiz : jobject; Width/;"	p
Java_zengl_android_ZenGL_zglNativeSurfaceCreated	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeSurfaceCreated( env : PJNIEnv; thiz : jobject ); cde/;"	p
Java_zengl_android_ZenGL_zglNativeSurfaceCreated	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeSurfaceCreated( env : PJNIEnv; thiz : jobject );$/;"	p
Java_zengl_android_ZenGL_zglNativeTouch	Engines/ZenGL/src/zgl_application.pas	/^procedure Java_zengl_android_ZenGL_zglNativeTouch( env : PJNIEnv; thiz : jobject; ID : jint; X, /;"	p
KeyChar	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure KeyChar(const Symbol: String); virtual;$/;"	p
KeyDown	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure KeyDown(const KeyCode: TMZKeyCode); virtual;$/;"	p
KeyExists	Engines/MondoZenGL/MondoZenGL.pas	/^    class function KeyExists(const Section, Key: UTF8String): Boolean; static;$/;"	f
KeyUp	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure KeyUp(const KeyCode: TMZKeyCode); virtual;$/;"	p
LastKeyState	Engines/MondoZenGL/MondoZenGL.pas	/^    class function LastKeyState(const KeyCode: TMZKeyCode): TMZKeyState; static;$/;"	f
Length	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Length(const V: TCPVect): TCPFloat; overload; inline; static;$/;"	f
Length	Engines/MondoZenGL/mzChipmunk.pas	/^    function Length: TCPFloat; overload; inline;$/;"	f
LengthSq	Engines/MondoZenGL/mzChipmunk.pas	/^    class function LengthSq(const V: TCPVect): TCPFloat; overload; inline; static;$/;"	f
LengthSq	Engines/MondoZenGL/mzChipmunk.pas	/^    function LengthSq: TCPFloat; overload; inline;$/;"	f
LinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^    class function LinearInterpolate(const V1, V2: TCPVect;$/;"	f
LinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^    function LinearInterpolate(const Target: TCPVect;$/;"	f
LinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^    class function LinearInterpolateConst(const V1, V2: TCPVect;$/;"	f
LinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^    function LinearInterpolateConst(const Target: TCPVect;$/;"	f
Load	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Load(const Filename: UTF8String): Boolean; static;$/;"	f
Load	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Load(const Count: Integer; const Reader: TMZTileReader);$/;"	p
Load	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Load(const Reader: TMZTileReader);$/;"	p
LoadCursorW	Engines/ZenGL/src/zgl_window.pas	/^function LoadCursorW(hInstance: HINST; lpCursorName: PWideChar): HCURSOR; stdcall; external user/;"	f
LoadTexturesIfNeeded	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure LoadTexturesIfNeeded;$/;"	p
LocalToWorld	Engines/MondoZenGL/mzChipmunk.pas	/^    function LocalToWorld(const V: TCPVect): TCPVect; inline;$/;"	f
Lock	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Lock(dwWriteCursor, dwWriteBytes: LongWord;$/;"	f
LockRegion	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function LockRegion(libOffset: Largeint; cb: Largeint;$/;"	f
Log	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Log(const Msg: UTF8String; const Args: array of const;$/;"	p
Log	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Log(const Msg: UTF8String;$/;"	p
LoopStream	Engines/ZenGL/src/zgl_sound.pas	/^  procedure LoopStream( _buffer : PByteArray; _bufferSize : LongWord );$/;"	p
MainLoop	Engines/ZenGL/src/zgl_application.pas	/^    procedure MainLoop; message 'MainLoop';$/;"	p
MapToLocal	Engines/MondoZenGL/mzTileMaps.pas	/^    function MapToLocal(const MapPoint: TMZPoint): TMZPoint;$/;"	f
Max	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Max(const A, B: TCPFloat): TCPFloat; inline; static;$/;"	f
Merge	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Merge(const A, B: TCPBB): TCPBB; overload; inline; static;$/;"	f
Merge	Engines/MondoZenGL/mzChipmunk.pas	/^    function Merge(const Other: TCPBB): TCPBB; overload; inline;$/;"	f
MessageBoxA	Engines/ZenGL/extra/zglChipmunk.pas	/^function MessageBoxA( hWnd : LongWord; lpText, lpCaption : PAnsiChar; uType : LongWord) : Intege/;"	f
Min	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Min(const A, B: TCPFloat): TCPFloat; inline; static;$/;"	f
MomentForBox	Engines/MondoZenGL/mzChipmunk.pas	/^    class function MomentForBox(const Mass, Width, Height: TCPFloat): TCPFloat; inline; static;$/;"	f
MomentForCircle	Engines/MondoZenGL/mzChipmunk.pas	/^    class function MomentForCircle(const Mass, R1, R2: TCPFloat;$/;"	f
MomentForPolygon	Engines/MondoZenGL/mzChipmunk.pas	/^    class function MomentForPolygon(const Mass: TCPFloat;$/;"	f
MomentForSegment	Engines/MondoZenGL/mzChipmunk.pas	/^    class function MomentForSegment(const Mass: TCPFloat;$/;"	f
MonitorFromWindow	Engines/ZenGL/src/zgl_screen.pas	/^function MonitorFromWindow( hwnd : HWND; dwFlags : LongWord ) : THandle; stdcall; external 'user/;"	f
MouseDown	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure MouseDown(const Button: TMZMouseButton); virtual;$/;"	p
MouseMove	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure MouseMove(const X, Y: Integer); virtual;$/;"	p
MouseUp	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure MouseUp(const Button: TMZMouseButton); virtual;$/;"	p
MouseWheel	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure MouseWheel(const Up: Boolean); virtual;$/;"	p
MoveFileExA	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function MoveFileExA( lpExistingFileName : PAnsiChar; lpNewFileName : PAnsiChar; dwFlags : DWO/;"	f
Near	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Near(const V1, V2: TCPVect;$/;"	f
Near	Engines/MondoZenGL/mzChipmunk.pas	/^    function Near(const Other: TCPVect;$/;"	f
Normalize	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Normalize(const V: TCPVect): TCPVect; overload; inline; static;$/;"	f
Normalize	Engines/MondoZenGL/mzChipmunk.pas	/^    function Normalize: TCPVect; overload; inline;$/;"	f
NormalizeSafe	Engines/MondoZenGL/mzChipmunk.pas	/^    class function NormalizeSafe(const V: TCPVect): TCPVect; overload; inline; static;$/;"	f
NormalizeSafe	Engines/MondoZenGL/mzChipmunk.pas	/^    function NormalizeSafe: TCPVect; overload; inline;$/;"	f
Nothing	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure Nothing(const Space: TCPSpace;$/;"	p
OleLoadPicture	Engines/ZenGL/src/zgl_textures_jpg.pas	/^  function OleLoadPicture(stream: IStream; lSize: Longint; fRunmode: BOOL;$/;"	f
OnDraw	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure OnDraw; virtual;$/;"	p
OnFree	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure OnFree; virtual;$/;"	p
OnInit	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure OnInit( _Texture : zglPTexture; _Layer : Integer ); virtual;$/;"	p
OnProc	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure OnProc; virtual;$/;"	p
OnTimer	Engines/ZenGL/headers/zglHeader.pas	/^  timer_Add      : function( OnTimer : Pointer; Interval : LongWord; UseSenderForCallback : Bool/;"	f
OnTimerEx	Engines/ZenGL/headers/zglHeader.pas	/^    OnTimerEx  : procedure( Timer : zglPTimer );$/;"	p
OnTimerEx	Engines/ZenGL/src/zgl_timers.pas	/^    OnTimerEx  : procedure( Timer : zglPTimer );$/;"	p
Open	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Open(const Filename: UTF8String): TMZFile; static;$/;"	f
OpenArchive	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure OpenArchive(const Filename:$/;"	p
Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^    function Orientation(const P: TMZPoint): TMZOrientation; overload;$/;"	f
Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^    function Orientation(const X, Y, X1, Y1, X2, Y2: Single): TMZOrientation; overload;$/;"	f
Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^    function Orientation(const X, Y: Single): TMZOrientation; overload;$/;"	f
Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^    function Orientation(const X1, Y1, X2, Y2: Single): TMZOrientation;$/;"	f
PaethPredictor	Engines/ZenGL/src/zgl_textures_png.pas	/^  function PaethPredictor( a, b, c : Integer ) : Integer; {$IFDEF USE_INLINE} inline; {$ENDIF}$/;"	f
Pause	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Pause;$/;"	p
Pbuffer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  wglDestroyPbufferARB: function(hPbuffer: THandle): BOOL; stdcall;$/;"	f
Pbuffer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  wglGetPbufferDCARB: function(hPbuffer: THandle): HDC; stdcall;$/;"	f
Pbuffer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  wglReleasePbufferDCARB: function(hPbuffer: THandle; hDC: HDC): GLint; stdcall;$/;"	f
PcpConstraintClass	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGrooveJointGetClass: function: PcpConstraintClass; cdecl;$/;"	f
PcpConstraintClass	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPinJointGetClass: function: PcpConstraintClass; cdecl;$/;"	f
PcpConstraintClass	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPivotJointGetClass: function: PcpConstraintClass; cdecl;$/;"	f
PcpConstraintClass	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSlideJointGetClass: function: PcpConstraintClass; cdecl;$/;"	f
Perp	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Perp(const V: TCPVect): TCPVect; overload; inline; static;$/;"	f
Perp	Engines/MondoZenGL/mzChipmunk.pas	/^    function Perp: TCPVect; overload; inline;$/;"	f
PictureChanged	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function PictureChanged: HResult; stdcall;$/;"	f
Play	Engines/MondoZenGL/MondoZenGL.pas	/^    function Play(const Looped: Boolean = False; const X: Single = 0;$/;"	f
Play	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Play(const Looped: Boolean = False);$/;"	p
Play	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Play(dwReserved1,dwReserved2,dwFlags: LongWord) : HResult; stdcall;$/;"	f
PointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^    function PointQuery(const P: TCPVect): TCPBool; inline;$/;"	f
PointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^    function PointQuery(const P: TCPVect; const Layers: TCPLayers;$/;"	f
PointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure PointQuery(const P: TCPVect; const Layers: TCPLayers;$/;"	p
PostStepFunc	Engines/MondoZenGL/mzChipmunk.pas	/^procedure PostStepFunc(Space: PcpSpace; Obj: Pointer; Data: Pointer); cdecl;$/;"	p
PostStepSetEqual	Engines/MondoZenGL/mzChipmunk.pas	/^function PostStepSetEqual(Ptr, Elt: Pointer): TCPBool; cdecl;$/;"	f
PostStepSetTrans	Engines/MondoZenGL/mzChipmunk.pas	/^function PostStepSetTrans(Ptr: Pointer; Data: Pointer): Pointer; cdecl;$/;"	f
Proc	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure Proc; virtual;$/;"	p
Project	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Project(const V1, V2: TCPVect): TCPVect; overload; inline; static;$/;"	f
Project	Engines/MondoZenGL/mzChipmunk.pas	/^    function Project(const Target: TCPVect): TCPVect; overload; inline;$/;"	f
Quit	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Quit;$/;"	p
RPerp	Engines/MondoZenGL/mzChipmunk.pas	/^    class function RPerp(const V: TCPVect): TCPVect; overload; inline; static;$/;"	f
RPerp	Engines/MondoZenGL/mzChipmunk.pas	/^    function RPerp: TCPVect; overload; inline;$/;"	f
Read	Engines/MondoZenGL/MondoZenGL.pas	/^    function Read(var Buffer; const Count: Integer): Integer;$/;"	f
Read	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Read(pv: Pointer; cb: Longint; pcbRead: PLongint): HResult;$/;"	f
ReadBool	Engines/MondoZenGL/MondoZenGL.pas	/^    class function ReadBool(const Section, Key: UTF8String): Boolean; static;$/;"	f
ReadBool	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadBool: Boolean;$/;"	f
ReadFloat	Engines/MondoZenGL/MondoZenGL.pas	/^    class function ReadFloat(const Section, Key: UTF8String): Single; static;$/;"	f
ReadInt	Engines/MondoZenGL/MondoZenGL.pas	/^    class function ReadInt(const Section, Key: UTF8String): Integer; static;$/;"	f
ReadInt16	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadInt16: Integer;$/;"	f
ReadInt32	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadInt32: Integer;$/;"	f
ReadInt8	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadInt8: Integer;$/;"	f
ReadPixels	Engines/MondoZenGL/MondoZenGL.pas	/^    class function ReadPixels(const Bounds: TMZRect): Pointer; overload; static;$/;"	f
ReadPixels	Engines/MondoZenGL/MondoZenGL.pas	/^    class function ReadPixels(const X, Y, W, H: Integer): Pointer; overload; static;$/;"	f
ReadProperties	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadProperties: TMZTileProperties;$/;"	f
ReadString	Engines/MondoZenGL/MondoZenGL.pas	/^    class function ReadString(const Section, Key: UTF8String): UTF8String; static;$/;"	f
ReadString	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadString: UTF8String;$/;"	f
ReadTag	Engines/MondoZenGL/mzTileMaps.pas	/^    function ReadTag(out TagName: UTF8String; out Size: Integer): Boolean;$/;"	f
RehashStatic	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure RehashStatic; inline;$/;"	p
RemoveBody	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure RemoveBody(const Body: TCPBody); inline;$/;"	p
RemoveCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure RemoveCollisionHandler(const A, B: TCPCollisionType);$/;"	p
RemoveConstraint	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure RemoveConstraint(const Constraint: TCPConstraint); inline;$/;"	p
RemoveEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure RemoveEmitter(const Emitter: TMZParticleEmitter);$/;"	p
RemoveShape	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure RemoveShape(const Shape: TCPShape); inline;$/;"	p
RemoveStaticShape	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure RemoveStaticShape(const Shape: TCPShape); inline;$/;"	p
Render	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Render(const Texture: TMZTexture; const FrameNum: Integer;$/;"	p
Render	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Render(const Texture: TMZTexture; const SR: TMZRect;$/;"	p
Render	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Render(const Texture: TMZTexture; const XOffset, YOffset: Single;$/;"	p
Render	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Render;$/;"	p
Render	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Render(const ViewCenter: TMZPoint);$/;"	p
Render	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Render;$/;"	p
Render	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Render(dc: HDC; x, y, cx, cy: Longint;$/;"	f
RenderFrame	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure RenderFrame; virtual;$/;"	p
Reset	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Reset;$/;"	p
ResetForces	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ResetForces; inline;$/;"	p
ResetIdCounter	Engines/MondoZenGL/mzChipmunk.pas	/^    class procedure ResetIdCounter; inline; static;$/;"	p
ResizeActiveHash	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ResizeActiveHash(const Dim: TCPFloat = 100;$/;"	p
ResizeStaticHash	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure ResizeStaticHash(const Dim: TCPFloat = 100;$/;"	p
Restore	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Restore: HResult; stdcall;$/;"	f
Resume	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Resume;$/;"	p
Revert	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Revert: HResult; stdcall;$/;"	f
Rotate	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Rotate(const V1, V2: TCPVect): TCPVect; overload; inline; static;$/;"	f
Rotate	Engines/MondoZenGL/mzChipmunk.pas	/^    function Rotate(const Other: TCPVect): TCPVect; overload; inline;$/;"	f
Save	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Save(const Filename: UTF8String); static;$/;"	p
Save	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Save(const Writer: TMZTileWriter);$/;"	p
SaveAsFile	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function SaveAsFile(const stream: IStream; fSaveMemCopy: BOOL;$/;"	f
SaveToFile	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SaveToFile(const Filename: UTF8String);$/;"	p
SaveToFile	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure SaveToFile(const Filename: UTF8String);$/;"	p
SectionExists	Engines/MondoZenGL/MondoZenGL.pas	/^    class function SectionExists(const Section: UTF8String): Boolean; static;$/;"	f
Seek	Engines/MondoZenGL/MondoZenGL.pas	/^    function Seek(const Offset: Integer; const Mode: TMZSeekMode): Integer;$/;"	f
Seek	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Seek(const SeekTimeMs: Double);$/;"	p
Seek	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Seek(dlibMove: Largeint; dwOrigin: Longint;$/;"	f
SegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^    function SegmentQuery(const A, B: TCPVect; const Layers: TCPLayers;$/;"	f
SegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^    function SegmentQuery(const A, B: TCPVect; out Info: TCPSegmentQueryInfo): TCPBool; inline;$/;"	f
SegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SegmentQuery(const A, B: TCPVect; const Layers: TCPLayers;$/;"	p
SelectPicture	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function SelectPicture(dcIn: HDC; out hdcOut: HDC;$/;"	f
Set2DMode	Engines/ZenGL/src/zgl_render.pas	/^procedure Set2DMode;$/;"	p
Set3DMode	Engines/ZenGL/headers/zglHeader.pas	/^  Set3DMode : procedure( FOVY : Single = 45 );$/;"	p
Set3DMode	Engines/ZenGL/src/zgl_render.pas	/^procedure Set3DMode( FOVY : Single = 45 );$/;"	p
Set3DPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Set3DPosition(const X, Y, Z: Single);$/;"	p
Set3DPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Set3DPosition(const X, Y, Z: Single;$/;"	p
Set3DPositionAll	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Set3DPositionAll(const X, Y, Z: Single); static;$/;"	p
SetActive	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetActive(const Value: Boolean);$/;"	p
SetAlphas	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetAlphas(const Alphas: array of Byte;$/;"	p
SetAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetAngle(const Value: TCPFloat); inline;$/;"	p
SetAngularVelocities	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetAngularVelocities(const Velocities, Ages: array of Single);$/;"	p
SetAngularVelocity	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetAngularVelocity(const Value: Single);$/;"	p
SetAngularVelocityVariation	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetAngularVelocityVariation(const Value: Single);$/;"	p
SetAnisotropyLevel	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetAnisotropyLevel(const Value: Integer); static;$/;"	p
SetAntiAlias	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetAntiAlias(const Value: Boolean); static;$/;"	p
SetAppFlag	Engines/MondoZenGL/MondoZenGL.pas	/^  procedure SetAppFlag(const Flag: Longword; const Option: TMZApplicationOption);$/;"	p
SetBlendMode	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetBlendMode(const Value: TMZBlendMode); static;$/;"	p
SetBlendMode	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetBlendMode(const Value: TMZBlendMode);$/;"	p
SetBottom	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetBottom(const Value: Single);$/;"	p
SetCamera	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetCamera(const Value: TMZCamera); static;$/;"	p
SetCaption	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetCaption(const Value: UTF8String);$/;"	p
SetCenter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetCenter(const Value: TMZPoint);$/;"	p
SetCenterX	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetCenterX(const Value: Single);$/;"	p
SetCenterY	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetCenterY(const Value: Single);$/;"	p
SetCircleEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetCircleEmitter(const X, Y, Radius, Direction, Spread: Single);$/;"	p
SetColorMask	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetColorMask(const R, G, B, A: Boolean); static;$/;"	p
SetColorMode	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetColorMode(const Value: TMZColorMode); static;$/;"	p
SetColorMode	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetColorMode(const Value: TMZColorMode);$/;"	p
SetColors	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetColors(const Colors: array of Cardinal;$/;"	p
SetConstrainView	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure SetConstrainView(const Value: Boolean);$/;"	p
SetCooperativeLevel	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetCooperativeLevel(hwnd: HWND; dwLevel: LongWord) : HResult; stdcall;$/;"	f
SetCurrentMode	Engines/ZenGL/src/zgl_render.pas	/^procedure SetCurrentMode;$/;"	p
SetCurrentPosition	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetCurrentPosition(dwPosition: LongWord) : HResult; stdcall;$/;"	f
SetData	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetData(const Data: Pointer; const X, Y, Width, Height: Integer;$/;"	p
SetDefaultCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetDefaultCollisionHandler($/;"	p
SetEmitterType	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetEmitterType(const Typ: Byte; const X, Y: Single);$/;"	p
SetEndFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetEndFrameNumber(const Value: Integer);$/;"	p
SetForce	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetForce(const Value: TCPVect); inline;$/;"	p
SetFormat	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetFormat(lpcfxFormat: Pointer) : HResult; stdcall;$/;"	f
SetFrameSize	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetFrameSize(const FrameWidth, FrameHeight: Integer);$/;"	p
SetFrequency	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetFrequency(dwFrequency: LongWord) : HResult; stdcall;$/;"	f
SetGravity	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetGravity(const Value: TCPVect); inline;$/;"	p
SetGrooveA	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetGrooveA(const Value: TCPVect); inline;$/;"	p
SetGrooveB	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetGrooveB(const Value: TCPVect); inline;$/;"	p
SetInterval	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetInterval(const Value: Integer);$/;"	p
SetLineEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetLineEmitter(const X, Y, Length, Direction, Spread: Single;$/;"	p
SetMass	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetMass(const Value: TCPFloat); inline;$/;"	p
SetMax	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetMax(const Value: TCPFloat); inline;$/;"	p
SetMin	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetMin(const Value: TCPFloat); inline;$/;"	p
SetMoment	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetMoment(const Value: TCPFloat); inline;$/;"	p
SetNormal	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetNormal(const Value: TCPVect); inline;$/;"	p
SetNotificationPositions	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetNotificationPositions(dwPositionNotifies: DWORD; pcPositionNotifies: PDSBPositio/;"	f
SetOnForce	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetOnForce(const Value: TCPDampedSpringForceEvent);$/;"	p
SetOnUpdatePosition	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetOnUpdatePosition(const Value: TCPBodyPositionEvent);$/;"	p
SetOnUpdateVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetOnUpdateVelocity(const Value: TCPBodyVelocityEvent);$/;"	p
SetOptions	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetOptions(const Value: TMZApplicationOptions);$/;"	p
SetPan	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetPan(lPan: integer) : HResult; stdcall;$/;"	f
SetPath	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPath(const Path: UTF8String); static;$/;"	p
SetPerVertexColors	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPerVertexColors(const C1, C2, C3, C4: Cardinal;$/;"	p
SetPerVertexColors	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPerVertexColors(const C1, C2: Cardinal;$/;"	p
SetPivotPoint	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPivotPoint(const Pivot: TMZPoint); overload; static;$/;"	p
SetPivotPoint	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPivotPoint(const X, Y: Single); overload; static;$/;"	p
SetPoint	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetPoint(const Value: TCPVect); inline;$/;"	p
SetPointEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetPointEmitter(const X, Y, Direction, Spread: Single);$/;"	p
SetPos	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPos(const X, Y: Integer); static;$/;"	p
SetPos	Engines/ZenGL/src/zgl_sound.pas	/^  procedure SetPos( Sound : zglPSound; ID : Integer; X, Y, Z : Single );$/;"	p
SetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetPosition(Value: TMZPoint); static;$/;"	p
SetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetPosition(const Value: Integer);$/;"	p
SetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetPosition(const Value: Longword);$/;"	p
SetPosition	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetPosition(const Value: TCPVect); inline;$/;"	p
SetRate	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetRate(const Value: TCPFloat); inline;$/;"	p
SetRectangleEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetRectangleEmitter(const X, Y, Width, Height, Direction,$/;"	p
SetRenderTarget	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetRenderTarget(const Value: TMZRenderTarget); static;$/;"	p
SetRestAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetRestAngle(const Value: TCPFloat); inline;$/;"	p
SetRight	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetRight(const Value: Single);$/;"	p
SetRingEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetRingEmitter(const X, Y, Radius1, Radius2, Direction,$/;"	p
SetRotationAngle	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetRotationAngle(const Value: Single);$/;"	p
SetRotationalVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetRotationalVelocity(const Value: TCPFloat); inline;$/;"	p
SetScale	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetScale(const Scale: Single); overload; static;$/;"	p
SetScale	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetScale(const ScaleX, ScaleY: Single); overload; static;$/;"	p
SetScaleX	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetScaleX(const Value: Single); static;$/;"	p
SetScaleY	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetScaleY(const Value: Single); static;$/;"	p
SetScene	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetScene(const Scene: TMZScene);$/;"	p
SetSeparateAlpha	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetSeparateAlpha(const Value: Boolean); static;$/;"	p
SetSize	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSize(const Value: Longword);$/;"	p
SetSize	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure SetSize(const ColumnCount, RowCount: Integer);$/;"	p
SetSize	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function SetSize(libNewSize: Largeint): HResult; stdcall;$/;"	f
SetSizes	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSizes(const Sizes, Ages: array of Single;$/;"	p
SetSpeakerConfig	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetSpeakerConfig(dwSpeakerConfig: LongWord) : HResult; stdcall;$/;"	f
SetSpeed	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSpeed(const Speed: Single);$/;"	p
SetSpeed	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSpeed(const Speed: Single;$/;"	p
SetSpeed	Engines/ZenGL/src/zgl_sound.pas	/^  procedure SetSpeed( Sound : zglPSound; ID : Integer; Speed : Single );$/;"	p
SetSpeedAll	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetSpeedAll(const Speed: Single); static;$/;"	p
SetSpinAngle	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSpinAngle(const Value: Single);$/;"	p
SetSpinAngleVariation	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSpinAngleVariation(const Value: Single);$/;"	p
SetSpinAngles	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetSpinAngles(const Factors, Ages: array of Single);$/;"	p
SetSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure SetSprite( ID : Integer; Sprite : zglCSprite2D );$/;"	p
SetStartFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetStartFrameNumber(const Value: Integer);$/;"	p
SetStreamPos	Engines/ZenGL/src/zgl_sound.pas	/^  procedure SetStreamPos( ID : Integer; X, Y, Z : Single );$/;"	p
SetStreamSpeed	Engines/ZenGL/src/zgl_sound.pas	/^  procedure SetStreamSpeed( ID : Integer; Speed : Single );$/;"	p
SetStreamVolume	Engines/ZenGL/src/zgl_sound.pas	/^  procedure SetStreamVolume( ID : Integer; Volume : Single );$/;"	p
SetSurfaceVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetSurfaceVelocity(const Value: TCPVect); inline;$/;"	p
SetTextureColor	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetTextureColor(const Value: Cardinal); static;$/;"	p
SetVelocities	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetVelocities(const Velocities, Ages: array of Single);$/;"	p
SetVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetVelocity(const Value: TCPVect); inline;$/;"	p
SetVelocityBias	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure SetVelocityBias(const Value: TCPVect);$/;"	p
SetVertex	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetVertex(const Row, Column: Integer; const Value: TMZPoint);$/;"	p
SetVertexOffsets	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetVertexOffsets(const P1, P2, P3, P4: TMZPoint); overload; static;$/;"	p
SetVertexOffsets	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetVertexOffsets(const X1, Y1, X2, Y2, X3, Y3, X4,$/;"	p
SetViewCenter	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure SetViewCenter(const Value: TMZPoint);$/;"	p
SetViewCenterX	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure SetViewCenterX(const Value: Single);$/;"	p
SetViewCenterY	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure SetViewCenterY(const Value: Single);$/;"	p
SetVolume	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetVolume(const Volume: Single);$/;"	p
SetVolume	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetVolume(const Volume: Single;$/;"	p
SetVolume	Engines/ZenGL/src/zgl_sound.pas	/^  procedure SetVolume( Sound : zglPSound; ID : Integer; Volume : Single );$/;"	p
SetVolume	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function SetVolume(lVolume: integer) : HResult; stdcall;$/;"	f
SetVolumeAll	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetVolumeAll(const Volume: Single); static;$/;"	p
SetWindowBounds	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetWindowBounds(const Value: TMZRect); static;$/;"	p
SetX	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetX(const Value: Integer); static;$/;"	p
SetXOffset	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetXOffset(const Value: Single);$/;"	p
SetY	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure SetY(const Value: Integer); static;$/;"	p
SetYOffset	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetYOffset(const Value: Single);$/;"	p
SetZoomX	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetZoomX(const Value: Single);$/;"	p
SetZoomY	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SetZoomY(const Value: Single);$/;"	p
Setup	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Setup;$/;"	p
ShapeType	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ShapeType: TCPShapeType; override;$/;"	f
ShapeType	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ShapeType: TCPShapeType; virtual; abstract;$/;"	f
Show	Engines/ZenGL/headers/zglHeader.pas	/^  wnd_ShowCursor : procedure( Show : Boolean );$/;"	p
Shutdown	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Shutdown; virtual;$/;"	p
Sin	Engines/MondoZenGL/MondoZenGL.pas	/^    class function Sin(const Angle: Integer): Single; static;$/;"	f
Size	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    GetMem  : function( Size : Integer ) : PByte; cdecl;$/;"	f
Sleep	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure Sleep(const SleepTimeMs: Integer); static;$/;"	p
Sleep	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure Sleep; inline;$/;"	p
Slew	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure Slew(const Pos: TCPVect; const DT: TCPFloat); inline;$/;"	p
SortByID	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SortByID(const ALo, AHi: Integer);$/;"	p
SortByID	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure SortByID( iLo, iHi : Integer );$/;"	p
SortByIndex	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SortByIndex(const ALo, AHi: Integer);$/;"	p
SortByLayer	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SortByLayer(const ALo, AHi: Integer);$/;"	p
SortByLayer	Engines/ZenGL/extra/zglSpriteEngine.pas	/^    procedure SortByLayer( iLo, iHi : Integer );$/;"	p
SpaceHashIterator	Engines/MondoZenGL/mzChipmunk.pas	/^procedure SpaceHashIterator(Obj: Pointer; Data: Pointer); cdecl;$/;"	p
SpacePointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^procedure SpacePointQuery(Shape: PcpShape; Data: Pointer); cdecl;$/;"	p
SpaceSegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^procedure SpaceSegmentQuery(Shape: PcpShape; T: cpFloat; N: cpVect; Data: Pointer); cdecl;$/;"	p
SphericalLinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^    class function SphericalLinearInterpolate(const V1, V2: TCPVect;$/;"	f
SphericalLinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^    function SphericalLinearInterpolate(const Target: TCPVect;$/;"	f
SphericalLinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^    class function SphericalLinearInterpolateConst(const V1, V2: TCPVect;$/;"	f
SphericalLinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^    function SphericalLinearInterpolateConst(const Target: TCPVect;$/;"	f
SquaredDistance	Engines/MondoZenGL/MondoZenGL.pas	/^    class function SquaredDistance(const X1, Y1, X2, Y2: Single): Single; static;$/;"	f
SquaredDistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^    function SquaredDistanceTo(const Other: TMZPoint): Single; overload;$/;"	f
SquaredDistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^    function SquaredDistanceTo(const X, Y: Single): Single; overload;$/;"	f
Src	Engines/ZenGL/src/zgl_textures_png.pas	/^    CopyP        : procedure( Src, Dest : PByte; Width : Integer );$/;"	p
StartTag	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure StartTag(const TagName: UTF8String);$/;"	p
Startup	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Startup; virtual;$/;"	p
Stat	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Stat(out statstg: TStatStg; grfStatFlag: Longint): HResult;$/;"	f
Step	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure Step(const DT: TCPFloat); inline;$/;"	p
Stop	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Stop(const Channel: Integer = MZ_SOUND_ALL_SOURCES);$/;"	p
Stop	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Stop;$/;"	p
Stop	Engines/ZenGL/src/zgl_sound.pas	/^  procedure Stop( Sound : zglPSound; ID : Integer );$/;"	p
Stop	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Stop: HResult; stdcall;$/;"	f
StopAll	Engines/MondoZenGL/MondoZenGL.pas	/^    class procedure StopAll(const LoopedOnly: Boolean = False); static;$/;"	p
StrToBool	Engines/MondoZenGL/MondoZenGL.pas	/^    class function StrToBool(const Value: UTF8String): Boolean; static;$/;"	f
StrToFloat	Engines/MondoZenGL/MondoZenGL.pas	/^    class function StrToFloat(const Value: UTF8String): Single; static;$/;"	f
StrToInt	Engines/MondoZenGL/MondoZenGL.pas	/^    class function StrToInt(const Value: UTF8String): Integer; static;$/;"	f
SysActivate	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysActivate(Activate: Boolean);$/;"	p
SysChangeOrientation	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SysChangeOrientation(const Orientation: TMZInterfaceOrientation); virtual;$/;"	p
SysDraw	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysDraw;$/;"	p
SysExit	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysExit;$/;"	p
SysIOSChangeOrientation	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysIOSChangeOrientation(Orientation: UIInterfaceOrientation);$/;"	p
SysIOSMemoryWarning	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysIOSMemoryWarning;$/;"	p
SysKeyChar	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysKeyChar(Symbol: String);$/;"	p
SysKeyPress	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysKeyPress(KeyCode: Byte);$/;"	p
SysKeyRelease	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysKeyRelease(KeyCode: Byte);$/;"	p
SysLoad	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysLoad;$/;"	p
SysLowMemoryWarning	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure SysLowMemoryWarning; virtual;$/;"	p
SysMouseMove	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysMouseMove(X, Y: Integer);$/;"	p
SysMousePress	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysMousePress(Button: Byte);$/;"	p
SysMouseRelease	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysMouseRelease(Button: Byte);$/;"	p
SysMouseWheel	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysMouseWheel(Axis: Byte);$/;"	p
SysTouchMove	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysTouchMove(Finger: Byte; X, Y: Integer);$/;"	p
SysTouchPress	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysTouchPress(Finger: Byte);$/;"	p
SysTouchRelease	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysTouchRelease(Finger: Byte);$/;"	p
SysUpdate	Engines/MondoZenGL/MondoZenGL.pas	/^procedure SysUpdate(DT: Double);$/;"	p
TCPArbiter.GetContactPoint	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPArbiter.GetContactPoint(const Index: Integer): PCPContact;$/;"	f
TCPArbiter.GetNormal	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPArbiter.GetNormal(const I: Integer): TCPVect;$/;"	f
TCPArbiter.GetPoint	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPArbiter.GetPoint(const I: Integer): TCPVect;$/;"	f
TCPArbiter.GetShapes	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPArbiter.GetShapes(out A, B: TCPShape);$/;"	p
TCPArbiter.Ignore	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPArbiter.Ignore;$/;"	p
TCPArbiter.IsFirstContact	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPArbiter.IsFirstContact: Boolean;$/;"	f
TCPArbiter.TotalImpulse	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPArbiter.TotalImpulse: TCPVect;$/;"	f
TCPArbiter.TotalImpulseWithFriction	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPArbiter.TotalImpulseWithFriction: TCPVect;$/;"	f
TCPBB.ClampVect	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.ClampVect(const BB: TCPBB; const V: TCPVect): TCPVect;$/;"	f
TCPBB.ClampVect	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.ClampVect(const V: TCPVect): TCPVect;$/;"	f
TCPBB.Contains	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.Contains(const BB, Other: TCPBB): TCPBool;$/;"	f
TCPBB.Contains	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.Contains(const BB: TCPBB; const V: TCPVect): TCPBool;$/;"	f
TCPBB.Contains	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.Contains(const Other: TCPBB): TCPBool;$/;"	f
TCPBB.Contains	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.Contains(const V: TCPVect): TCPBool;$/;"	f
TCPBB.Create	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.Create(const L, B, R, T: TCPFloat): TCPBB;$/;"	f
TCPBB.Expand	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.Expand(const BB: TCPBB; const V: TCPVect): TCPBB;$/;"	f
TCPBB.Expand	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.Expand(const V: TCPVect): TCPBB;$/;"	f
TCPBB.GetHeight	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.GetHeight: TCPFloat;$/;"	f
TCPBB.GetWidth	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.GetWidth: TCPFloat;$/;"	f
TCPBB.Intersects	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.Intersects(const A, B: TCPBB): TCPBool;$/;"	f
TCPBB.Intersects	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.Intersects(const Other: TCPBB): TCPBool;$/;"	f
TCPBB.Merge	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.Merge(const A, B: TCPBB): TCPBB;$/;"	f
TCPBB.Merge	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.Merge(const Other: TCPBB): TCPBB;$/;"	f
TCPBB.WrapVect	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBB.WrapVect(const BB: TCPBB; const V: TCPVect): TCPVect;$/;"	f
TCPBB.WrapVect	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBB.WrapVect(const V: TCPVect): TCPVect;$/;"	f
TCPBody.Activate	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.Activate;$/;"	p
TCPBody.ApplyForce	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.ApplyForce(const Force, RelativeOffset: TCPVect);$/;"	p
TCPBody.ApplyImpulse	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.ApplyImpulse(const Impulse, RelativeOffset: TCPVect);$/;"	p
TCPBody.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPBody.Create(const Mass, Moment: TCPFloat);$/;"	p
TCPBody.CreateStatic	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPBody.CreateStatic(const Body: cpBody);$/;"	p
TCPBody.Destroy	Engines/MondoZenGL/mzChipmunk.pas	/^destructor TCPBody.Destroy;$/;"	p
TCPBody.GetAngle	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetAngle: TCPFloat;$/;"	f
TCPBody.GetForce	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetForce: TCPVect;$/;"	f
TCPBody.GetPosition	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetPosition: TCPVect;$/;"	f
TCPBody.GetRotation	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetRotation: TCPVect;$/;"	f
TCPBody.GetRotationalVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetRotationalVelocity: TCPFloat;$/;"	f
TCPBody.GetVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetVelocity: TCPVect;$/;"	f
TCPBody.GetVelocityBias	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.GetVelocityBias: TCPVect;$/;"	f
TCPBody.IsRogue	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.IsRogue: TCPBool;$/;"	f
TCPBody.IsSleeping	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.IsSleeping: TCPBool;$/;"	f
TCPBody.IsStatic	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.IsStatic: TCPBool;$/;"	f
TCPBody.LocalToWorld	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.LocalToWorld(const V: TCPVect): TCPVect;$/;"	f
TCPBody.MomentForBox	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBody.MomentForBox(const Mass, Width,$/;"	f
TCPBody.MomentForCircle	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBody.MomentForCircle(const Mass, R1, R2: TCPFloat;$/;"	f
TCPBody.MomentForPolygon	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBody.MomentForPolygon(const Mass: TCPFloat;$/;"	f
TCPBody.MomentForSegment	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPBody.MomentForSegment(const Mass: TCPFloat; const A,$/;"	f
TCPBody.ResetForces	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.ResetForces;$/;"	p
TCPBody.SetAngle	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetAngle(const Value: TCPFloat);$/;"	p
TCPBody.SetForce	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetForce(const Value: TCPVect);$/;"	p
TCPBody.SetMass	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetMass(const Value: TCPFloat);$/;"	p
TCPBody.SetMoment	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetMoment(const Value: TCPFloat);$/;"	p
TCPBody.SetOnUpdatePosition	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetOnUpdatePosition(const Value: TCPBodyPositionEvent);$/;"	p
TCPBody.SetOnUpdateVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetOnUpdateVelocity(const Value: TCPBodyVelocityEvent);$/;"	p
TCPBody.SetPosition	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetPosition(const Value: TCPVect);$/;"	p
TCPBody.SetRotationalVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetRotationalVelocity(const Value: TCPFloat);$/;"	p
TCPBody.SetVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetVelocity(const Value: TCPVect);$/;"	p
TCPBody.SetVelocityBias	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.SetVelocityBias(const Value: TCPVect);$/;"	p
TCPBody.Sleep	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.Sleep;$/;"	p
TCPBody.Slew	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.Slew(const Pos: TCPVect; const DT: TCPFloat);$/;"	p
TCPBody.UpdatePosition	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.UpdatePosition(const DT: TCPFloat);$/;"	p
TCPBody.UpdateVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPBody.UpdateVelocity(const Gravity: TCPVect; const Damping,$/;"	p
TCPBody.WorldToLocal	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPBody.WorldToLocal(const V: TCPVect): TCPVect;$/;"	f
TCPChipmunk.Finalize	Engines/MondoZenGL/mzChipmunk.pas	/^class procedure TCPChipmunk.Finalize;$/;"	p
TCPChipmunk.Initialize	Engines/MondoZenGL/mzChipmunk.pas	/^class procedure TCPChipmunk.Initialize;$/;"	p
TCPCircleShape.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPCircleShape.Create(const Body: TCPBody; const Radius: TCPFloat;$/;"	p
TCPCircleShape.ShapeType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPCircleShape.ShapeType: TCPShapeType;$/;"	f
TCPCircleShape.UnsafeSetRadius	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPCircleShape.UnsafeSetRadius(const Radius: TCPFloat);$/;"	p
TCPConstraint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPConstraint.Create(const A, B: TCPBody);$/;"	p
TCPConstraint.Destroy	Engines/MondoZenGL/mzChipmunk.pas	/^destructor TCPConstraint.Destroy;$/;"	p
TCPContact.GetNormal	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPContact.GetNormal: TCPVect;$/;"	f
TCPContact.GetPoint	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPContact.GetPoint: TCPVect;$/;"	f
TCPContact.SetNormal	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPContact.SetNormal(const Value: TCPVect);$/;"	p
TCPContact.SetPoint	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPContact.SetPoint(const Value: TCPVect);$/;"	p
TCPDampedRotarySpring.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPDampedRotarySpring.ConstraintType: TCPConstraintType;$/;"	f
TCPDampedRotarySpring.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPDampedRotarySpring.Create(const A, B: TCPBody; const RestAngle,$/;"	p
TCPDampedRotarySpring.GetRestAngle	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPDampedRotarySpring.GetRestAngle: TCPFloat;$/;"	f
TCPDampedRotarySpring.SetRestAngle	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPDampedRotarySpring.SetRestAngle(const Value: TCPFloat);$/;"	p
TCPDampedSpring.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPDampedSpring.ConstraintType: TCPConstraintType;$/;"	f
TCPDampedSpring.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPDampedSpring.Create(const A, B: TCPBody; const Anchor1,$/;"	p
TCPDampedSpring.SetOnForce	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPDampedSpring.SetOnForce(const Value: TCPDampedSpringForceEvent);$/;"	p
TCPGearJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPGearJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPGearJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPGearJoint.Create(const A, B: TCPBody; const Phase,$/;"	p
TCPGrooveJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPGrooveJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPGrooveJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPGrooveJoint.Create(const A, B: TCPBody; const GrooveA, GrooveB,$/;"	p
TCPGrooveJoint.SetGrooveA	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPGrooveJoint.SetGrooveA(const Value: TCPVect);$/;"	p
TCPGrooveJoint.SetGrooveB	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPGrooveJoint.SetGrooveB(const Value: TCPVect);$/;"	p
TCPMath.Max	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPMath.Max(const A, B: TCPFloat): TCPFloat;$/;"	f
TCPMath.Min	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPMath.Min(const A, B: TCPFloat): TCPFloat;$/;"	f
TCPPinJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPPinJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPPinJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPPinJoint.Create(const A, B: TCPBody; const Anchor1,$/;"	p
TCPPivotJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPPivotJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPPivotJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPPivotJoint.Create(const A, B: TCPBody; const Anchor1,$/;"	p
TCPPivotJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPPivotJoint.Create(const A, B: TCPBody; const Pivot: TCPVect);$/;"	p
TCPPolyShape.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPPolyShape.Create(const Body: TCPBody;$/;"	p
TCPPolyShape.CreateBox	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPPolyShape.CreateBox(const Body: TCPBody; const Width,$/;"	p
TCPPolyShape.GetFirstTV	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPPolyShape.GetFirstTV: PCPVect;$/;"	f
TCPPolyShape.GetFirstVertex	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPPolyShape.GetFirstVertex: PCPVect;$/;"	f
TCPPolyShape.GetTV	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPPolyShape.GetTV(const Index: Integer): TCPVect;$/;"	f
TCPPolyShape.GetVertex	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPPolyShape.GetVertex(const Index: Integer): TCPVect;$/;"	f
TCPPolyShape.GetVertexCount	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPPolyShape.GetVertexCount: Integer;$/;"	f
TCPPolyShape.ShapeType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPPolyShape.ShapeType: TCPShapeType;$/;"	f
TCPRatchetJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPRatchetJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPRatchetJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPRatchetJoint.Create(const A, B: TCPBody; const Phase,$/;"	p
TCPRatchetJoint.GetAngle	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPRatchetJoint.GetAngle: TCPFloat;$/;"	f
TCPRotaryLimitJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPRotaryLimitJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPRotaryLimitJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPRotaryLimitJoint.Create(const A, B: TCPBody; const Min,$/;"	p
TCPRotaryLimitJoint.GetMax	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPRotaryLimitJoint.GetMax: TCPFloat;$/;"	f
TCPRotaryLimitJoint.GetMin	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPRotaryLimitJoint.GetMin: TCPFloat;$/;"	f
TCPRotaryLimitJoint.SetMax	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPRotaryLimitJoint.SetMax(const Value: TCPFloat);$/;"	p
TCPRotaryLimitJoint.SetMin	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPRotaryLimitJoint.SetMin(const Value: TCPFloat);$/;"	p
TCPSegmentQueryInfo.HitDist	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSegmentQueryInfo.HitDist(const A, B: TCPVect): TCPFloat;$/;"	f
TCPSegmentQueryInfo.HitPoint	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSegmentQueryInfo.HitPoint(const A, B: TCPVect): TCPVect;$/;"	f
TCPSegmentShape.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPSegmentShape.Create(const Body: TCPBody; const V1, V2: TCPVect;$/;"	p
TCPSegmentShape.ShapeType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPSegmentShape.ShapeType: TCPShapeType;$/;"	f
TCPSegmentShape.UnsafeSetEndPoints	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSegmentShape.UnsafeSetEndPoints(const A, B: TCPVect);$/;"	p
TCPShape.CacheBoundingBox	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPShape.CacheBoundingBox: TCPBB;$/;"	f
TCPShape.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPShape.Create(const Body: TCPBody);$/;"	p
TCPShape.Destroy	Engines/MondoZenGL/mzChipmunk.pas	/^destructor TCPShape.Destroy;$/;"	p
TCPShape.GetBoundingBox	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPShape.GetBoundingBox: TCPBB;$/;"	f
TCPShape.GetSurfaceVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPShape.GetSurfaceVelocity: TCPVect;$/;"	f
TCPShape.PointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPShape.PointQuery(const P: TCPVect): TCPBool;$/;"	f
TCPShape.ResetIdCounter	Engines/MondoZenGL/mzChipmunk.pas	/^class procedure TCPShape.ResetIdCounter;$/;"	p
TCPShape.SegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPShape.SegmentQuery(const A, B: TCPVect;$/;"	f
TCPShape.SetSurfaceVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPShape.SetSurfaceVelocity(const Value: TCPVect);$/;"	p
TCPSimpleMotor.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPSimpleMotor.ConstraintType: TCPConstraintType;$/;"	f
TCPSimpleMotor.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPSimpleMotor.Create(const A, B: TCPBody; const Rate: TCPFloat);$/;"	p
TCPSimpleMotor.GetRate	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSimpleMotor.GetRate: TCPFloat;$/;"	f
TCPSimpleMotor.SetRate	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSimpleMotor.SetRate(const Value: TCPFloat);$/;"	p
TCPSlideJoint.ConstraintType	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPSlideJoint.ConstraintType: TCPConstraintType;$/;"	f
TCPSlideJoint.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPSlideJoint.Create(const A, B: TCPBody; const Anchor1,$/;"	p
TCPSpace.AddBody	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.AddBody(const Body: TCPBody): TCPBody;$/;"	f
TCPSpace.AddCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.AddCollisionHandler(const A, B: TCPCollisionType;$/;"	p
TCPSpace.AddConstraint	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.AddConstraint(const Constraint: TCPConstraint): TCPConstraint;$/;"	f
TCPSpace.AddPostStepCallback	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.AddPostStepCallback(const OnPostStep: TCPPostStepEvent;$/;"	p
TCPSpace.AddShape	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.AddShape(const Shape: TCPShape): TCPShape;$/;"	f
TCPSpace.AddStaticShape	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.AddStaticShape(const Shape: TCPShape): TCPShape;$/;"	f
TCPSpace.Create	Engines/MondoZenGL/mzChipmunk.pas	/^constructor TCPSpace.Create;$/;"	p
TCPSpace.Destroy	Engines/MondoZenGL/mzChipmunk.pas	/^destructor TCPSpace.Destroy;$/;"	p
TCPSpace.ForEachArbiter	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.ForEachArbiter(const OnArbiter: TCPForEachArbiterEvent;$/;"	p
TCPSpace.ForEachBody	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.ForEachBody(const OnBody: TCPForEachBodyEvent;$/;"	p
TCPSpace.ForEachShape	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.ForEachShape(const OnShape: TCPForEachShapeEvent;$/;"	p
TCPSpace.ForEachStaticShape	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.ForEachStaticShape(const OnShape: TCPForEachShapeEvent;$/;"	p
TCPSpace.GetArbiter	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetArbiter(const Index: Integer): PCPArbiter;$/;"	f
TCPSpace.GetArbiterCount	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetArbiterCount: Integer;$/;"	f
TCPSpace.GetBody	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetBody(const Index: Integer): TCPBody;$/;"	f
TCPSpace.GetBodyCount	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetBodyCount: Integer;$/;"	f
TCPSpace.GetConstraint	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetConstraint(const Index: Integer): TCPConstraint;$/;"	f
TCPSpace.GetConstraintCount	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetConstraintCount: Integer;$/;"	f
TCPSpace.GetGravity	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.GetGravity: TCPVect;$/;"	f
TCPSpace.HashEach	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.HashEach(const Hash: PcpSpaceHash;$/;"	p
TCPSpace.InternalRemoveCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.InternalRemoveCollisionHandler(const A, B: TCPCollisionType);$/;"	p
TCPSpace.PointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.PointQuery(const P: TCPVect; const Layers: TCPLayers;$/;"	f
TCPSpace.PointQuery	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.PointQuery(const P: TCPVect; const Layers: TCPLayers;$/;"	p
TCPSpace.RehashStatic	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.RehashStatic;$/;"	p
TCPSpace.RemoveBody	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.RemoveBody(const Body: TCPBody);$/;"	p
TCPSpace.RemoveCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.RemoveCollisionHandler(const A, B: TCPCollisionType);$/;"	p
TCPSpace.RemoveConstraint	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.RemoveConstraint(const Constraint: TCPConstraint);$/;"	p
TCPSpace.RemoveShape	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.RemoveShape(const Shape: TCPShape);$/;"	p
TCPSpace.RemoveStaticShape	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.RemoveStaticShape(const Shape: TCPShape);$/;"	p
TCPSpace.ResizeActiveHash	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.ResizeActiveHash(const Dim: TCPFloat; const Count: Integer);$/;"	p
TCPSpace.ResizeStaticHash	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.ResizeStaticHash(const Dim: TCPFloat; const Count: Integer);$/;"	p
TCPSpace.SegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPSpace.SegmentQuery(const A, B: TCPVect; const Layers: TCPLayers;$/;"	f
TCPSpace.SegmentQuery	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.SegmentQuery(const A, B: TCPVect; const Layers: TCPLayers;$/;"	p
TCPSpace.SetDefaultCollisionHandler	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.SetDefaultCollisionHandler($/;"	p
TCPSpace.SetGravity	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.SetGravity(const Value: TCPVect);$/;"	p
TCPSpace.Step	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TCPSpace.Step(const DT: TCPFloat);$/;"	p
TCPVect.Clamp	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Clamp(const V: TCPVect; const Len: TCPFloat): TCPVect;$/;"	f
TCPVect.Clamp	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Clamp(const Len: TCPFloat): TCPVect;$/;"	f
TCPVect.Create	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Create(const X, Y: TCPFloat): TCPVect;$/;"	f
TCPVect.Create	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Create: TCPVect;$/;"	f
TCPVect.CrossProduct	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.CrossProduct(const V1, V2: TCPVect): TCPFloat;$/;"	f
TCPVect.CrossProduct	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.CrossProduct(const Other: TCPVect): TCPFloat;$/;"	f
TCPVect.Distance	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Distance(const V1, V2: TCPVect): TCPFloat;$/;"	f
TCPVect.Distance	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Distance(const Other: TCPVect): TCPFloat;$/;"	f
TCPVect.DistanceSq	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.DistanceSq(const V1, V2: TCPVect): TCPFloat;$/;"	f
TCPVect.DistanceSq	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.DistanceSq(const Other: TCPVect): TCPFloat;$/;"	f
TCPVect.DotProduct	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.DotProduct(const V1, V2: TCPVect): TCPFloat;$/;"	f
TCPVect.DotProduct	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.DotProduct(const Other: TCPVect): TCPFloat;$/;"	f
TCPVect.Equals	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Equals(const Other: TCPVect): Boolean;$/;"	f
TCPVect.ForAngle	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.ForAngle(const Angle: TCPFloat): TCPVect;$/;"	f
TCPVect.Length	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Length(const V: TCPVect): TCPFloat;$/;"	f
TCPVect.Length	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Length: TCPFloat;$/;"	f
TCPVect.LengthSq	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.LengthSq(const V: TCPVect): TCPFloat;$/;"	f
TCPVect.LengthSq	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.LengthSq: TCPFloat;$/;"	f
TCPVect.LinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.LinearInterpolate(const V1, V2: TCPVect;$/;"	f
TCPVect.LinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.LinearInterpolate(const Target: TCPVect;$/;"	f
TCPVect.LinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.LinearInterpolateConst(const V1, V2: TCPVect;$/;"	f
TCPVect.LinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.LinearInterpolateConst(const Target: TCPVect;$/;"	f
TCPVect.Near	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Near(const V1, V2: TCPVect;$/;"	f
TCPVect.Near	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Near(const Other: TCPVect; const Dist: TCPFloat): TCPBool;$/;"	f
TCPVect.Normalize	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Normalize(const V: TCPVect): TCPVect;$/;"	f
TCPVect.Normalize	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Normalize: TCPVect;$/;"	f
TCPVect.NormalizeSafe	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.NormalizeSafe(const V: TCPVect): TCPVect;$/;"	f
TCPVect.NormalizeSafe	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.NormalizeSafe: TCPVect;$/;"	f
TCPVect.Perp	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Perp(const V: TCPVect): TCPVect;$/;"	f
TCPVect.Perp	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Perp: TCPVect;$/;"	f
TCPVect.Project	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Project(const V1, V2: TCPVect): TCPVect;$/;"	f
TCPVect.Project	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Project(const Target: TCPVect): TCPVect;$/;"	f
TCPVect.RPerp	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.RPerp(const V: TCPVect): TCPVect;$/;"	f
TCPVect.RPerp	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.RPerp: TCPVect;$/;"	f
TCPVect.Rotate	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Rotate(const V1, V2: TCPVect): TCPVect;$/;"	f
TCPVect.Rotate	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Rotate(const Other: TCPVect): TCPVect;$/;"	f
TCPVect.SphericalLinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.SphericalLinearInterpolate(const V1, V2: TCPVect;$/;"	f
TCPVect.SphericalLinearInterpolate	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.SphericalLinearInterpolate(const Target: TCPVect;$/;"	f
TCPVect.SphericalLinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.SphericalLinearInterpolateConst(const V1, V2: TCPVect;$/;"	f
TCPVect.SphericalLinearInterpolateConst	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.SphericalLinearInterpolateConst(const Target: TCPVect;$/;"	f
TCPVect.ToAngle	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.ToAngle(const V: TCPVect): TCPFloat;$/;"	f
TCPVect.ToAngle	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.ToAngle: TCPFloat;$/;"	f
TCPVect.ToString	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.ToString: String;$/;"	f
TCPVect.Unrotate	Engines/MondoZenGL/mzChipmunk.pas	/^class function TCPVect.Unrotate(const V1, V2: TCPVect): TCPVect;$/;"	f
TCPVect.Unrotate	Engines/MondoZenGL/mzChipmunk.pas	/^function TCPVect.Unrotate(const Other: TCPVect): TCPVect;$/;"	f
TDefaultCollisionHandler.AlwaysCollide	Engines/MondoZenGL/mzChipmunk.pas	/^function TDefaultCollisionHandler.AlwaysCollide(const Space: TCPSpace;$/;"	f
TDefaultCollisionHandler.Nothing	Engines/MondoZenGL/mzChipmunk.pas	/^procedure TDefaultCollisionHandler.Nothing(const Space: TCPSpace;$/;"	p
TMZApplication.Activate	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Activate;$/;"	p
TMZApplication.ClassCreate	Engines/MondoZenGL/MondoZenGL.pas	/^class constructor TMZApplication.ClassCreate;$/;"	p
TMZApplication.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZApplication.Create;$/;"	p
TMZApplication.Deactivate	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Deactivate;$/;"	p
TMZApplication.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZApplication.Destroy;$/;"	p
TMZApplication.GetCurrentRenderFrameRate	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZApplication.GetCurrentRenderFrameRate: Integer;$/;"	f
TMZApplication.GetCurrentVideoRamUsage	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZApplication.GetCurrentVideoRamUsage: Integer;$/;"	f
TMZApplication.GetOpenGLContext	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZApplication.GetOpenGLContext: THandle;$/;"	f
TMZApplication.GetViewportBounds	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZApplication.GetViewportBounds: TMZRect;$/;"	f
TMZApplication.GetWindowBounds	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZApplication.GetWindowBounds: TMZRect;$/;"	f
TMZApplication.GetWindowHandle	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZApplication.GetWindowHandle: THandle;$/;"	f
TMZApplication.Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Initialize;$/;"	p
TMZApplication.KeyChar	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.KeyChar(const Symbol: String);$/;"	p
TMZApplication.KeyDown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.KeyDown(const KeyCode: TMZKeyCode);$/;"	p
TMZApplication.KeyUp	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.KeyUp(const KeyCode: TMZKeyCode);$/;"	p
TMZApplication.MouseDown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.MouseDown(const Button: TMZMouseButton);$/;"	p
TMZApplication.MouseMove	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.MouseMove(const X, Y: Integer);$/;"	p
TMZApplication.MouseUp	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.MouseUp(const Button: TMZMouseButton);$/;"	p
TMZApplication.MouseWheel	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.MouseWheel(const Up: Boolean);$/;"	p
TMZApplication.Quit	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Quit;$/;"	p
TMZApplication.RenderFrame	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.RenderFrame;$/;"	p
TMZApplication.SetCaption	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.SetCaption(const Value: UTF8String);$/;"	p
TMZApplication.SetOptions	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.SetOptions(const Value: TMZApplicationOptions);$/;"	p
TMZApplication.SetScene	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.SetScene(const Scene: TMZScene);$/;"	p
TMZApplication.SetWindowBounds	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZApplication.SetWindowBounds(const Value: TMZRect);$/;"	p
TMZApplication.Shutdown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Shutdown;$/;"	p
TMZApplication.Startup	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Startup;$/;"	p
TMZApplication.SysChangeOrientation	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.SysChangeOrientation($/;"	p
TMZApplication.SysLowMemoryWarning	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.SysLowMemoryWarning;$/;"	p
TMZApplication.TouchDown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.TouchDown(const Finger: Integer);$/;"	p
TMZApplication.TouchMove	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.TouchMove(const Finger, X, Y: Integer);$/;"	p
TMZApplication.TouchUp	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.TouchUp(const Finger: Integer);$/;"	p
TMZApplication.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZApplication.Update(const DeltaTimeMs: Double);$/;"	p
TMZCamera.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZCamera.Create;$/;"	p
TMZCamera.CreateFromHandle	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZCamera.CreateFromHandle(const Handle: zglPCamera2D);$/;"	p
TMZCamera.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZCamera.Destroy;$/;"	p
TMZCamera.GetCenter	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetCenter: TMZPoint;$/;"	f
TMZCamera.GetCenterX	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetCenterX: Single;$/;"	f
TMZCamera.GetCenterY	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetCenterY: Single;$/;"	f
TMZCamera.GetRotationAngle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetRotationAngle: Single;$/;"	f
TMZCamera.GetXOffset	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetXOffset: Single;$/;"	f
TMZCamera.GetYSOffset	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetYSOffset: Single;$/;"	f
TMZCamera.GetZoomX	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetZoomX: Single;$/;"	f
TMZCamera.GetZoomY	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCamera.GetZoomY: Single;$/;"	f
TMZCamera.Reset	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.Reset;$/;"	p
TMZCamera.SetCenter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetCenter(const Value: TMZPoint);$/;"	p
TMZCamera.SetCenterX	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetCenterX(const Value: Single);$/;"	p
TMZCamera.SetCenterY	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetCenterY(const Value: Single);$/;"	p
TMZCamera.SetRotationAngle	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetRotationAngle(const Value: Single);$/;"	p
TMZCamera.SetXOffset	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetXOffset(const Value: Single);$/;"	p
TMZCamera.SetYOffset	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetYOffset(const Value: Single);$/;"	p
TMZCamera.SetZoomX	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetZoomX(const Value: Single);$/;"	p
TMZCamera.SetZoomY	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZCamera.SetZoomY(const Value: Single);$/;"	p
TMZCanvas.BeginBatch	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.BeginBatch;$/;"	p
TMZCanvas.CalculateTextHeight	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCanvas.CalculateTextHeight(const Font: TMZFont;$/;"	f
TMZCanvas.CalculateTextWidth	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCanvas.CalculateTextWidth(const Font: TMZFont;$/;"	f
TMZCanvas.ClassCreate	Engines/MondoZenGL/MondoZenGL.pas	/^class constructor TMZCanvas.ClassCreate;$/;"	p
TMZCanvas.Clear	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.Clear;$/;"	p
TMZCanvas.DisableOption	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DisableOption(const Option: TMZCanvasOption);$/;"	p
TMZCanvas.DrawCircle	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawCircle(const Center: TMZPoint;$/;"	p
TMZCanvas.DrawCircle	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawCircle(const X, Y, Radius: Single;$/;"	p
TMZCanvas.DrawEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawEllipse(const Center: TMZPoint; const XRadius,$/;"	p
TMZCanvas.DrawEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawEllipse(const X, Y, XRadius, YRadius: Single;$/;"	p
TMZCanvas.DrawLine	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawLine(const StartPoint, EndPoint: TMZPoint;$/;"	p
TMZCanvas.DrawLine	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawLine(const X1, Y1, X2, Y2: Single;$/;"	p
TMZCanvas.DrawPixel	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawPixel(const Point: TMZPoint;$/;"	p
TMZCanvas.DrawPixel	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawPixel(const X, Y: Single; const Color: Cardinal;$/;"	p
TMZCanvas.DrawPolygon	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawPolygon(const Points: PMZPoint;$/;"	p
TMZCanvas.DrawPolygon	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawPolygon(const Points: array of TMZPoint;$/;"	p
TMZCanvas.DrawRect	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawRect(const Rect: TMZRect; const Color: Cardinal;$/;"	p
TMZCanvas.DrawRect	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawRect(const X, Y, W, H: Single;$/;"	p
TMZCanvas.DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawSprite(const Texture: TMZTexture; const DX, DY,$/;"	p
TMZCanvas.DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawSprite(const Texture: TMZTexture; const SR,$/;"	p
TMZCanvas.DrawSprite	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawSprite(const Texture: TMZTexture;$/;"	p
TMZCanvas.DrawSpriteFrame	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawSpriteFrame(const Texture: TMZTexture;$/;"	p
TMZCanvas.DrawSpriteTiles	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawSpriteTiles(const Texture: TMZTexture;$/;"	p
TMZCanvas.DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawText(const Font: TMZFont; const Point: TMZPoint;$/;"	p
TMZCanvas.DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawText(const Font: TMZFont; const Rect: TMZRect;$/;"	p
TMZCanvas.DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawText(const Font: TMZFont; const X, Y, Scale,$/;"	p
TMZCanvas.DrawText	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawText(const Font: TMZFont; const X, Y: Single;$/;"	p
TMZCanvas.DrawTexture	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawTexture(const Texture: TMZTexture; const TL, TR,$/;"	p
TMZCanvas.DrawTexture	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawTexture(const Texture: TMZTexture;$/;"	p
TMZCanvas.DrawTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawTriangleList($/;"	p
TMZCanvas.DrawTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.DrawTriangleList(const Triangles: PMZTriangle;$/;"	p
TMZCanvas.EnableOption	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.EnableOption(const Option: TMZCanvasOption);$/;"	p
TMZCanvas.EndBatch	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.EndBatch;$/;"	p
TMZCanvas.FillCircle	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillCircle(const Center: TMZPoint;$/;"	p
TMZCanvas.FillCircle	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillCircle(const X, Y, Radius: Single;$/;"	p
TMZCanvas.FillEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillEllipse(const Center: TMZPoint; const XRadius,$/;"	p
TMZCanvas.FillEllipse	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillEllipse(const X, Y, XRadius, YRadius: Single;$/;"	p
TMZCanvas.FillRect	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillRect(const Rect: TMZRect; const Color: Cardinal;$/;"	p
TMZCanvas.FillRect	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillRect(const X, Y, W, H: Single;$/;"	p
TMZCanvas.FillTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillTriangleList($/;"	p
TMZCanvas.FillTriangleList	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FillTriangleList(const Triangles: PMZTriangle;$/;"	p
TMZCanvas.Flush	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.Flush;$/;"	p
TMZCanvas.FlushBatch	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.FlushBatch;$/;"	p
TMZCanvas.GetAntiAlias	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCanvas.GetAntiAlias: Boolean;$/;"	f
TMZCanvas.ReadPixels	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCanvas.ReadPixels(const Bounds: TMZRect): Pointer;$/;"	f
TMZCanvas.ReadPixels	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCanvas.ReadPixels(const X, Y, W, H: Integer): Pointer;$/;"	f
TMZCanvas.SetAntiAlias	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetAntiAlias(const Value: Boolean);$/;"	p
TMZCanvas.SetBlendMode	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetBlendMode(const Value: TMZBlendMode);$/;"	p
TMZCanvas.SetCamera	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetCamera(const Value: TMZCamera);$/;"	p
TMZCanvas.SetColorMask	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetColorMask(const R, G, B, A: Boolean);$/;"	p
TMZCanvas.SetColorMode	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetColorMode(const Value: TMZColorMode);$/;"	p
TMZCanvas.SetPerVertexColors	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetPerVertexColors(const C1, C2, C3, C4: Cardinal;$/;"	p
TMZCanvas.SetPerVertexColors	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetPerVertexColors(const C1, C2: Cardinal; const A1,$/;"	p
TMZCanvas.SetPivotPoint	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetPivotPoint(const Pivot: TMZPoint);$/;"	p
TMZCanvas.SetPivotPoint	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetPivotPoint(const X, Y: Single);$/;"	p
TMZCanvas.SetRenderTarget	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetRenderTarget(const Value: TMZRenderTarget);$/;"	p
TMZCanvas.SetScale	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetScale(const Scale: Single);$/;"	p
TMZCanvas.SetScale	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetScale(const ScaleX, ScaleY: Single);$/;"	p
TMZCanvas.SetScaleX	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetScaleX(const Value: Single);$/;"	p
TMZCanvas.SetScaleY	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetScaleY(const Value: Single);$/;"	p
TMZCanvas.SetSeparateAlpha	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetSeparateAlpha(const Value: Boolean);$/;"	p
TMZCanvas.SetTextureColor	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetTextureColor(const Value: Cardinal);$/;"	p
TMZCanvas.SetVertexOffsets	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetVertexOffsets(const P1, P2, P3, P4: TMZPoint);$/;"	p
TMZCanvas.SetVertexOffsets	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZCanvas.SetVertexOffsets(const X1, Y1, X2, Y2, X3, Y3, X4,$/;"	p
TMZCircle.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCircle.Create(const Center: TMZPoint;$/;"	f
TMZCircle.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCircle.Create(const X, Y, Radius: Single): TMZCircle;$/;"	f
TMZCircle.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZCircle.Create: TMZCircle;$/;"	f
TMZCircle.Equals	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCircle.Equals(const Other: TMZCircle): Boolean;$/;"	f
TMZCircle.InsideCircle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCircle.InsideCircle(const OuterCircle: TMZCircle): Boolean;$/;"	f
TMZCircle.InsideRectangle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCircle.InsideRectangle(const X, Y, W, H: Single): Boolean;$/;"	f
TMZCircle.IntersectsCircle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZCircle.IntersectsCircle(const Other: TMZCircle): Boolean;$/;"	f
TMZDistortionMesh.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZDistortionMesh.Create(const RowCount, ColumnCount: Integer);$/;"	p
TMZDistortionMesh.GetVertex	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZDistortionMesh.GetVertex(const Row, Column: Integer): TMZPoint;$/;"	f
TMZDistortionMesh.Render	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZDistortionMesh.Render(const Texture: TMZTexture; const SR: TMZRect;$/;"	p
TMZDistortionMesh.Render	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZDistortionMesh.Render(const Texture: TMZTexture; const XOffset,$/;"	p
TMZDistortionMesh.Render	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZDistortionMesh.Render(const Texture: TMZTexture;$/;"	p
TMZDistortionMesh.SetVertex	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZDistortionMesh.SetVertex(const Row, Column: Integer;$/;"	p
TMZFile.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZFile.Create(const Filename: UTF8String; const OpenMode: TMZFileOpenMode);$/;"	p
TMZFile.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZFile.Destroy;$/;"	p
TMZFile.Flush	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZFile.Flush;$/;"	p
TMZFile.GetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZFile.GetPosition: Integer;$/;"	f
TMZFile.GetSize	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZFile.GetSize: Integer;$/;"	f
TMZFile.Read	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZFile.Read(var Buffer; const Count: Integer): Integer;$/;"	f
TMZFile.Seek	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZFile.Seek(const Offset: Integer;$/;"	f
TMZFile.SetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZFile.SetPosition(const Value: Integer);$/;"	p
TMZFile.Write	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZFile.Write(const Buffer; const Count: Integer): Integer;$/;"	f
TMZFileSystem.CreateDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.CreateDirectory(const DirectoryName: UTF8String): Boolean;$/;"	f
TMZFileSystem.DeleteFile	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.DeleteFile(const Filename: UTF8String): Boolean;$/;"	f
TMZFileSystem.FileExists	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.FileExists(const Filename: UTF8String): Boolean;$/;"	f
TMZFileSystem.Find	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.Find(const DirectoryName: UTF8String;$/;"	f
TMZFileSystem.GetDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.GetDirectory(const Filename: UTF8String): UTF8String;$/;"	f
TMZFileSystem.GetExtension	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.GetExtension(const Filename: UTF8String): UTF8String;$/;"	f
TMZFileSystem.GetName	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZFileSystem.GetName(const Filename: UTF8String): UTF8String;$/;"	f
TMZFileSystem.SetPath	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZFileSystem.SetPath(const Path: UTF8String);$/;"	p
TMZFont.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZFont.Create(const Buffer: Pointer; const Size: Integer;$/;"	p
TMZFont.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZFont.Create(const Filename: UTF8String);$/;"	p
TMZFont.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZFont.Create(const Memory: TMZMemory);$/;"	p
TMZFont.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZFont.Create(const Stream: TStream);$/;"	p
TMZFont.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZFont.Destroy;$/;"	p
TMZFont.GetMaxHeight	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZFont.GetMaxHeight: Integer;$/;"	f
TMZIniFile.Add	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZIniFile.Add(const Section, Key: UTF8String);$/;"	p
TMZIniFile.Clear	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZIniFile.Clear(const Section: UTF8String);$/;"	p
TMZIniFile.Delete	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZIniFile.Delete(const Section, Key: UTF8String);$/;"	p
TMZIniFile.KeyExists	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.KeyExists(const Section, Key: UTF8String): Boolean;$/;"	f
TMZIniFile.Load	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.Load(const Filename: UTF8String): Boolean;$/;"	f
TMZIniFile.ReadBool	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.ReadBool(const Section, Key: UTF8String): Boolean;$/;"	f
TMZIniFile.ReadFloat	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.ReadFloat(const Section, Key: UTF8String): Single;$/;"	f
TMZIniFile.ReadInt	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.ReadInt(const Section, Key: UTF8String): Integer;$/;"	f
TMZIniFile.ReadString	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.ReadString(const Section, Key: UTF8String): UTF8String;$/;"	f
TMZIniFile.Save	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZIniFile.Save(const Filename: UTF8String);$/;"	p
TMZIniFile.SectionExists	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.SectionExists(const Section: UTF8String): Boolean;$/;"	f
TMZIniFile.WriteBool	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.WriteBool(const Section, Key: UTF8String;$/;"	f
TMZIniFile.WriteFloat	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.WriteFloat(const Section, Key: UTF8String;$/;"	f
TMZIniFile.WriteInt	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.WriteInt(const Section, Key: UTF8String;$/;"	f
TMZIniFile.WriteString	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZIniFile.WriteString(const Section, Key, Value: UTF8String): Boolean;$/;"	f
TMZJoystick.ClassCreate	Engines/MondoZenGL/MondoZenGL.pas	/^class constructor TMZJoystick.ClassCreate;$/;"	p
TMZJoystick.ClassDestroy	Engines/MondoZenGL/MondoZenGL.pas	/^class destructor TMZJoystick.ClassDestroy;$/;"	p
TMZJoystick.ClearState	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZJoystick.ClearState;$/;"	p
TMZJoystick.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZJoystick.Create(const ID: Byte; const Handle: zglPJoyInfo);$/;"	p
TMZJoystick.GetAxisCount	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.GetAxisCount: Integer;$/;"	f
TMZJoystick.GetAxisPos	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.GetAxisPos(const Axis: TMZJoystickAxis): Single;$/;"	f
TMZJoystick.GetButtonCount	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.GetButtonCount: Integer;$/;"	f
TMZJoystick.GetCaps	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.GetCaps: TMZJoystickCaps;$/;"	f
TMZJoystick.GetJoystick	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZJoystick.GetJoystick(const Index: Integer): TMZJoystick;$/;"	f
TMZJoystick.GetJoystickCount	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZJoystick.GetJoystickCount: Integer;$/;"	f
TMZJoystick.GetName	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.GetName: UTF8String;$/;"	f
TMZJoystick.GetNullJoystick	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZJoystick.GetNullJoystick: TMZJoystick;$/;"	f
TMZJoystick.Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZJoystick.Initialize;$/;"	p
TMZJoystick.IsButtonDown	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.IsButtonDown(const Index: Integer): Boolean;$/;"	f
TMZJoystick.IsButtonPressed	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.IsButtonPressed(const Index: Integer): Boolean;$/;"	f
TMZJoystick.IsButtonUp	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZJoystick.IsButtonUp(const Index: Integer): Boolean;$/;"	f
TMZKeyboard.BeginReadText	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZKeyboard.BeginReadText(const InitialText: UTF8String;$/;"	p
TMZKeyboard.ClearState	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZKeyboard.ClearState;$/;"	p
TMZKeyboard.EndReadText	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZKeyboard.EndReadText;$/;"	p
TMZKeyboard.GetText	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZKeyboard.GetText: UTF8String;$/;"	f
TMZKeyboard.IsKeyDown	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZKeyboard.IsKeyDown(const KeyCode: TMZKeyCode): Boolean;$/;"	f
TMZKeyboard.IsKeyPressed	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZKeyboard.IsKeyPressed(const KeyCode: TMZKeyCode): Boolean;$/;"	f
TMZKeyboard.IsKeyUp	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZKeyboard.IsKeyUp(const KeyCode: TMZKeyCode): Boolean;$/;"	f
TMZKeyboard.LastKeyState	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZKeyboard.LastKeyState($/;"	f
TMZLine.Angle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.Angle: Single;$/;"	f
TMZLine.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZLine.Create(const P0, P1: TMZPoint): TMZLine;$/;"	f
TMZLine.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZLine.Create(const X0, Y0, X1, Y1: Single): TMZLine;$/;"	f
TMZLine.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZLine.Create: TMZLine;$/;"	f
TMZLine.Equals	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.Equals(const Other: TMZLine): Boolean;$/;"	f
TMZLine.IntersectsCircle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.IntersectsCircle(const Circle: TMZCircle): Boolean;$/;"	f
TMZLine.IntersectsLine	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.IntersectsLine(const Other: TMZLine;$/;"	f
TMZLine.IntersectsRectangle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.IntersectsRectangle(const Rect: TMZRect): Boolean;$/;"	f
TMZLine.Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.Orientation(const P: TMZPoint): TMZOrientation;$/;"	f
TMZLine.Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZLine.Orientation(const X, Y: Single): TMZOrientation;$/;"	f
TMZLog.Log	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZLog.Log(const Msg: UTF8String; const Args: array of const;$/;"	p
TMZLog.Log	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZLog.Log(const Msg: UTF8String;$/;"	p
TMZMath.Angle	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMath.Angle(const X1, Y1, X2, Y2: Single): Single;$/;"	f
TMZMath.Cos	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMath.Cos(const Angle: Integer): Single;$/;"	f
TMZMath.Distance	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMath.Distance(const X1, Y1, X2, Y2: Single): Single;$/;"	f
TMZMath.Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZMath.Orientation(const X, Y, X1, Y1, X2,$/;"	f
TMZMath.Sin	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMath.Sin(const Angle: Integer): Single;$/;"	f
TMZMath.SquaredDistance	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMath.SquaredDistance(const X1, Y1, X2, Y2: Single): Single;$/;"	f
TMZMemory.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZMemory.Create(const Filename: UTF8String);$/;"	p
TMZMemory.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZMemory.Create(const Size: Integer);$/;"	p
TMZMemory.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZMemory.Create;$/;"	p
TMZMemory.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZMemory.Destroy;$/;"	p
TMZMemory.Read	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZMemory.Read(var Buffer; const Count: Integer): Integer;$/;"	f
TMZMemory.SaveToFile	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZMemory.SaveToFile(const Filename: UTF8String);$/;"	p
TMZMemory.Seek	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZMemory.Seek(const Offset: Integer;$/;"	f
TMZMemory.SetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZMemory.SetPosition(const Value: Longword);$/;"	p
TMZMemory.SetSize	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZMemory.SetSize(const Value: Longword);$/;"	p
TMZMemory.Write	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZMemory.Write(const Buffer; const Count: Integer): Integer;$/;"	f
TMZMouse.Center	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.Center;$/;"	p
TMZMouse.ClearState	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.ClearState;$/;"	p
TMZMouse.GetDX	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.GetDX: Integer;$/;"	f
TMZMouse.GetDY	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.GetDY: Integer;$/;"	f
TMZMouse.GetPos	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.GetPos(out X, Y: Integer);$/;"	p
TMZMouse.GetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.GetPosition: TMZPoint;$/;"	f
TMZMouse.GetX	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.GetX: Integer;$/;"	f
TMZMouse.GetY	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.GetY: Integer;$/;"	f
TMZMouse.HasWheelScrolledDown	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.HasWheelScrolledDown: Boolean;$/;"	f
TMZMouse.HasWheelScrolledUp	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.HasWheelScrolledUp: Boolean;$/;"	f
TMZMouse.IsButtonClicked	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.IsButtonClicked(const Button: TMZMouseButton): Boolean;$/;"	f
TMZMouse.IsButtonDoubleClicked	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.IsButtonDoubleClicked($/;"	f
TMZMouse.IsButtonDown	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.IsButtonDown(const Button: TMZMouseButton): Boolean;$/;"	f
TMZMouse.IsButtonUp	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZMouse.IsButtonUp(const Button: TMZMouseButton): Boolean;$/;"	f
TMZMouse.SetPos	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.SetPos(const X, Y: Integer);$/;"	p
TMZMouse.SetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.SetPosition(Value: TMZPoint);$/;"	p
TMZMouse.SetX	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.SetX(const Value: Integer);$/;"	p
TMZMouse.SetY	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZMouse.SetY(const Value: Integer);$/;"	p
TMZParticleEmitter.CopyEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZParticleEmitter.CopyEmitter($/;"	f
TMZParticleEmitter.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEmitter.Create(const Buffer: Pointer;$/;"	p
TMZParticleEmitter.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEmitter.Create(const Filename: UTF8String;$/;"	p
TMZParticleEmitter.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEmitter.Create(const Memory: TMZMemory;$/;"	p
TMZParticleEmitter.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEmitter.Create(const Source: TMZParticleEmitter);$/;"	p
TMZParticleEmitter.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEmitter.Create(const Stream: TStream;$/;"	p
TMZParticleEmitter.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEmitter.Create(const Texture: TMZTexture);$/;"	p
TMZParticleEmitter.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZParticleEmitter.Destroy;$/;"	p
TMZParticleEmitter.GetAngularVelocity	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetAngularVelocity: Single;$/;"	f
TMZParticleEmitter.GetAngularVelocityVariation	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetAngularVelocityVariation: Single;$/;"	f
TMZParticleEmitter.GetBlendMode	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetBlendMode: TMZBlendMode;$/;"	f
TMZParticleEmitter.GetBoundingBox	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetBoundingBox: TMZRect;$/;"	f
TMZParticleEmitter.GetColorMode	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetColorMode: TMZColorMode;$/;"	f
TMZParticleEmitter.GetEmitterType	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetEmitterType: TMZParticleEmitterType;$/;"	f
TMZParticleEmitter.GetEndFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetEndFrameNumber: Integer;$/;"	f
TMZParticleEmitter.GetSpinAngle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetSpinAngle: Single;$/;"	f
TMZParticleEmitter.GetSpinAngleVariation	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetSpinAngleVariation: Single;$/;"	f
TMZParticleEmitter.GetStartFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEmitter.GetStartFrameNumber: Integer;$/;"	f
TMZParticleEmitter.Render	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.Render;$/;"	p
TMZParticleEmitter.SetAlphas	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetAlphas(const Alphas: array of Byte;$/;"	p
TMZParticleEmitter.SetAngularVelocities	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetAngularVelocities(const Velocities,$/;"	p
TMZParticleEmitter.SetAngularVelocity	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetAngularVelocity(const Value: Single);$/;"	p
TMZParticleEmitter.SetAngularVelocityVariation	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetAngularVelocityVariation(const Value: Single);$/;"	p
TMZParticleEmitter.SetBlendMode	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetBlendMode(const Value: TMZBlendMode);$/;"	p
TMZParticleEmitter.SetCircleEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetCircleEmitter(const X, Y, Radius, Direction,$/;"	p
TMZParticleEmitter.SetColorMode	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetColorMode(const Value: TMZColorMode);$/;"	p
TMZParticleEmitter.SetColors	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetColors(const Colors: array of Cardinal;$/;"	p
TMZParticleEmitter.SetEmitterType	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetEmitterType(const Typ: Byte; const X, Y: Single);$/;"	p
TMZParticleEmitter.SetEndFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetEndFrameNumber(const Value: Integer);$/;"	p
TMZParticleEmitter.SetLineEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetLineEmitter(const X, Y, Length, Direction,$/;"	p
TMZParticleEmitter.SetPointEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetPointEmitter(const X, Y, Direction,$/;"	p
TMZParticleEmitter.SetRectangleEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetRectangleEmitter(const X, Y, Width, Height,$/;"	p
TMZParticleEmitter.SetRingEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetRingEmitter(const X, Y, Radius1, Radius2,$/;"	p
TMZParticleEmitter.SetSizes	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetSizes(const Sizes, Ages: array of Single;$/;"	p
TMZParticleEmitter.SetSpinAngle	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetSpinAngle(const Value: Single);$/;"	p
TMZParticleEmitter.SetSpinAngleVariation	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetSpinAngleVariation(const Value: Single);$/;"	p
TMZParticleEmitter.SetSpinAngles	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetSpinAngles(const Factors,$/;"	p
TMZParticleEmitter.SetStartFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetStartFrameNumber(const Value: Integer);$/;"	p
TMZParticleEmitter.SetVelocities	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.SetVelocities(const Velocities,$/;"	p
TMZParticleEmitter.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEmitter.Update(const DeltaTimeMs: Double);$/;"	p
TMZParticleEngine.AddEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.AddEmitter(const Emitter: TMZParticleEmitter);$/;"	p
TMZParticleEngine.AddEmitterCopy	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEngine.AddEmitterCopy(const Source: TMZParticleEmitter;$/;"	f
TMZParticleEngine.Clear	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.Clear;$/;"	p
TMZParticleEngine.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZParticleEngine.Create;$/;"	p
TMZParticleEngine.DeleteEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.DeleteEmitter(const Index: Integer);$/;"	p
TMZParticleEngine.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZParticleEngine.Destroy;$/;"	p
TMZParticleEngine.GetEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZParticleEngine.GetEmitter(const Index: Integer): TMZParticleEmitter;$/;"	f
TMZParticleEngine.RemoveEmitter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.RemoveEmitter(const Emitter: TMZParticleEmitter);$/;"	p
TMZParticleEngine.Render	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.Render;$/;"	p
TMZParticleEngine.SortByID	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.SortByID(const ALo, AHi: Integer);$/;"	p
TMZParticleEngine.SortByLayer	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.SortByLayer(const ALo, AHi: Integer);$/;"	p
TMZParticleEngine.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZParticleEngine.Update(const DeltaTimeMs: Double);$/;"	p
TMZPoint.AngleTo	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.AngleTo(const Other: TMZPoint): Single;$/;"	f
TMZPoint.AngleTo	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.AngleTo(const X, Y: Single): Single;$/;"	f
TMZPoint.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZPoint.Create(const X, Y: Single): TMZPoint;$/;"	f
TMZPoint.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZPoint.Create: TMZPoint;$/;"	f
TMZPoint.DistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.DistanceTo(const Other: TMZPoint): Single;$/;"	f
TMZPoint.DistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.DistanceTo(const X, Y: Single): Single;$/;"	f
TMZPoint.Equals	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.Equals(const Other: TMZPoint): Boolean;$/;"	f
TMZPoint.InRect	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.InRect(const X, Y, W, H: Single): Boolean;$/;"	f
TMZPoint.InTriangle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.InTriangle(const P1, P2, P3: TMZPoint): Boolean;$/;"	f
TMZPoint.Orientation	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.Orientation(const X1, Y1, X2, Y2: Single): TMZOrientation;$/;"	f
TMZPoint.SquaredDistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.SquaredDistanceTo(const Other: TMZPoint): Single;$/;"	f
TMZPoint.SquaredDistanceTo	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZPoint.SquaredDistanceTo(const X, Y: Single): Single;$/;"	f
TMZRect.ClipToRect	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.ClipToRect(const ClipRect: TMZRect): TMZRect;$/;"	f
TMZRect.ContainsPoint	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.ContainsPoint(const Point: TMZPoint): Boolean;$/;"	f
TMZRect.ContainsPoint	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.ContainsPoint(const X, Y: Single): Boolean;$/;"	f
TMZRect.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZRect.Create(const X, Y, W, H: Single): TMZRect;$/;"	f
TMZRect.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZRect.Create: TMZRect;$/;"	f
TMZRect.Equals	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.Equals(const Other: TMZRect): Boolean;$/;"	f
TMZRect.GetBottom	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.GetBottom: Single;$/;"	f
TMZRect.GetRight	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.GetRight: Single;$/;"	f
TMZRect.InsideCircle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.InsideCircle(const Circle: TMZCircle): Boolean;$/;"	f
TMZRect.InsideRect	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.InsideRect(const OuterRect: TMZRect): Boolean;$/;"	f
TMZRect.IntersectsCircle	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.IntersectsCircle(const Circle: TMZCircle): Boolean;$/;"	f
TMZRect.IntersectsRect	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZRect.IntersectsRect(const Other: TMZRect): Boolean;$/;"	f
TMZRect.SetBottom	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZRect.SetBottom(const Value: Single);$/;"	p
TMZRect.SetRight	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZRect.SetRight(const Value: Single);$/;"	p
TMZRenderTarget.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZRenderTarget.Create(const Texture: TMZTexture;$/;"	p
TMZRenderTarget.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZRenderTarget.Destroy;$/;"	p
TMZScene.Activate	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.Activate;$/;"	p
TMZScene.ClassCreate	Engines/MondoZenGL/MondoZenGL.pas	/^class constructor TMZScene.ClassCreate;$/;"	p
TMZScene.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZScene.Create;$/;"	p
TMZScene.Deactivate	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.Deactivate;$/;"	p
TMZScene.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZScene.Destroy;$/;"	p
TMZScene.KeyChar	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.KeyChar(const Symbol: String);$/;"	p
TMZScene.KeyDown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.KeyDown(const KeyCode: TMZKeyCode);$/;"	p
TMZScene.KeyUp	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.KeyUp(const KeyCode: TMZKeyCode);$/;"	p
TMZScene.MouseDown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.MouseDown(const Button: TMZMouseButton);$/;"	p
TMZScene.MouseMove	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.MouseMove(const X, Y: Integer);$/;"	p
TMZScene.MouseUp	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.MouseUp(const Button: TMZMouseButton);$/;"	p
TMZScene.MouseWheel	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.MouseWheel(const Up: Boolean);$/;"	p
TMZScene.RenderFrame	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.RenderFrame;$/;"	p
TMZScene.Shutdown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.Shutdown;$/;"	p
TMZScene.Startup	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.Startup;$/;"	p
TMZScene.SysChangeOrientation	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.SysChangeOrientation($/;"	p
TMZScene.SysLowMemoryWarning	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.SysLowMemoryWarning;$/;"	p
TMZScene.TouchDown	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.TouchDown(const Finger: Integer);$/;"	p
TMZScene.TouchMove	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.TouchMove(const Finger, X, Y: Integer);$/;"	p
TMZScene.TouchUp	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.TouchUp(const Finger: Integer);$/;"	p
TMZScene.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZScene.Update(const DeltaTimeMs: Double);$/;"	p
TMZSprite.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZSprite.Create(const Engine: TMZSpriteEngine;$/;"	p
TMZSprite.Draw	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSprite.Draw;$/;"	p
TMZSprite.Free	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSprite.Free;$/;"	p
TMZSprite.Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSprite.Initialize;$/;"	p
TMZSprite.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSprite.Update(const DeltaTimeMs: Double);$/;"	p
TMZSpriteEngine.Add	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZSpriteEngine.Add(const Sprite: TMZSprite): Integer;$/;"	f
TMZSpriteEngine.Clear	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSpriteEngine.Clear;$/;"	p
TMZSpriteEngine.DeleteDeadSprites	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSpriteEngine.DeleteDeadSprites;$/;"	p
TMZSpriteEngine.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZSpriteEngine.Destroy;$/;"	p
TMZSpriteEngine.GetSprite	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZSpriteEngine.GetSprite(const Index: Integer): TMZSprite;$/;"	f
TMZSpriteEngine.Render	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSpriteEngine.Render;$/;"	p
TMZSpriteEngine.SortByIndex	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSpriteEngine.SortByIndex(const ALo, AHi: Integer);$/;"	p
TMZSpriteEngine.SortByLayer	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSpriteEngine.SortByLayer(const ALo, AHi: Integer);$/;"	p
TMZSpriteEngine.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZSpriteEngine.Update(const DeltaTimeMs: Double);$/;"	p
TMZStaticSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStaticSound.Create(const Buffer: Pointer; const Size: Integer;$/;"	p
TMZStaticSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStaticSound.Create(const Filename: UTF8String;$/;"	p
TMZStaticSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStaticSound.Create(const MaxChannels: Integer);$/;"	p
TMZStaticSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStaticSound.Create(const Memory: TMZMemory;$/;"	p
TMZStaticSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStaticSound.Create(const Stream: TStream;$/;"	p
TMZStaticSound.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZStaticSound.Destroy;$/;"	p
TMZStaticSound.IsLooped	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStaticSound.IsLooped(const Channel: Integer): Boolean;$/;"	f
TMZStaticSound.IsPlaying	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStaticSound.IsPlaying(const Channel: Integer): Boolean;$/;"	f
TMZStaticSound.Play	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStaticSound.Play(const Looped: Boolean; const X: Single;$/;"	f
TMZStaticSound.Set3DPosition	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStaticSound.Set3DPosition(const X, Y, Z: Single;$/;"	p
TMZStaticSound.Set3DPositionAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStaticSound.Set3DPositionAll(const X, Y, Z: Single);$/;"	p
TMZStaticSound.SetSpeed	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStaticSound.SetSpeed(const Speed: Single; const Channel: Integer);$/;"	p
TMZStaticSound.SetSpeedAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStaticSound.SetSpeedAll(const Speed: Single);$/;"	p
TMZStaticSound.SetVolume	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStaticSound.SetVolume(const Volume: Single;$/;"	p
TMZStaticSound.SetVolumeAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStaticSound.SetVolumeAll(const Volume: Single);$/;"	p
TMZStaticSound.Stop	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStaticSound.Stop(const Channel: Integer);$/;"	p
TMZStaticSound.StopAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStaticSound.StopAll(const LoopedOnly: Boolean);$/;"	p
TMZStreamingSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStreamingSound.Create(const Buffer: Pointer;$/;"	p
TMZStreamingSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStreamingSound.Create(const Filename: UTF8String);$/;"	p
TMZStreamingSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStreamingSound.Create(const Memory: TMZMemory;$/;"	p
TMZStreamingSound.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZStreamingSound.Create(const Stream: TStream;$/;"	p
TMZStreamingSound.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZStreamingSound.Destroy;$/;"	p
TMZStreamingSound.GetLength	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStreamingSound.GetLength: Double;$/;"	f
TMZStreamingSound.GetPercentComplete	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStreamingSound.GetPercentComplete: Integer;$/;"	f
TMZStreamingSound.GetPlaybackPosition	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStreamingSound.GetPlaybackPosition: Double;$/;"	f
TMZStreamingSound.IsLooped	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStreamingSound.IsLooped: Boolean;$/;"	f
TMZStreamingSound.IsPlaying	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZStreamingSound.IsPlaying: Boolean;$/;"	f
TMZStreamingSound.Pause	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.Pause;$/;"	p
TMZStreamingSound.Play	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.Play(const Looped: Boolean);$/;"	p
TMZStreamingSound.Resume	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.Resume;$/;"	p
TMZStreamingSound.Set3DPosition	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.Set3DPosition(const X, Y, Z: Single);$/;"	p
TMZStreamingSound.Set3DPositionAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStreamingSound.Set3DPositionAll(const X, Y, Z: Single);$/;"	p
TMZStreamingSound.SetSpeed	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.SetSpeed(const Speed: Single);$/;"	p
TMZStreamingSound.SetSpeedAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStreamingSound.SetSpeedAll(const Speed: Single);$/;"	p
TMZStreamingSound.SetVolume	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.SetVolume(const Volume: Single);$/;"	p
TMZStreamingSound.SetVolumeAll	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZStreamingSound.SetVolumeAll(const Volume: Single);$/;"	p
TMZStreamingSound.Stop	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZStreamingSound.Stop;$/;"	p
TMZTexture.ApplyMask	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZTexture.ApplyMask(const Mask: TMZTexture);$/;"	p
TMZTexture.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTexture.Create(const Buffer: Pointer; const Size: Integer;$/;"	p
TMZTexture.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTexture.Create(const Filename: UTF8String; const KeyColor: Cardinal;$/;"	p
TMZTexture.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTexture.Create(const Handle: zglPTexture);$/;"	p
TMZTexture.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTexture.Create(const Memory: TMZMemory; const Extension: UTF8String;$/;"	p
TMZTexture.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTexture.Create(const Stream: TStream; const Extension: UTF8String;$/;"	p
TMZTexture.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTexture.Create(const Width, Height: Integer;$/;"	p
TMZTexture.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZTexture.Destroy;$/;"	p
TMZTexture.Filter	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZTexture.Filter(const Filter: TMZTextureFilter;$/;"	p
TMZTexture.GetAnisotropyLevel	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTexture.GetAnisotropyLevel: Integer;$/;"	f
TMZTexture.GetData	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTexture.GetData: PByteArray;$/;"	f
TMZTexture.GetFormat	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTexture.GetFormat: TMZTextureFormat;$/;"	f
TMZTexture.GetHeight	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTexture.GetHeight: Integer;$/;"	f
TMZTexture.GetID	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTexture.GetID: Cardinal;$/;"	f
TMZTexture.GetWidth	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTexture.GetWidth: Integer;$/;"	f
TMZTexture.IsZeroTexture	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTexture.IsZeroTexture(const Handle: zglPTexture): Boolean;$/;"	f
TMZTexture.SetAnisotropyLevel	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZTexture.SetAnisotropyLevel(const Value: Integer);$/;"	p
TMZTexture.SetData	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZTexture.SetData(const Data: Pointer; const X, Y, Width,$/;"	p
TMZTexture.SetFrameSize	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZTexture.SetFrameSize(const FrameWidth, FrameHeight: Integer);$/;"	p
TMZTileAnimated.AddFrame	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileAnimated.AddFrame(const Frame: Integer);$/;"	p
TMZTileAnimated.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileAnimated.Create(const Map: TMZTileMap; const Index: Integer);$/;"	p
TMZTileAnimated.Equals	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileAnimated.Equals(Obj: TObject): Boolean;$/;"	f
TMZTileAnimated.Load	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileAnimated.Load(const Reader: TMZTileReader);$/;"	p
TMZTileAnimated.Save	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileAnimated.Save(const Writer: TMZTileWriter);$/;"	p
TMZTileAnimated.Setup	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileAnimated.Setup;$/;"	p
TMZTileAnimated.Update	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileAnimated.Update(const DeltaTimeMs: Double);$/;"	p
TMZTileBase.AddProperty	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileBase.AddProperty(const Name, Value: UTF8String);$/;"	p
TMZTileBase.Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^destructor TMZTileBase.Destroy;$/;"	p
TMZTileLayer.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileLayer.Create(const Map: TMZTileMap);$/;"	p
TMZTileLayer.GetHeight	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileLayer.GetHeight: Integer;$/;"	f
TMZTileLayer.GetWidth	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileLayer.GetWidth: Integer;$/;"	f
TMZTileLayer.Load	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileLayer.Load(const Reader: TMZTileReader);$/;"	p
TMZTileLayer.MapToLocal	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileLayer.MapToLocal(const MapPoint: TMZPoint): TMZPoint;$/;"	f
TMZTileLayer.Render	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileLayer.Render(const ViewCenter: TMZPoint);$/;"	p
TMZTileLayer.Save	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileLayer.Save(const Writer: TMZTileWriter);$/;"	p
TMZTileLayer.SetSize	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileLayer.SetSize(const ColumnCount, RowCount: Integer);$/;"	p
TMZTileMap.AddAnimatedTile	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileMap.AddAnimatedTile(const Anim: TMZTileAnimated): Integer;$/;"	f
TMZTileMap.AddLayer	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileMap.AddLayer: TMZTileLayer;$/;"	f
TMZTileMap.AddTileSet	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileMap.AddTileSet: TMZTileSet;$/;"	f
TMZTileMap.ClassCreate	Engines/MondoZenGL/mzTileMaps.pas	/^class constructor TMZTileMap.ClassCreate;$/;"	p
TMZTileMap.ClassDestroy	Engines/MondoZenGL/mzTileMaps.pas	/^class destructor TMZTileMap.ClassDestroy;$/;"	p
TMZTileMap.ConstrainViewToScreen	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.ConstrainViewToScreen;$/;"	p
TMZTileMap.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileMap.Create(const Filename: UTF8String;$/;"	p
TMZTileMap.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileMap.Create;$/;"	p
TMZTileMap.Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^destructor TMZTileMap.Destroy;$/;"	p
TMZTileMap.IndexOfTileSet	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileMap.IndexOfTileSet(const TileSet: TMZTileSet): Integer;$/;"	f
TMZTileMap.LoadTexturesIfNeeded	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.LoadTexturesIfNeeded;$/;"	p
TMZTileMap.Render	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.Render;$/;"	p
TMZTileMap.SaveToFile	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.SaveToFile(const Filename: UTF8String);$/;"	p
TMZTileMap.SetConstrainView	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.SetConstrainView(const Value: Boolean);$/;"	p
TMZTileMap.SetViewCenter	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.SetViewCenter(const Value: TMZPoint);$/;"	p
TMZTileMap.SetViewCenterX	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.SetViewCenterX(const Value: Single);$/;"	p
TMZTileMap.SetViewCenterY	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.SetViewCenterY(const Value: Single);$/;"	p
TMZTileMap.TMZTileTexture.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileMap.TMZTileTexture.Create(const Texture: TMZTexture);$/;"	p
TMZTileMap.TMZTileTexture.Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^destructor TMZTileMap.TMZTileTexture.Destroy;$/;"	p
TMZTileMap.Update	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileMap.Update(const DeltaTimeMs: Double);$/;"	p
TMZTileProperties.Add	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileProperties.Add(const Name, Value: UTF8String);$/;"	p
TMZTileProperties.Get	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileProperties.Get(const Name: UTF8String): UTF8String;$/;"	f
TMZTileProperties.Get	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileProperties.Get(const Index: Integer; out Name, Value: UTF8String);$/;"	p
TMZTileProperties.GetCount	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileProperties.GetCount: Integer;$/;"	f
TMZTileProperties.Load	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileProperties.Load(const Count: Integer;$/;"	p
TMZTileReader.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileReader.Create(const Filename: UTF8String);$/;"	p
TMZTileReader.Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^destructor TMZTileReader.Destroy;$/;"	p
TMZTileReader.ReadBool	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadBool: Boolean;$/;"	f
TMZTileReader.ReadInt16	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadInt16: Integer;$/;"	f
TMZTileReader.ReadInt32	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadInt32: Integer;$/;"	f
TMZTileReader.ReadInt8	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadInt8: Integer;$/;"	f
TMZTileReader.ReadProperties	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadProperties: TMZTileProperties;$/;"	f
TMZTileReader.ReadString	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadString: UTF8String;$/;"	f
TMZTileReader.ReadTag	Engines/MondoZenGL/mzTileMaps.pas	/^function TMZTileReader.ReadTag(out TagName: UTF8String; out$/;"	f
TMZTileSet.Load	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileSet.Load(const Reader: TMZTileReader);$/;"	p
TMZTileSet.Save	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileSet.Save(const Writer: TMZTileWriter);$/;"	p
TMZTileWriter.Create	Engines/MondoZenGL/mzTileMaps.pas	/^constructor TMZTileWriter.Create(const Filename: UTF8String);$/;"	p
TMZTileWriter.Destroy	Engines/MondoZenGL/mzTileMaps.pas	/^destructor TMZTileWriter.Destroy;$/;"	p
TMZTileWriter.EndTag	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.EndTag;$/;"	p
TMZTileWriter.StartTag	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.StartTag(const TagName: UTF8String);$/;"	p
TMZTileWriter.WriteBool	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.WriteBool(const Value: Boolean);$/;"	p
TMZTileWriter.WriteInt16	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.WriteInt16(const Value: Integer);$/;"	p
TMZTileWriter.WriteInt32	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.WriteInt32(const Value: Integer);$/;"	p
TMZTileWriter.WriteInt8	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.WriteInt8(const Value: Integer);$/;"	p
TMZTileWriter.WriteProperties	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.WriteProperties(const Value: TMZTileProperties);$/;"	p
TMZTileWriter.WriteString	Engines/MondoZenGL/mzTileMaps.pas	/^procedure TMZTileWriter.WriteString(const Value: UTF8String);$/;"	p
TMZTimer.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZTimer.Create(const OnTimer: TNotifyEvent;$/;"	p
TMZTimer.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZTimer.Destroy;$/;"	p
TMZTimer.GetActive	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTimer.GetActive: Boolean;$/;"	f
TMZTimer.GetInterval	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTimer.GetInterval: Integer;$/;"	f
TMZTimer.SetActive	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZTimer.SetActive(const Value: Boolean);$/;"	p
TMZTimer.SetInterval	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZTimer.SetInterval(const Value: Integer);$/;"	p
TMZTouch.ClearState	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZTouch.ClearState;$/;"	p
TMZTouch.GetPos	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZTouch.GetPos(const Finger: Byte; out X, Y: Integer);$/;"	p
TMZTouch.GetPosition	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.GetPosition(const Finger: Byte): TMZPoint;$/;"	f
TMZTouch.GetX	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.GetX(const Finger: Byte): Integer;$/;"	f
TMZTouch.GetY	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.GetY(const Finger: Byte): Integer;$/;"	f
TMZTouch.IsFingerDoubleTapped	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.IsFingerDoubleTapped(const Finger: Byte): Boolean;$/;"	f
TMZTouch.IsFingerDown	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.IsFingerDown(const Finger: Byte): Boolean;$/;"	f
TMZTouch.IsFingerTapped	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.IsFingerTapped(const Finger: Byte): Boolean;$/;"	f
TMZTouch.IsFingerUp	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTouch.IsFingerUp(const Finger: Byte): Boolean;$/;"	f
TMZTriangle.ContainsPoint	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTriangle.ContainsPoint(const Point: TMZPoint): Boolean;$/;"	f
TMZTriangle.ContainsPoint	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTriangle.ContainsPoint(const X, Y: Single): Boolean;$/;"	f
TMZTriangle.Create	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTriangle.Create(const P1, P2, P3: TMZPoint): TMZTriangle;$/;"	f
TMZTriangle.Equals	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZTriangle.Equals(const Other: TMZTriangle): Boolean;$/;"	f
TMZTriangulator.AddHole	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZTriangulator.AddHole(const Contour: array of TMZPoint);$/;"	p
TMZTriangulator.AddHole	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZTriangulator.AddHole(const Contour: array of TMZPoint;$/;"	p
TMZTriangulator.BeginTriangulation	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZTriangulator.BeginTriangulation($/;"	p
TMZTriangulator.EndTriangulation	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZTriangulator.EndTriangulation: TMZTriangleArray;$/;"	f
TMZUtils.BoolToStr	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.BoolToStr(const Value: Boolean): UTF8String;$/;"	f
TMZUtils.FloatToStr	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.FloatToStr(const Value: Single;$/;"	f
TMZUtils.Format	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.Format(const Format: UTF8String;$/;"	f
TMZUtils.GetApplicationDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetApplicationDirectory: UTF8String;$/;"	f
TMZUtils.GetDesktopHeight	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetDesktopHeight: Integer;$/;"	f
TMZUtils.GetDesktopWidth	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetDesktopWidth: Integer;$/;"	f
TMZUtils.GetHomeDirectory	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetHomeDirectory: UTF8String;$/;"	f
TMZUtils.GetMaxAnisotropyLevel	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetMaxAnisotropyLevel: Integer;$/;"	f
TMZUtils.GetMaxTextureSize	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetMaxTextureSize: Integer;$/;"	f
TMZUtils.GetMaxTextureUnits	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetMaxTextureUnits: Integer;$/;"	f
TMZUtils.GetMondoZenGLVersion	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetMondoZenGLVersion: Integer;$/;"	f
TMZUtils.GetMondoZenGLVersionDate	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetMondoZenGLVersionDate: String;$/;"	f
TMZUtils.GetMondoZenGLVersionString	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetMondoZenGLVersionString: String;$/;"	f
TMZUtils.GetScreenResolutions	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetScreenResolutions: TMZScreenResolutionArray;$/;"	f
TMZUtils.GetSupportsAutomaticMipmapGeneration	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetSupportsAutomaticMipmapGeneration: Boolean;$/;"	f
TMZUtils.GetSupportsSeparateAlpha	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetSupportsSeparateAlpha: Boolean;$/;"	f
TMZUtils.GetZenGLVersion	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetZenGLVersion: Integer;$/;"	f
TMZUtils.GetZenGLVersionDate	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetZenGLVersionDate: UTF8String;$/;"	f
TMZUtils.GetZenGLVersionString	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.GetZenGLVersionString: UTF8String;$/;"	f
TMZUtils.IntToStr	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.IntToStr(const Value: Integer): UTF8String;$/;"	f
TMZUtils.Sleep	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZUtils.Sleep(const SleepTimeMs: Integer);$/;"	p
TMZUtils.StrToBool	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.StrToBool(const Value: UTF8String): Boolean;$/;"	f
TMZUtils.StrToFloat	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.StrToFloat(const Value: UTF8String): Single;$/;"	f
TMZUtils.StrToInt	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZUtils.StrToInt(const Value: UTF8String): Integer;$/;"	f
TMZVideoStream.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZVideoStream.Create(const Buffer: Pointer; const Size: Integer;$/;"	p
TMZVideoStream.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZVideoStream.Create(const Filename: UTF8String);$/;"	p
TMZVideoStream.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZVideoStream.Create(const Memory: TMZMemory;$/;"	p
TMZVideoStream.Create	Engines/MondoZenGL/MondoZenGL.pas	/^constructor TMZVideoStream.Create(const Stream: TStream; const Extension: UTF8String);$/;"	p
TMZVideoStream.Destroy	Engines/MondoZenGL/MondoZenGL.pas	/^destructor TMZVideoStream.Destroy;$/;"	p
TMZVideoStream.GetDurationMs	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetDurationMs: Double;$/;"	f
TMZVideoStream.GetFrameCount	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetFrameCount: Integer;$/;"	f
TMZVideoStream.GetFrameNumber	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetFrameNumber: Integer;$/;"	f
TMZVideoStream.GetFrameRate	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetFrameRate: Single;$/;"	f
TMZVideoStream.GetHeight	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetHeight: Integer;$/;"	f
TMZVideoStream.GetPositionMs	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetPositionMs: Double;$/;"	f
TMZVideoStream.GetWidth	Engines/MondoZenGL/MondoZenGL.pas	/^function TMZVideoStream.GetWidth: Integer;$/;"	f
TMZVideoStream.Initialize	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZVideoStream.Initialize;$/;"	p
TMZVideoStream.Seek	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZVideoStream.Seek(const SeekTimeMs: Double);$/;"	p
TMZVideoStream.Update	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TMZVideoStream.Update(const DeltaTimeMs: Double; const Loop: Boolean);$/;"	p
TMZZipArchive.CloseArchive	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZZipArchive.CloseArchive;$/;"	p
TMZZipArchive.Open	Engines/MondoZenGL/MondoZenGL.pas	/^class function TMZZipArchive.Open(const Filename: UTF8String): TMZFile;$/;"	f
TMZZipArchive.OpenArchive	Engines/MondoZenGL/MondoZenGL.pas	/^class procedure TMZZipArchive.OpenArchive(const Filename: UTF8String;$/;"	p
TimerExpired	Engines/MondoZenGL/MondoZenGL.pas	/^procedure TimerExpired(Sender: zglPTimer);$/;"	p
ToAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    class function ToAngle(const V: TCPVect): TCPFloat; overload; inline; static;$/;"	f
ToAngle	Engines/MondoZenGL/mzChipmunk.pas	/^    function ToAngle: TCPFloat; overload; inline;$/;"	f
ToString	Engines/MondoZenGL/mzChipmunk.pas	/^    function ToString: String;$/;"	f
TotalImpulse	Engines/MondoZenGL/mzChipmunk.pas	/^    function TotalImpulse: TCPVect; inline;$/;"	f
TotalImpulseWithFriction	Engines/MondoZenGL/mzChipmunk.pas	/^    function TotalImpulseWithFriction: TCPVect; inline;$/;"	f
TouchDown	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure TouchDown(const Finger: Integer); virtual;$/;"	p
TouchMove	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure TouchMove(const Finger, X, Y: Integer); virtual;$/;"	p
TouchUp	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure TouchUp(const Finger: Integer); virtual;$/;"	p
Unlock	Engines/ZenGL/src/zgl_sound_dsound.pas	/^    function Unlock(lpvAudioPtr1: Pointer; dwAudioBytes1: LongWord;$/;"	f
UnlockRegion	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function UnlockRegion(libOffset: Largeint; cb: Largeint;$/;"	f
Unrotate	Engines/MondoZenGL/mzChipmunk.pas	/^    class function Unrotate(const V1, V2: TCPVect): TCPVect; overload; inline; static;$/;"	f
Unrotate	Engines/MondoZenGL/mzChipmunk.pas	/^    function Unrotate(const Other: TCPVect): TCPVect; overload; inline;$/;"	f
UnsafeSetEndPoints	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure UnsafeSetEndPoints(const A, B: TCPVect); inline;$/;"	p
UnsafeSetRadius	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure UnsafeSetRadius(const Radius: TCPFloat); inline;$/;"	p
Update	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Update(const DeltaTimeMs: Double); virtual;$/;"	p
Update	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Update(const DeltaTimeMs: Double);$/;"	p
Update	Engines/MondoZenGL/MondoZenGL.pas	/^    procedure Update(const DeltaTimeMs: Double; const Loop: Boolean = False);$/;"	p
Update	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure Update(const DeltaTimeMs: Double);$/;"	p
UpdatePosition	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure UpdatePosition(const DT: TCPFloat); inline;$/;"	p
UpdateTouch	Engines/ZenGL/src/zgl_application.pas	/^    procedure UpdateTouch( ID : Integer ); message 'UpdateTouch:';$/;"	p
UpdateVelocity	Engines/MondoZenGL/mzChipmunk.pas	/^    procedure UpdateVelocity(const Gravity: TCPVect;$/;"	p
VM	Engines/ZenGL/src/jni.pas	/^      AttachCurrentThread:function(PVM:PJavaVM;PEnv:PPJNIEnv;Args:pointer):JInt;{$ifdef mswindow/;"	f
VM	Engines/ZenGL/src/jni.pas	/^      AttachCurrentThreadAsDaemon:function(PVM:PJavaVM;PEnv:PPJNIEnv;Args:pointer):JInt;{$ifdef /;"	f
VM	Engines/ZenGL/src/jni.pas	/^      DestroyJavaVM:function(PVM:PJavaVM):JInt;{$ifdef mswindows}stdcall;{$else}cdecl;{$endif}$/;"	f
VM	Engines/ZenGL/src/jni.pas	/^      DetachCurrentThread:function(PVM:PJavaVM):JInt;{$ifdef mswindows}stdcall;{$else}cdecl;{$en/;"	f
VM	Engines/ZenGL/src/jni.pas	/^      GetEnv:function(PVM:PJavaVM;PEnv:Ppointer;Version:JInt):JInt;{$ifdef mswindows}stdcall;{$e/;"	f
VSync	Engines/ZenGL/headers/zglHeader.pas	/^  scr_SetVSync          : procedure( VSync : Boolean );$/;"	p
What	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_Disable : procedure( What : LongWord );$/;"	p
What	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_Enable  : procedure( What : LongWord );$/;"	p
What	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_Get         : function( What : LongWord ) : Ptr;$/;"	f
What	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_Reg : procedure( What : LongWord; UserData : Pointer );$/;"	p
Width	Engines/ZenGL/headers/zglHeader.pas	/^  scr_CorrectResolution : procedure( Width, Height : Word );$/;"	p
Width	Engines/ZenGL/headers/zglHeader.pas	/^  scr_SetOptions        : function( Width, Height, Refresh : Word; FullScreen, VSync : Boolean )/;"	f
Width	Engines/ZenGL/headers/zglHeader.pas	/^  wnd_SetSize    : procedure( Width, Height : Integer );$/;"	p
WorldToLocal	Engines/MondoZenGL/mzChipmunk.pas	/^    function WorldToLocal(const V: TCPVect): TCPVect; inline;$/;"	f
WrapVect	Engines/MondoZenGL/mzChipmunk.pas	/^    class function WrapVect(const BB: TCPBB; const V: TCPVect): TCPVect; overload; inline; stati/;"	f
WrapVect	Engines/MondoZenGL/mzChipmunk.pas	/^    function WrapVect(const V: TCPVect): TCPVect; overload; inline;$/;"	f
Write	Engines/MondoZenGL/MondoZenGL.pas	/^    function Write(const Buffer; const Count: Integer): Integer;$/;"	f
Write	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function Write(pv: Pointer; cb: Longint; pcbWritten: PLongint): HResult;$/;"	f
WriteBool	Engines/MondoZenGL/MondoZenGL.pas	/^    class function WriteBool(const Section, Key: UTF8String; const Value: Boolean): Boolean; sta/;"	f
WriteBool	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure WriteBool(const Value: Boolean);$/;"	p
WriteCell	Engines/MondoZenGL/mzTileMaps.pas	/^  procedure WriteCell(const Number: Integer);$/;"	p
WriteFloat	Engines/MondoZenGL/MondoZenGL.pas	/^    class function WriteFloat(const Section, Key: UTF8String; const Value: Single): Boolean; sta/;"	f
WriteInt	Engines/MondoZenGL/MondoZenGL.pas	/^    class function WriteInt(const Section, Key: UTF8String; const Value: Integer): Boolean; stat/;"	f
WriteInt16	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure WriteInt16(const Value: Integer);$/;"	p
WriteInt32	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure WriteInt32(const Value: Integer);$/;"	p
WriteInt8	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure WriteInt8(const Value: Integer);$/;"	p
WriteProperties	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure WriteProperties(const Value: TMZTileProperties);$/;"	p
WriteRun	Engines/MondoZenGL/mzTileMaps.pas	/^  procedure WriteRun;$/;"	p
WriteString	Engines/MondoZenGL/MondoZenGL.pas	/^    class function WriteString(const Section, Key, Value: UTF8String): Boolean; static;$/;"	f
WriteString	Engines/MondoZenGL/mzTileMaps.pas	/^    procedure WriteString(const Value: UTF8String);$/;"	p
X	Engines/ZenGL/headers/zglHeader.pas	/^  wnd_SetPos     : procedure( X, Y : Integer );$/;"	p
X	Engines/ZenGL/src/zgl_mouse.pas	/^  mouse_PMove    : procedure( X, Y : Integer );$/;"	p
X	Engines/ZenGL/src/zgl_render_2d.pas	/^  sprite2d_InScreen : function( X, Y, W, H, Angle : Single ) : Boolean;$/;"	f
XCloseIM	Engines/ZenGL/src/zgl_screen.pas	/^function XCloseIM(im : PXIM) : TStatus;cdecl;external;$/;"	f
XCreateIC	Engines/ZenGL/src/zgl_screen.pas	/^function XCreateIC(para1 : PXIM; para2 : array of const):PXIC;cdecl;external;$/;"	f
XDestroyIC	Engines/ZenGL/src/zgl_screen.pas	/^procedure XDestroyIC(ic : PXIC);cdecl;external;$/;"	p
XOpenIM	Engines/ZenGL/src/zgl_screen.pas	/^function XOpenIM(para1:PDisplay; para2:PXrmHashBucketRec; para3:PAnsiChar; para4:Pchar):PXIM;cde/;"	f
__android_log_write	Engines/ZenGL/src/zgl_utils.pas	/^function __android_log_write( prio : LongInt; tag, text : PAnsiChar ) : LongInt; cdecl; external/;"	f
__chkstk_ms	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure __chkstk_ms; cdecl; public name '___chkstk_ms';$/;"	p
__chkstk_ms	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^procedure __chkstk_ms;$/;"	p
_close	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _close; cdecl; external 'msvcrt.dll';$/;"	p
_creat	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _creat; cdecl; external 'msvcrt.dll';$/;"	p
_dec	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_decode_ctl       : function( _dec : pth_dec_ctx; _req : cint; _buf : Pointer; _buf_sz : c/;"	f
_dec	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_decode_free      : procedure( _dec : pth_dec_ctx ); cdecl;$/;"	p
_dec	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_decode_packetin  : function( _dec : pth_dec_ctx; const _op : pogg_packet; _granpos : pogg/;"	f
_dec	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_decode_ycbcr_out : function( _dec : pth_dec_ctx; _ycbcr : pth_ycbcr_buffer ) : cint; cdec/;"	f
_dup	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _dup; cdecl; external 'msvcrt.dll';$/;"	p
_encdec	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_granule_frame    : function( _encdec : Pointer; _granpos : ogg_int64_t ) : ogg_int64_t; c/;"	f
_encdec	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_granule_time     : function( _encdec : Pointer; _granpos : ogg_int64_t ) : cdouble; cdecl/;"	f
_errno	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _errno; cdecl; external 'msvcrt.dll';$/;"	p
_fdopen	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _fdopen; cdecl; external 'msvcrt.dll';$/;"	p
_file_GetDirectory	Engines/ZenGL/src/zgl_file.pas	/^function _file_GetDirectory( const FileName : UTF8String ) : PAnsiChar;$/;"	f
_file_GetExtension	Engines/ZenGL/src/zgl_file.pas	/^function _file_GetExtension( const FileName : UTF8String ) : PAnsiChar;$/;"	f
_file_GetName	Engines/ZenGL/src/zgl_file.pas	/^function _file_GetName( const FileName : UTF8String ) : PAnsiChar;$/;"	f
_fileno	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _fileno cdecl; external 'msvcrt.dll';$/;"	p
_fstat	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function _fstat( handle : cint; var buffer ) : cint; cdecl; external 'msvcrt.dll';$/;"	f
_info	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_decode_headerin  : function( _info : pth_info; _tc : pth_comment; _setup : ppth_setup_inf/;"	f
_info	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_info_clear       : procedure( _info : pth_info ); cdecl;$/;"	p
_info	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_info_init        : procedure( _info : pth_info ); cdecl;$/;"	p
_ini_ReadKeyStr	Engines/ZenGL/src/zgl_ini.pas	/^function _ini_ReadKeyStr( const Section, Key : UTF8String ) : PAnsiChar;$/;"	f
_llmul	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _llmul; cdecl;$/;"	p
_llmul	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^procedure _llmul; cdecl;$/;"	p
_mktemp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _mktemp; cdecl; external 'msvcrt.dll';$/;"	p
_set	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetDestroy : procedure( _set : PcpHashSet ); cdecl;$/;"	p
_set	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetEach : procedure( _set : PcpHashSet; func : cpHashSetIterFunc; data : Pointer ); cdec/;"	p
_set	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetFilter : procedure( _set : PcpHashSet; func : cpHashSetIterFunc; data : Pointer ); cd/;"	p
_set	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetFind : function( _set : PcpHashSet; hash : cpHashValue; ptr : Pointer ) : Pointer; cd/;"	f
_set	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetFree : procedure( _set : PcpHashSet ); cdecl;$/;"	p
_set	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetInit : function( _set : PcpHashSet; size : Integer; eqlFunc : cpHashSetEqlFunc; trans/;"	f
_setmode	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _setmode; cdecl; external 'msvcrt.dll';$/;"	p
_setup	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_setup_free       : procedure( _setup : pth_setup_info ); cdecl;$/;"	p
_snprintf	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _snprintf; cdecl; external 'msvcrt.dll';$/;"	p
_stat	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function _stat( path : PAnsiChar; var buffer ) : cint; cdecl; external 'msvcrt.dll';$/;"	f
_strdup	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _strdup; cdecl; external 'msvcrt.dll';$/;"	p
_stricmp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure _stricmp; external 'msvcrt.dll';$/;"	p
_tc	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_comment_clear    : procedure( _tc : pth_comment ); cdecl;$/;"	p
_tc	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_comment_init     : procedure( _tc : pth_comment ); cdecl;$/;"	p
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpApplyDampedSpring : procedure( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect; r/;"	p
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpDampedRotarySpringNew : function( a : PcpBody; b : PcpBody; restAngle : cpFloat; stiffness :/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpDampedSpringNew : function( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect; rest/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGearJointNew : function( a : PcpBody; b : PcpBody; phase : cpFloat; ratio : cpFloat ) : PcpC/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGrooveJointNew : function( a : PcpBody; b : PcpBody; groove_a : cpVect; groove_b : cpVect; a/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPinJointNew : function( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect ) : PcpCo/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPivotJointNew : function( a : PcpBody; b : PcpBody; pivot : cpVect ) : PcpConstraint; cdecl;$/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPivotJointNew2 : function( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect ) : Pc/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpRatchetJointNew : function( a : PcpBody; b : PcpBody; phase : cpFloat; ratchet : cpFloat ) :/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpRotaryLimitJointNew : function( a : PcpBody; b : PcpBody; min : cpFloat; max : cpFloat ) : P/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSimpleMotorNew : function( a : PcpBody; b : PcpBody; rate : cpFloat ) : PcpConstraint; cdecl/;"	f
a	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSlideJointNew : function( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect; min : /;"	f
activate	Engines/ZenGL/src/zgl_application.pas	/^  app_PActivate   : procedure( activate : Boolean );$/;"	p
addData	Engines/ZenGL/src/zgl_ini.pas	/^procedure addData( const str : UTF8String );$/;"	p
aglSetInt	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function aglSetInt(ctx:TAGLContext; pname:GLenum; params:GLint):GLboolean;$/;"	f
aglSetInt	Engines/ZenGL/src/zgl_opengl_all.pas	/^function aglSetInt;$/;"	f
agrid2d_Draw	Engines/ZenGL/src/zgl_grid_2d.pas	/^procedure agrid2d_Draw( Texture : zglPTexture; X, Y : Single; Grid : zglPGrid2D; Frame : Integer/;"	p
alBufferData	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alBufferData(bid: LongWord; format: LongInt; data: Pointer; size: LongInt; freq: Lon/;"	p
alDeleteBuffers	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alDeleteBuffers(n: LongInt; const buffers: PLongWord); cdecl; external libopenal;$/;"	p
alDeleteSources	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alDeleteSources(n: LongInt; const sources: PLongWord); cdecl; external libopenal;$/;"	p
alGenBuffers	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alGenBuffers(n: LongInt; buffers: PLongWord); cdecl; external libopenal;$/;"	p
alGenSources	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alGenSources(n: LongInt; sources: PLongWord); cdecl; external libopenal;$/;"	p
alGetError	Engines/ZenGL/src/zgl_sound_openal.pas	/^  function alGetError(device: PALCdevice): LongInt; cdecl; external libopenal;$/;"	f
alGetSourcei	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alGetSourcei(sid: LongWord; param: LongInt; var value: LongInt); cdecl; external lib/;"	p
alListenerfv	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alListenerfv(param: LongInt; const values: PSingle); cdecl; external libopenal;$/;"	p
alSourcePause	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourcePause(sid: LongWord); cdecl; external libopenal;$/;"	p
alSourcePlay	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourcePlay(sid: LongWord); cdecl; external libopenal;$/;"	p
alSourceQueueBuffers	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourceQueueBuffers(sid: LongWord; numEntries: LongInt; const bids: PLongWord); cde/;"	p
alSourceRewind	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourceRewind(sid: LongWord); cdecl; external libopenal;$/;"	p
alSourceStop	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourceStop(sid: LongWord); cdecl; external libopenal;$/;"	p
alSourceUnqueueBuffers	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourceUnqueueBuffers(sid: LongWord; numEntries: LongInt; bids: PLongWord); cdecl; /;"	p
alSourcef	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourcef(sid: LongWord; param: LongInt; value: Single); cdecl; external libopenal;$/;"	p
alSourcefv	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourcefv(sid: LongWord; param: LongInt; const values: PSingle); cdecl; external li/;"	p
alSourcei	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alSourcei(sid: LongWord; param: LongInt; value: LongInt); cdecl; external libopenal;$/;"	p
alcCloseDevice	Engines/ZenGL/src/zgl_sound_openal.pas	/^  function alcCloseDevice(device: PALCdevice): Boolean; cdecl; external libopenal;$/;"	f
alcCreateContext	Engines/ZenGL/src/zgl_sound_openal.pas	/^  function alcCreateContext(device: PALCdevice; const attrlist: PLongInt): PALCcontext; cdecl; e/;"	f
alcDestroyContext	Engines/ZenGL/src/zgl_sound_openal.pas	/^  procedure alcDestroyContext(context: PALCcontext); cdecl; external libopenal;$/;"	p
alcGetString	Engines/ZenGL/src/zgl_sound_openal.pas	/^  function alcGetString(device: PALCdevice; param: LongInt): PAnsiChar; cdecl; external libopena/;"	f
alcMakeContextCurrent	Engines/ZenGL/src/zgl_sound_openal.pas	/^  function alcMakeContextCurrent(context: PALCcontext): Boolean; cdecl; external libopenal;$/;"	f
alcOpenDevice	Engines/ZenGL/src/zgl_sound_openal.pas	/^  function alcOpenDevice(const devicename: PAnsiChar): PALCdevice; cdecl; external libopenal;$/;"	f
ame	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXGetProcAddressARB: function(name: PAnsiChar): Pointer; cdecl;$/;"	f
app_CalcFPS	Engines/ZenGL/src/zgl_application.pas	/^procedure app_CalcFPS;$/;"	p
app_CloseQuery	Engines/ZenGL/src/zgl_application.pas	/^function  app_CloseQuery : Boolean;$/;"	f
app_Draw	Engines/ZenGL/src/zgl_application.pas	/^procedure app_Draw;$/;"	p
app_FreePool	Engines/ZenGL/src/zgl_application.pas	/^procedure app_FreePool;$/;"	p
app_Init	Engines/ZenGL/src/zgl_application.pas	/^procedure app_Init;$/;"	p
app_InitPool	Engines/ZenGL/src/zgl_application.pas	/^procedure app_InitPool;$/;"	p
app_MainLoop	Engines/ZenGL/src/zgl_application.pas	/^procedure app_MainLoop;$/;"	p
app_PDraw	Engines/ZenGL/src/zgl_application.pas	/^  app_PDraw       : procedure;$/;"	p
app_PLoop	Engines/ZenGL/src/zgl_application.pas	/^  app_PLoop       : procedure;$/;"	p
app_POrientation	Engines/ZenGL/src/zgl_application.pas	/^  app_POrientation : procedure( orientation : UIInterfaceOrientation );$/;"	p
app_PUpdate	Engines/ZenGL/src/zgl_application.pas	/^  app_PUpdate     : procedure( dt : Double );$/;"	p
app_ProcessMessages	Engines/ZenGL/src/zgl_application.pas	/^function app_ProcessMessages : LongWord;$/;"	f
app_ProcessMessages	Engines/ZenGL/src/zgl_application.pas	/^function app_ProcessMessages( hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM ) : LRES/;"	f
app_ProcessMessages	Engines/ZenGL/src/zgl_application.pas	/^function app_ProcessMessages( inHandlerCallRef: EventHandlerCallRef; inEvent: EventRef; inUserDa/;"	f
app_ProcessMessages	Engines/ZenGL/src/zgl_application.pas	/^function app_ProcessMessages;$/;"	f
app_ProcessOS	Engines/ZenGL/src/zgl_application.pas	/^procedure app_ProcessOS;$/;"	p
applicationDidBecomeActive	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationDidBecomeActive( application: UIApplication ); message 'applicationDidB/;"	p
applicationDidEnterBackground	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationDidEnterBackground( application: UIApplication ); message 'applicationD/;"	p
applicationDidFinishLaunching	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationDidFinishLaunching( application: UIApplication ); message 'applicationD/;"	p
applicationDidReceiveMemoryWarning	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationDidReceiveMemoryWarning( application: UIApplication ); message 'applica/;"	p
applicationWillEnterForeground	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationWillEnterForeground( application: UIApplication ); message 'application/;"	p
applicationWillResignActive	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationWillResignActive( application: UIApplication ); message 'applicationWil/;"	p
applicationWillTerminate	Engines/ZenGL/src/zgl_application.pas	/^    procedure applicationWillTerminate( application: UIApplication ); message 'applicationWillTe/;"	p
applyImpulse	Engines/ZenGL/extra/zglChipmunk.pas	/^    applyImpulse : cpConstraintApplyImpulseFunction;$/;"	f
ar	Engines/MondoZenGL/MondoZenGL.pas	/^  TMZTextureEffectProc = procedure(var Data: Pointer; Width, Height: Word);$/;"	p
ar	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_clear          : function(var vf: OggVorbis_File): cint; cdecl;$/;"	f
ar	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_info           : function(var vf: OggVorbis_File; link: cint): pvorbis_info; cdecl;$/;"	f
ar	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_pcm_seek       : function(var vf: OggVorbis_File; pos: cint64): cint; cdecl;$/;"	f
ar	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_pcm_total      : function(var vf: OggVorbis_File; i: cint): ogg_int64_t; cdecl;$/;"	f
ar	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_read           : function(var vf: OggVorbis_File; buffer: pointer; length: cint; {$IFDEF /;"	f
ar	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_time_seek      : function(var vf: OggVorbis_File; {$IFDEF USE_VORBIS} time: double {$ELSE/;"	f
aram	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alListenerfv           : procedure(param: LongInt; const values: PSingle); cdecl;$/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterApplyCachedImpulse : procedure( arb : PcpArbiter ); cdecl;$/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterApplyImpulse : procedure( arb : PcpArbiter; eCoef : cpFloat ); cdecl;$/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterIgnore : procedure( arb : PcpArbiter ); cdecl;$/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterPreStep : procedure( arb : PcpArbiter; dt_inv : cpFloat ); cdecl;$/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterTotalImpulse : function( arb : PcpArbiter ) : cpVect; cdecl;$/;"	f
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterTotalImpulseWithFriction : function( arb : PcpArbiter ) : cpVect; cdecl;$/;"	f
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterUpdate : procedure( arb : PcpArbiter; contacts : PcpContact; numContacts : Integer; h/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpCollisionPostSolveFunc = procedure( arb : PcpArbiter; space : PcpSpace; data : Pointer ); cd/;"	p
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpCollisionPreSolveFunc = function( arb : PcpArbiter; space : PcpSpace; data : Pointer ) : cpB/;"	f
arb	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpCollisionSeparateFunc = procedure( arb : PcpArbiter; space : PcpSpace; data : Pointer ); cde/;"	p
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glBindFramebuffer: procedure(target: GLenum; framebuffer: GLuint); stdcall;$/;"	p
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glBindRenderbuffer: procedure(target: GLenum; renderbuffer: GLuint); stdcall;$/;"	p
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glCheckFramebufferStatus: function(target: GLenum): GLenum; stdcall;$/;"	f
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glCompressedTexImage2D : procedure(target: GLenum; level, internalformat: GLint; width, height/;"	p
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glFramebufferRenderbuffer: procedure(target: GLenum; attachment: GLenum; renderbuffertarget: G/;"	p
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glFramebufferTexture2D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; textu/;"	p
arget	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glRenderbufferStorage: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; heigh/;"	p
asprite2d_Draw	Engines/ZenGL/src/zgl_sprite_2d.pas	/^procedure asprite2d_Draw( Texture : zglPTexture; X, Y, W, H, Angle : Single; Frame : Word; Alpha/;"	p
ata	Engines/ZenGL/extra/zglModPlug.pas	/^  ModPlug_Load      : function(data: pointer; size: longint): PModPlugFile; cdecl;$/;"	f
atasource	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ov_open_callbacks : function(datasource: pointer; out vf: OggVorbis_File; initial: pointer; /;"	f
atasource	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  close_func = function(datasource: pointer): cint; cdecl;$/;"	f
atasource	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  seek_func  = function(datasource: pointer; offset: ogg_int64_t; whence: cint): cint; cdecl;$/;"	f
atasource	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  tell_func  = function(datasource: pointer): clong; cdecl;$/;"	f
batch2d_Begin	Engines/ZenGL/src/zgl_render_2d.pas	/^procedure batch2d_Begin;$/;"	p
batch2d_Check	Engines/ZenGL/src/zgl_render_2d.pas	/^function  batch2d_Check( Mode, FX : LongWord; Texture : zglPTexture ) : Boolean;$/;"	f
batch2d_Check	Engines/ZenGL/src/zgl_render_2d.pas	/^function batch2d_Check( Mode, FX : LongWord; Texture : zglPTexture ) : Boolean;$/;"	f
batch2d_End	Engines/ZenGL/src/zgl_render_2d.pas	/^procedure batch2d_End;$/;"	p
batch2d_Flush	Engines/ZenGL/src/zgl_render_2d.pas	/^procedure batch2d_Flush;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyActivate : procedure( body : PcpBody ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyApplyForce : procedure( body : PcpBody; f : cpVect; r : cpVect ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyDestroy : procedure( body : PcpBody ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyFree : procedure( body : PcpBody ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyInit : function( body : PcpBody; m : cpFloat; i : cpFloat ) : PcpBody; cdecl;$/;"	f
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyPositionFunc = procedure( body : PcpBody; dt : cpFloat ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyResetForces : procedure( body : PcpBody ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodySetAngle : procedure( body : PcpBody; a : cpFloat ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodySetMass : procedure( body : PcpBody; m : cpFloat ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodySetMoment : procedure( body : PcpBody; i : cpFloat ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodySleep : procedure( body : PcpBody ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodySlew : procedure( body : PcpBody; pos : cpVect; dt : cpFloat ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyUpdatePosition : procedure( body : PcpBody; dt : cpFloat ); cdecl;$/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyUpdateVelocity : procedure( body : PcpBody; gravity : cpVect; damping : cpFloat; dt : cp/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyVelocityFunc = procedure( body : PcpBody; gravity : cpVect; damping : cpFloat; dt : cpFl/;"	p
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBoxShapeNew : function( body : PcpBody; width : cpFloat; height : cpFloat ) : PcpShape; cdec/;"	f
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpCircleShapeNew : function( body : PcpBody; radius : cpFloat; offset : cpVect ) : PcpShape; c/;"	f
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPolyShapeNew : function( body : PcpBody; numVerts : Integer; verts : PcpVect; offset : cpVec/;"	f
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSegmentShapeNew : function( body : PcpBody; a : cpVect; b : cpVect; radius : cpFloat ) : Pcp/;"	f
body	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceBodyIterator = procedure( body : PcpBody; data : Pointer ); cdecl;$/;"	p
buffer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglDestroyPBuffer : function(pbuffer:TAGLPbuffer):GLboolean;cdecl;$/;"	f
buffer_ReadData	Engines/ZenGL/src/zgl_video_theora.pas	/^function buffer_ReadData( var TheoraData : zglTTheoraData; Size : LongWord = 4096 ) : LongWord;$/;"	f
buffer_Seek	Engines/ZenGL/src/zgl_video_theora.pas	/^function buffer_Seek( var TheoraData : zglTTheoraData; Offset, Mode : Integer ) : LongWord;$/;"	f
cam2d_Get	Engines/ZenGL/src/zgl_camera_2d.pas	/^function  cam2d_Get : zglPCamera2D;$/;"	f
cam2d_Get	Engines/ZenGL/src/zgl_camera_2d.pas	/^function cam2d_Get : zglPCamera2D;$/;"	f
cam2d_Init	Engines/ZenGL/src/zgl_camera_2d.pas	/^procedure cam2d_Init( out Camera : zglTCamera2D );$/;"	p
cam2d_Set	Engines/ZenGL/src/zgl_camera_2d.pas	/^procedure cam2d_Set( Camera : zglPCamera2D );$/;"	p
cdecl	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpResetShapeIdCounter : procedure; cdecl;$/;"	p
cgrid2d_Draw	Engines/ZenGL/src/zgl_grid_2d.pas	/^procedure cgrid2d_Draw( Texture : zglPTexture; X, Y : Single; Grid : zglPGrid2D; const CutRect :/;"	p
circle	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpCircleShapeInit : function( circle : PcpCircleShape; body : PcpBody; radius : cpFloat; offse/;"	f
clearerr	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure clearerr; cdecl; external 'msvcrt.dll';$/;"	p
clldim	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashNew : function( clldim : cpFloat; cells : Integer; bbfunc : cpSpaceHashBBFunc ) : P/;"	f
col2d_Circle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_Circle( const Circle1, Circle2 : zglTCircle ) : Boolean;$/;"	f
col2d_CircleInCircle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_CircleInCircle( const Circle1, Circle2 : zglTCircle ) : Boolean;$/;"	f
col2d_CircleInRect	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_CircleInRect( const Circle : zglTCircle; const Rect : zglTRect ) : Boolean;$/;"	f
col2d_ClipRect	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_ClipRect( const Rect1, Rect2 : zglTRect ) : zglTRect;$/;"	f
col2d_Line	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_Line( const A, B : zglTLine; ColPoint : zglPPoint2D ) : Boolean;$/;"	f
col2d_LineVsCircle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_LineVsCircle( const Line : zglTLine; const Circle : zglTCircle ) : Boolean;$/;"	f
col2d_LineVsRect	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_LineVsRect( const Line : zglTLine; const Rect : zglTRect ) : Boolean;$/;"	f
col2d_PointInCircle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_PointInCircle( X, Y : Single; const Circle : zglTCircle ) : Boolean;$/;"	f
col2d_PointInRect	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_PointInRect( X, Y : Single; const Rect : zglTRect ) : Boolean;$/;"	f
col2d_PointInTriangle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_PointInTriangle( X, Y : Single; const P1, P2, P3 : zglTPoint2D ) : Boolean;$/;"	f
col2d_Rect	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_Rect( const Rect1, Rect2 : zglTRect ) : Boolean;$/;"	f
col2d_RectInCircle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_RectInCircle( const Rect : zglTRect; const Circle : zglTCircle ) : Boolean;$/;"	f
col2d_RectInRect	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_RectInRect( const Rect1, Rect2 : zglTRect ) : Boolean;$/;"	f
col2d_RectVsCircle	Engines/ZenGL/src/zgl_collision_2d.pas	/^function col2d_RectVsCircle( const Rect : zglTRect; const Circle : zglTCircle ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  _ini_ReadKeyStr   : function( const Section, Key : UTF8String ) : PAnsiChar;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_Clear         : procedure( const Section : UTF8String );$/;"	p
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_Del           : procedure( const Section, Key : UTF8String );$/;"	p
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_IsKey         : function( const Section, Key : UTF8String ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_IsSection     : function( const Section : UTF8String ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_ReadKeyBool   : function( const Section, Key : UTF8String ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_ReadKeyFloat  : function( const Section, Key : UTF8String ) : Single;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_ReadKeyInt    : function( const Section, Key : UTF8String ) : Integer;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_SaveToFile    : procedure( const FileName : UTF8String );$/;"	p
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_WriteKeyBool  : function( const Section, Key : UTF8String; Value : Boolean ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_WriteKeyFloat : function( const Section, Key : UTF8String; Value : Single; Digits : Intege/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_WriteKeyInt   : function( const Section, Key : UTF8String; Value : Integer ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  ini_WriteKeyStr   : function( const Section, Key, Value : UTF8String ) : Boolean;$/;"	f
const	Engines/ZenGL/headers/zglHeader.pas	/^  log_Add : procedure( const Message : UTF8String; Timings : Boolean = TRUE );$/;"	p
const	Engines/ZenGL/headers/zglHeader.pas	/^  wnd_SetCaption : procedure( const NewCaption : UTF8String );$/;"	p
const	Engines/ZenGL/headers/zglHeader.pas	/^const$/;"	p
const	Engines/ZenGL/src/zgl_lib_theora.pas	/^    th_decode_alloc     : function( const _info : pth_info; const _setup : pth_setup_info ) : pt/;"	f
const	Engines/ZenGL/src/zgl_sound.pas	/^  zglTSoundFileLoader = procedure( const FileName : UTF8String; out Data : PByteArray; out Size,/;"	p
const	Engines/ZenGL/src/zgl_sound.pas	/^  zglTSoundMemLoader  = procedure( const Memory : zglTMemory; out Data : PByteArray; out Size, F/;"	p
const	Engines/ZenGL/src/zgl_textures.pas	/^  zglTTextureFileLoader = procedure( const FileName : UTF8String; out pData : PByteArray; out W,/;"	p
const	Engines/ZenGL/src/zgl_textures.pas	/^  zglTTextureMemLoader  = procedure( const Memory : zglTMemory; out pData : PByteArray; out W, H/;"	p
constraint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpConstraintDestroy : procedure( constraint : PcpConstraint ); cdecl;$/;"	p
constraint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpConstraintFree : procedure( constraint : PcpConstraint ); cdecl;$/;"	p
constraint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGrooveJointSetGrooveA : procedure( constraint : PcpConstraint; value : cpVect ); cdecl;$/;"	p
constraint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGrooveJointSetGrooveB : procedure( constraint : PcpConstraint; value : cpVect ); cdecl;$/;"	p
cpApplyDampedSpring	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpApplyDampedSpring( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect; rle/;"	p
cpArbiterApplyCachedImpulse	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArbiterApplyCachedImpulse( arb : PcpArbiter ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} ex/;"	p
cpArbiterApplyImpulse	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArbiterApplyImpulse( arb : PcpArbiter; eCoef : cpFloat ); cdecl;{$IFDEF USE_CHIPMU/;"	p
cpArbiterGetBodies	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpArbiterGetBodies( arb : PcpArbiter; a : PPcpBody; b : PPcpBody );$/;"	p
cpArbiterGetNormal	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpArbiterGetNormal( arb : PcpArbiter; i : Integer ) : cpVect;$/;"	f
cpArbiterGetPoint	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpArbiterGetPoint( arb : PcpArbiter; i : Integer ) : cpVect;$/;"	f
cpArbiterGetShapes	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpArbiterGetShapes( arb : PcpArbiter; a : PPcpShape; b : PPcpShape );$/;"	p
cpArbiterIgnore	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArbiterIgnore( arb : PcpArbiter ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libCh/;"	p
cpArbiterInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArbiterInit : function( arb : PcpArbiter; a : PcpShape; b : PcpShape ) : PcpArbiter; cdecl;$/;"	f
cpArbiterInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArbiterInit( arb : PcpArbiter; a : PcpShape; b : PcpShape ) : PcpArbiter; cdecl;{$I/;"	f
cpArbiterIsFirstContact	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpArbiterIsFirstContact( arb : PcpArbiter ) : cpBool;$/;"	f
cpArbiterPreStep	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArbiterPreStep( arb : PcpArbiter; dt_inv : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK_L/;"	p
cpArbiterTotalImpulse	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArbiterTotalImpulse( arb : PcpArbiter ) : cpVect; cdecl;{$IFDEF USE_CHIPMUNK_LINK} /;"	f
cpArbiterTotalImpulseWithFriction	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArbiterTotalImpulseWithFriction( arb : PcpArbiter ) : cpVect; cdecl;{$IFDEF USE_CHI/;"	f
cpArbiterUpdate	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArbiterUpdate( arb : PcpArbiter; contacts : PcpContact; numContacts : Integer; han/;"	p
cpArrayAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArrayAlloc : PcpArray; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {$ELS/;"	f
cpArrayAppend	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayAppend( arr : PcpArray; other : PcpArray ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} /;"	p
cpArrayClear	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayClear( arr : PcpArray ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmun/;"	p
cpArrayContains	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArrayContains( arr : PcpArray; ptr : Pointer ) : cpBool; cdecl;{$IFDEF USE_CHIPMUNK/;"	f
cpArrayDeleteIndex	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayDeleteIndex( arr : PcpArray; idx : Integer ); cdecl;{$IFDEF USE_CHIPMUNK_LINK/;"	p
cpArrayDeleteObj	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayDeleteObj( arr : PcpArray; obj : Pointer ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} /;"	p
cpArrayDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayDestroy( arr : PcpArray); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmu/;"	p
cpArrayEach	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayEach( arr : PcpArray; iterFunc : cpArrayIter; data : Pointer ); cdecl;{$IFDEF/;"	p
cpArrayFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayFree( arr : PcpArray ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk/;"	p
cpArrayInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArrayInit( arr : PcpArray; size : Integer ) : PcpArray; cdecl;{$IFDEF USE_CHIPMUNK_/;"	f
cpArrayNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArrayNew( size : Integer ) : PcpArray; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external li/;"	f
cpArrayPop	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpArrayPop( arr : PcpArray ) : Pointer; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external lib/;"	f
cpArrayPush	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpArrayPush( arr : PcpArray; _object : Pointer ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} e/;"	p
cpBBClampVect	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBBClampVect( bb : cpBB; v : cpVect ) : cpVect; cdecl;{$IFDEF USE_CHIPMUNK_LINK} ext/;"	f
cpBBNew	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBBNew( l : cpFloat; b : cpFloat; r : cpFloat; t : cpFloat ) : cpBB;$/;"	f
cpBBWrapVect	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBBWrapVect( bb : cpBB; v : cpVect ) : cpVect; cdecl;{$IFDEF USE_CHIPMUNK_LINK} exte/;"	f
cpBBcontainsBB	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBBcontainsBB( bb : cpBB; other : cpBB ) : cpBool;$/;"	f
cpBBcontainsVect	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBBcontainsVect( bb : cpBB; v : cpVect ) : cpBool;$/;"	f
cpBBexpand	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBBexpand( bb : cpBB; v : cpVect ) : cpBB;$/;"	f
cpBBintersects	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBBintersects( a : cpBB; b : cpBB ) : cpBool;$/;"	f
cpBBmerge	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBBmerge( a : cpBB; b : cpBB ) : cpBB;$/;"	f
cpBodyActivate	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyActivate( body : PcpBody ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipm/;"	p
cpBodyAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBodyAlloc : PcpBody; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {$ELSE}/;"	f
cpBodyApplyForce	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyApplyForce( body : PcpBody; f : cpVect; r : cpVect ); cdecl;{$IFDEF USE_CHIPMU/;"	p
cpBodyApplyImpulse	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpBodyApplyImpulse( body : PcpBody; j : cpVect; r : cpVect );$/;"	p
cpBodyDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyDestroy( body : PcpBody ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmu/;"	p
cpBodyFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyFree( body : PcpBody ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk;/;"	p
cpBodyInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBodyInit( body : PcpBody; m : cpFloat; i : cpFloat ) : PcpBody; cdecl;{$IFDEF USE_C/;"	f
cpBodyIsRogue	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBodyIsRogue( body : PcpBody ) : cpBool;$/;"	f
cpBodyIsSleeping	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBodyIsSleeping( body : PcpBody ) : cpBool;$/;"	f
cpBodyKineticEnergy	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBodyKineticEnergy( body : PcpBody ) : cpFloat;$/;"	f
cpBodyLocal2World	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBodyLocal2World( body : PcpBody; v : cpVect ) : cpVect;$/;"	f
cpBodyNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBodyNew( m : cpFloat; i : cpFloat ) : PcpBody; cdecl;{$IFDEF USE_CHIPMUNK_LINK} ext/;"	f
cpBodyResetForces	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyResetForces( body : PcpBody ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libCh/;"	p
cpBodySetAngle	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodySetAngle( body : PcpBody; a : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} exte/;"	p
cpBodySetMass	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodySetMass( body : PcpBody; m : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} exter/;"	p
cpBodySetMoment	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodySetMoment( body : PcpBody; i : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} ext/;"	p
cpBodySleep	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodySleep( body : PcpBody ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk/;"	p
cpBodySlew	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodySlew( body : PcpBody; pos : cpVect; dt : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK/;"	p
cpBodyUpdatePosition	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyUpdatePosition( body : PcpBody; dt : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK_LIN/;"	p
cpBodyUpdateVelocity	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpBodyUpdateVelocity( body : PcpBody; gravity : cpVect; damping : cpFloat; dt : cpFl/;"	p
cpBodyWorld2Local	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpBodyWorld2Local( body : PcpBody; v : cpVect ) : cpVect;$/;"	f
cpBoxShapeInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBoxShapeInit( poly : PcpPolyShape; body : PcpBody; width : cpFloat; height : cpFloa/;"	f
cpBoxShapeNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpBoxShapeNew( body : PcpBody; width : cpFloat; height : cpFloat ) : PcpShape; cdecl;/;"	f
cpCircleShapeAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpCircleShapeAlloc : cpCircleShape; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChip/;"	f
cpCircleShapeInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpCircleShapeInit( circle : PcpCircleShape; body : PcpBody; radius : cpFloat; offset /;"	f
cpCircleShapeNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpCircleShapeNew( body : PcpBody; radius : cpFloat; offset : cpVect ) : PcpShape; cde/;"	f
cpCollideShapes	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpCollideShapes( a : PcpShape; b : PcpShape; arr : PcpContact ) : Integer; cdecl;{$IF/;"	f
cpConstraintActivateBodies	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpConstraintActivateBodies( constraint : PcpConstraint );$/;"	p
cpConstraintDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpConstraintDestroy( constraint : PcpConstraint ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} /;"	p
cpConstraintFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpConstraintFree( constraint : PcpConstraint ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} ext/;"	p
cpConstraintGetImpulse	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpConstraintGetImpulse( constraint : PcpConstraint ) : cpFloat;$/;"	f
cpContactInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpContactInit( con : PcpContact; p : cpVect; n : cpVect; dist : cpFloat; hasg : cpHas/;"	f
cpDampedRotarySpringAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpDampedRotarySpringAlloc : PcpDampedRotarySpring; cdecl;{$IFDEF USE_CHIPMUNK_LINK} e/;"	f
cpDampedRotarySpringInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpDampedRotarySpringInit( joint : PcpDampedRotarySpring; a : PcpBody; b : PcpBody; re/;"	f
cpDampedRotarySpringNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpDampedRotarySpringNew( a : PcpBody; b : PcpBody; restAngle : cpFloat; stiffness : c/;"	f
cpDampedSpringAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpDampedSpringAlloc : PcpDampedSpring; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libC/;"	f
cpDampedSpringInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpDampedSpringInit( joint : PcpDampedSpring; a : PcpBody; b : PcpBody; anchr1 : cpVec/;"	f
cpDampedSpringNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpDampedSpringNew( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect; restLe/;"	f
cpDrawCollision	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpDrawCollision( ptr : pointer; data : pointer ); cdecl;$/;"	p
cpDrawShape	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpDrawShape( obj : pointer; data : pointer ); cdecl;$/;"	p
cpDrawSpace	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpDrawSpace( space : PcpSpace; DrawCollisions : Boolean );$/;"	p
cpDrawSpace	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpDrawSpace;$/;"	p
cpFree	Engines/ZenGL/extra/zglChipmunk.pas	/^procedure cpFree;$/;"	p
cpGearJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpGearJointAlloc : PcpGearJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmun/;"	f
cpGearJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpGearJointInit( joint : PcpGearJoint; a : PcpBody; b : PcpBody; phase : cpFloat; rat/;"	f
cpGearJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpGearJointNew( a : PcpBody; b : PcpBody; phase : cpFloat; ratio : cpFloat ) : PcpCon/;"	f
cpGrooveJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpGrooveJointAlloc : PcpGrooveJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChi/;"	f
cpGrooveJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpGrooveJointInit( joint : PcpGrooveJoint; a : PcpBody; b : PcpBody; groove_a : cpVec/;"	f
cpGrooveJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpGrooveJointNew( a : PcpBody; b : PcpBody; groove_a : cpVect; groove_b : cpVect; anc/;"	f
cpGrooveJointSetGrooveA	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpGrooveJointSetGrooveA( constraint : PcpConstraint; value : cpVect ); cdecl;{$IFDEF/;"	p
cpGrooveJointSetGrooveB	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpGrooveJointSetGrooveB( constraint : PcpConstraint; value : cpVect ); cdecl;{$IFDEF/;"	p
cpHashSetAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpHashSetAlloc : PcpHashSet; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {/;"	f
cpHashSetDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpHashSetDestroy( _set : PcpHashSet ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external lib/;"	p
cpHashSetEach	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpHashSetEach( _set : PcpHashSet; func : cpHashSetIterFunc; data : Pointer ); cdecl;/;"	p
cpHashSetFilter	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpHashSetFilter( _set : PcpHashSet; func : cpHashSetIterFunc; data : Pointer ); cdec/;"	p
cpHashSetFind	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpHashSetFind( _set : PcpHashSet; hash : cpHashValue; ptr : Pointer ) : Pointer; cdec/;"	f
cpHashSetFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpHashSetFree( _set : PcpHashSet ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChi/;"	p
cpHashSetInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpHashSetInit( _set : PcpHashSet; size : Integer; eqlFunc : cpHashSetEqlFunc; trans :/;"	f
cpHashSetInsert	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpHashSetInsert( _set : PcpHashSet; hash : cpHashValue; ptr : Pointer; data : Pointer/;"	f
cpHashSetNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpHashSetNew( size : Integer; eqlFunc : cpHashSetEqlFunc; trans : cpHashSetTransFunc /;"	f
cpHashSetRemove	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpHashSetRemove( _set : PcpHashSet; hash : cpHashValue; ptr : Pointer ) : Pointer; cd/;"	f
cpInitChipmunk	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpInitChipmunk; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {$ELSE} exter/;"	p
cpLoad	Engines/ZenGL/extra/zglChipmunk.pas	/^function  cpLoad( LibraryName : AnsiString; Error : Boolean = TRUE ) : Boolean;$/;"	f
cpLoad	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpLoad( LibraryName : AnsiString; Error : Boolean = TRUE ) : Boolean;$/;"	f
cpMomentForBox	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpMomentForBox( m : cpFloat; width : cpFloat; height : cpFloat ) : cpFloat; cdecl;{$I/;"	f
cpMomentForCircle	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpMomentForCircle( m : cpFloat; r1 : cpFloat; r2 : cpFloat; offset : cpVect ) : cpFlo/;"	f
cpMomentForPoly	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpMomentForPoly( m : cpFloat; numVerts : Integer; verts : PcpVect; offset : cpVect ) /;"	f
cpMomentForSegment	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpMomentForSegment( m : cpFloat; a : cpVect; b : cpVect ) : cpFloat; cdecl;{$IFDEF US/;"	f
cpPinJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPinJointAlloc : PcpPinJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk;/;"	f
cpPinJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPinJointInit( joint : PcpPinJoint; a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr/;"	f
cpPinJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPinJointNew( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect ) : PcpCons/;"	f
cpPivotJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPivotJointAlloc : PcpPivotJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipm/;"	f
cpPivotJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPivotJointInit( joint : PcpPivotJoint; a : PcpBody; b : PcpBody; anchr1 : cpVect; a/;"	f
cpPivotJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPivotJointNew( a : PcpBody; b : PcpBody; pivot : cpVect ) : PcpConstraint; cdecl;{$/;"	f
cpPivotJointNew2	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPivotJointNew2( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect ) : PcpC/;"	f
cpPolyShapeAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPolyShapeAlloc : PcpPolyShape; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmun/;"	f
cpPolyShapeContainsVert	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpPolyShapeContainsVert( poly : PcpPolyShape; v : cpVect ) : cpBool;$/;"	f
cpPolyShapeContainsVertPartial	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpPolyShapeContainsVertPartial( poly : PcpPolyShape; v : cpVect; n : cpVect ) : cpBool;$/;"	f
cpPolyShapeGetNumVerts	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPolyShapeGetNumVerts( shape : PcpShape ) : Integer; cdecl;{$IFDEF USE_CHIPMUNK_LINK/;"	f
cpPolyShapeGetVert	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPolyShapeGetVert( shape : PcpShape; idx : Integer ) : cpVect; cdecl;{$IFDEF USE_CHI/;"	f
cpPolyShapeInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPolyShapeInit ( poly : PcpPolyShape; body : PcpBody; numVerts : Integer; verts : Pc/;"	f
cpPolyShapeNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPolyShapeNew( body : PcpBody; numVerts : Integer; verts : PcpVect; offset : cpVect /;"	f
cpPolyShapeValueOnAxis	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpPolyShapeValueOnAxis( poly : PcpPolyShape; n : cpVect; d : cpFloat ) : cpFloat;$/;"	f
cpPolyValidate	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpPolyValidate( verts : PcpVect; numVerts : Integer ) : cpBool; cdecl;{$IFDEF USE_CHI/;"	f
cpRatchetJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpRatchetJointAlloc : PcpRatchetJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libC/;"	f
cpRatchetJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpRatchetJointInit( joint : PcpRatchetJoint; a : PcpBody; b : PcpBody; phase : cpFloa/;"	f
cpRatchetJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpRatchetJointNew( a : PcpBody; b : PcpBody; phase : cpFloat; ratchet : cpFloat ) : P/;"	f
cpResetShapeIdCounter	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpResetShapeIdCounter; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {$ELSE/;"	p
cpRotaryLimitJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpRotaryLimitJointAlloc : PcpRotaryLimitJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} exter/;"	f
cpRotaryLimitJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpRotaryLimitJointInit( joint : PcpRotaryLimitJoint; a : PcpBody; b : PcpBody; min : /;"	f
cpRotaryLimitJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpRotaryLimitJointNew( a : PcpBody; b : PcpBody; min : cpFloat; max : cpFloat ) : Pcp/;"	f
cpSegmentQueryHitDist	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpSegmentQueryHitDist( start : cpVect; _end : cpVect; info : cpSegmentQueryInfo ) : cpF/;"	f
cpSegmentQueryHitPoint	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpSegmentQueryHitPoint( start : cpVect; _end : cpVect; info : cpSegmentQueryInfo ) : cp/;"	f
cpSegmentShapeAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSegmentShapeAlloc : PcpSegmentShape; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libC/;"	f
cpSegmentShapeInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSegmentShapeInit( seg : PcpSegmentShape; body : PcpBody; a : cpVect; b : cpVect; ra/;"	f
cpSegmentShapeNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSegmentShapeNew( body : PcpBody; a : cpVect; b : cpVect; radius : cpFloat ) : PcpSh/;"	f
cpShapeCacheBB	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpShapeCacheBB( shape : PcpShape ) : cpBB; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external /;"	f
cpShapeDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpShapeDestroy( shape : PcpShape ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChi/;"	p
cpShapeFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpShapeFree( shape : PcpShape ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmu/;"	p
cpShapeInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpShapeInit( shape : PcpShape; klass : PcpShapeClass; body : PcpBody ) : PcpShape; cd/;"	f
cpShapePointQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpShapePointQuery( shape : PcpShape; p : cpVect ) : cpBool; cdecl;{$IFDEF USE_CHIPMUN/;"	f
cpShapeSegmentQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpShapeSegmentQuery( shape : PcpShape; a : cpVect; b : cpVect; info : PcpSegmentQuery/;"	f
cpSimpleMotorAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSimpleMotorAlloc : PcpSimpleMotor; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChi/;"	f
cpSimpleMotorInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSimpleMotorInit( joint : PcpSimpleMotor; a : PcpBody; b : PcpBody; rate : cpFloat )/;"	f
cpSimpleMotorNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSimpleMotorNew( a : PcpBody; b : PcpBody; rate : cpFloat ) : PcpConstraint; cdecl;{/;"	f
cpSlideJointAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSlideJointAlloc : PcpSlideJoint; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipm/;"	f
cpSlideJointInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSlideJointInit( joint : PcpSlideJoint; a : PcpBody; b : PcpBody; anchr1 : cpVect; a/;"	f
cpSlideJointNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSlideJointNew( a : PcpBody; b : PcpBody; anchr1 : cpVect; anchr2 : cpVect; min : cp/;"	f
cpSpaceAddBody	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceAddBody( space : PcpSpace; body : PcpBody ) : PcpBody; cdecl;{$IFDEF USE_CHIPM/;"	f
cpSpaceAddCollisionHandler	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceAddCollisionHandler( space : PcpSpace; a : cpCollisionType; b : cpCollisionTy/;"	p
cpSpaceAddConstraint	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceAddConstraint( space : PcpSpace; constraint : PcpConstraint ) : PcpConstraint;/;"	f
cpSpaceAddPostStepCallback	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceAddPostStepCallback( space : PcpSpace; func : cpPostStepFunc; obj : Pointer; /;"	p
cpSpaceAddShape	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceAddShape( space : PcpSpace; shape : PcpShape ) : PcpShape; cdecl;{$IFDEF USE_C/;"	f
cpSpaceAddStaticShape	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceAddStaticShape( space : PcpSpace; shape : PcpShape ) : PcpShape; cdecl;{$IFDEF/;"	f
cpSpaceAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceAlloc : PcpSpace; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {$ELS/;"	f
cpSpaceBBQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceBBQuery : procedure( space : PcpSpace; bb : cpBB; layers : cpLayers; group : cpGroup; f/;"	f
cpSpaceBBQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceBBQuery( space : PcpSpace; bb : cpBB; layers : cpLayers; group : cpGroup; fun/;"	p
cpSpaceDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceDestroy( space : PcpSpace ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChi/;"	p
cpSpaceEachBody	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceEachBody( space : PcpSpace; func : cpSpaceBodyIterator; data : Pointer ); cde/;"	p
cpSpaceFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceFree( space : PcpSpace ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmu/;"	p
cpSpaceFreeChildren	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceFreeChildren( space : PcpSpace ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external l/;"	p
cpSpaceHashAlloc	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceHashAlloc : PcpSpaceHash; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmun/;"	f
cpSpaceHashDestroy	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashDestroy( hash : PcpSpaceHash ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external/;"	p
cpSpaceHashEach	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashEach( hash : PcpSpaceHash; func : cpSpaceHashIterator; data : Pointer ); /;"	p
cpSpaceHashFree	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashFree( hash : PcpSpaceHash ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external li/;"	p
cpSpaceHashInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceHashInit( hash : PcpSpaceHash; clldim : cpFloat; cells : Integer; bbfunc : cpS/;"	f
cpSpaceHashInsert	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashInsert( hash : PcpSpaceHash; obj : Pointer; id : cpHashValue; _deprecated/;"	p
cpSpaceHashNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceHashNew( clldim : cpFloat; cells : Integer; bbfunc : cpSpaceHashBBFunc ) : Pcp/;"	f
cpSpaceHashPointQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashPointQuery( hash : PcpSpaceHash; point : cpVect; func : cpSpaceHashQueryF/;"	p
cpSpaceHashQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashQuery( hash : PcpSpaceHash; obj : Pointer; bb : cpBB; func : cpSpaceHashQ/;"	p
cpSpaceHashQueryInsert	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashQueryInsert( hash : PcpSpaceHash; obj : Pointer; bb : cpBB; func : cpSpac/;"	p
cpSpaceHashQueryRehash	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashQueryRehash( hash : PcpSpaceHash; func : cpSpaceHashQueryFunc; data : Poi/;"	p
cpSpaceHashRehash	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashRehash( hash : PcpSpaceHash ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external /;"	p
cpSpaceHashRehashObject	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashRehashObject( hash : PcpSpaceHash; obj : Pointer; id : cpHashValue ); cde/;"	p
cpSpaceHashRemove	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashRemove( hash : PcpSpaceHash; obj : Pointer; id : cpHashValue ); cdecl;{$I/;"	p
cpSpaceHashResize	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashResize( hash : PcpSpaceHash; celldim : cpFloat; numcells : Integer ); cde/;"	p
cpSpaceHashSegmentQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceHashSegmentQuery( hash : PcpSpaceHash; obj : Pointer; a : cpVect; b : cpVect;/;"	p
cpSpaceInit	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceInit( space : PcpSpace ) : PcpSpace; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external/;"	f
cpSpaceNew	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceNew : PcpSpace; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipmunk; {$ELSE}/;"	f
cpSpacePointQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpacePointQuery : procedure( space : PcpSpace; point : cpVect; layers : cpLayers; group : cp/;"	f
cpSpacePointQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpacePointQuery( space : PcpSpace; point : cpVect; layers : cpLayers; group : cpGr/;"	p
cpSpacePointQueryFirst	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpacePointQueryFirst( space : PcpSpace; point : cpVect; layers : cpLayers; group : /;"	f
cpSpaceRehashShape	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRehashShape( space : PcpSpace; shape : PcpShape ); cdecl;{$IFDEF USE_CHIPMUNK/;"	p
cpSpaceRehashStatic	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRehashStatic( space : PcpSpace ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} external l/;"	p
cpSpaceRemoveBody	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRemoveBody( space : PcpSpace; body : PcpBody ); cdecl;{$IFDEF USE_CHIPMUNK_LI/;"	p
cpSpaceRemoveCollisionHandler	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRemoveCollisionHandler( space : PcpSpace; a : cpCollisionType; b : cpCollisio/;"	p
cpSpaceRemoveConstraint	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRemoveConstraint( space : PcpSpace; constraint : PcpConstraint );  cdecl;{$IF/;"	p
cpSpaceRemoveShape	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRemoveShape( space : PcpSpace; shape : PcpShape ); cdecl;{$IFDEF USE_CHIPMUNK/;"	p
cpSpaceRemoveStaticShape	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceRemoveStaticShape( space : PcpSpace; shape : PcpShape ); cdecl;{$IFDEF USE_CH/;"	p
cpSpaceResizeActiveHash	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceResizeActiveHash( space : PcpSpace; dim : cpFloat; count : Integer ); cdecl;{/;"	p
cpSpaceResizeStaticHash	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceResizeStaticHash( space : PcpSpace; dim : cpFloat; count : Integer ); cdecl;{/;"	p
cpSpaceSegmentQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceSegmentQuery : procedure( space : PcpSpace; start : cpVect; _end : cpVect; layers : cpL/;"	f
cpSpaceSegmentQuery	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceSegmentQuery( space : PcpSpace; start : cpVect; _end : cpVect; layers : cpLay/;"	p
cpSpaceSegmentQueryFirst	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpSpaceSegmentQueryFirst( space : PcpSpace; start : cpVect; _end : cpVect; layers : c/;"	f
cpSpaceSetDefaultCollisionHandler	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceSetDefaultCollisionHandler( space : PcpSpace; _begin : cpCollisionBeginFunc; /;"	p
cpSpaceStep	Engines/ZenGL/extra/zglChipmunk.pas	/^  procedure cpSpaceStep( space : PcpSpace; dt : cpFloat ); cdecl;{$IFDEF USE_CHIPMUNK_LINK} exte/;"	p
cpfmax	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpfmax( a, b : cpFloat ) : cpFloat;$/;"	f
cpfmin	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpfmin( a, b : cpFloat ) : cpFloat;$/;"	f
cpv	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpv( x : cpFloat; y : cpFloat ) : cpVect;$/;"	f
cpvadd	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvadd( v1 : cpVect; v2 : cpVect ) : cpVect;$/;"	f
cpvclamp	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvclamp( v : cpVect; len : cpFloat ) : cpVect;$/;"	f
cpvcross	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvcross( v1 : cpVect; v2 : cpVect ) : cpFloat;$/;"	f
cpvdist	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvdist( v1 : cpVect; v2 : cpVect ) : cpFloat;$/;"	f
cpvdistsq	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvdistsq( v1 : cpVect; v2 : cpVect ) : cpFloat;$/;"	f
cpvdot	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvdot( v1 : cpVect; v2 : cpVect ) : cpFloat;$/;"	f
cpveql	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpveql( v1 : cpVect; v2 : cpVect ) : cpBool;$/;"	f
cpvforangle	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpvforangle( a : cpFloat ) : cpVect; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChi/;"	f
cpvlength	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpvlength( v : cpVect ) : cpFloat; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChipm/;"	f
cpvlengthsq	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvlengthsq( v : cpVect ) : cpFloat;$/;"	f
cpvlerp	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvlerp( v1 : cpVect; v2 : cpVect; t : cpFloat ) : cpVect;$/;"	f
cpvlerpconst	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvlerpconst( v1 : cpVect; v2 : cpVect; d : cpFloat ) : cpVect;$/;"	f
cpvmult	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvmult( v : cpVect; s : cpFloat ) : cpVect;$/;"	f
cpvnear	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvnear( v1 : cpVect; v2 : cpVect; dist : cpFloat ) : cpBool;$/;"	f
cpvneg	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvneg( v : cpVect ) : cpVect;$/;"	f
cpvnormalize	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvnormalize( v : cpVect ) : cpVect;$/;"	f
cpvnormalize_safe	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvnormalize_safe( v : cpVect ) : cpVect;$/;"	f
cpvperp	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvperp( v : cpVect ) : cpVect;$/;"	f
cpvproject	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvproject( v1 : cpVect; v2 : cpVect ) : cpVect;$/;"	f
cpvrotate	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvrotate( v1 : cpVect; v2 : cpVect ) : cpVect;$/;"	f
cpvrperp	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvrperp( v : cpVect ) : cpVect;$/;"	f
cpvslerp	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpvslerp ( v1 : cpVect; v2 : cpVect; t : cpFloat ) : cpVect; cdecl;{$IFDEF USE_CHIPMU/;"	f
cpvslerpconst	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpvslerpconst( v1 : cpVect; v2 : cpVect; a : cpFloat ) : cpVect; cdecl;{$IFDEF USE_CH/;"	f
cpvsub	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvsub( v1 : cpVect; v2 : cpVect ) : cpVect;$/;"	f
cpvtoangle	Engines/ZenGL/extra/zglChipmunk.pas	/^  function cpvtoangle( v : cpVect ) : cpFloat; cdecl;{$IFDEF USE_CHIPMUNK_LINK} external libChip/;"	f
cpvunrotate	Engines/ZenGL/extra/zglChipmunk.pas	/^function cpvunrotate( v1 : cpVect; v2 : cpVect ) : cpVect;$/;"	f
csprite2d_Draw	Engines/ZenGL/src/zgl_sprite_2d.pas	/^procedure csprite2d_Draw( Texture : zglPTexture; X, Y, W, H, Angle : Single; const CutRect : zgl/;"	p
dc	Engines/ZenGL/src/zgl_opengl_all.pas	/^  wglChoosePixelFormatARB: function(hdc: HDC; const piAttribIList: PGLint; const pfAttribFList: /;"	f
decoderRead	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function decoderRead( var VorbisFile : OggVorbis_File; Buffer : PByteArray; Bytes : LongWord; ou/;"	f
deflate	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflate : Integer; cdecl;$/;"	f
deflate	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflate : Integer;$/;"	f
deflateEnd	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateEnd : Integer; cdecl;$/;"	f
deflateEnd	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateEnd : Integer;$/;"	f
deflateEnd_fake	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateEnd_fake : Integer; cdecl; public name '_deflateEnd'; public name 'deflateEnd';$/;"	f
deflateEnd_fake	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateEnd_fake : Integer;$/;"	f
deflateInit2_	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateInit2_ : Integer; cdecl;$/;"	f
deflateInit2_	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateInit2_ : Integer;$/;"	f
deflateInit2_fake	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateInit2_fake : Integer; cdecl; public name '_deflateInit2_'; public name 'deflateI/;"	f
deflateInit2_fake	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflateInit2_fake : Integer;$/;"	f
deflate_fake	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflate_fake : Integer; cdecl; public name '_deflate'; public name 'deflate';$/;"	f
deflate_fake	Engines/ZenGL/src/zgl_lib_zip.pas	/^function deflate_fake : Integer;$/;"	f
delSpaces	Engines/ZenGL/src/zgl_ini.pas	/^function delSpaces( const str : UTF8String ) : UTF8String;$/;"	f
devs	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglChoosePixelFormat : function(gdevs:PAGLDevice; ndev:GLint; attribs:PGLint):TAGLPixelFormat;/;"	f
didMoveToSuperview	Engines/ZenGL/src/zgl_application.pas	/^    procedure didMoveToSuperview; override;$/;"	p
didRotateFromInterfaceOrientation	Engines/ZenGL/src/zgl_application.pas	/^    procedure didRotateFromInterfaceOrientation( fromInterfaceOrientation : UIInterfaceOrientati/;"	p
dlclose	Engines/ZenGL/extra/zglChipmunk.pas	/^function dlclose( Lib : Pointer) : Longint; cdecl; external 'dl';$/;"	f
dlclose	Engines/ZenGL/extra/zglChipmunk.pas	/^function dlclose( hLibModule : HMODULE ) : Boolean; stdcall; external 'kernel32.dll' name 'FreeL/;"	f
dlclose	Engines/ZenGL/src/zgl_utils.pas	/^function dlclose( Lib : Pointer) : Longint; cdecl; external 'dl';$/;"	f
dlclose	Engines/ZenGL/src/zgl_utils.pas	/^function dlclose( hLibModule : HMODULE ) : Boolean; stdcall; external 'kernel32.dll' name 'FreeL/;"	f
dlopen	Engines/ZenGL/extra/zglChipmunk.pas	/^function dlopen ( Name : PChar; Flags : longint) : Pointer; cdecl; external 'dl';$/;"	f
dlopen	Engines/ZenGL/extra/zglChipmunk.pas	/^function dlopen ( lpLibFileName : PAnsiChar) : HMODULE; stdcall; external 'kernel32.dll' name 'L/;"	f
dlopen	Engines/ZenGL/src/zgl_utils.pas	/^function dlopen ( Name : PAnsiChar; Flags : longint) : Pointer; cdecl; external 'dl';$/;"	f
dlopen	Engines/ZenGL/src/zgl_utils.pas	/^function dlopen ( lpLibFileName : PAnsiChar) : HMODULE; stdcall; external 'kernel32.dll' name 'L/;"	f
dlsym	Engines/ZenGL/extra/zglChipmunk.pas	/^function dlsym  ( Lib : Pointer; Name : Pchar) : Pointer; cdecl; external 'dl';$/;"	f
dlsym	Engines/ZenGL/extra/zglChipmunk.pas	/^function dlsym  ( hModule : HMODULE; lpProcName : PAnsiChar) : Pointer; stdcall; external 'kerne/;"	f
dlsym	Engines/ZenGL/src/zgl_utils.pas	/^function dlsym  ( Lib : Pointer; Name : PAnsiChar) : Pointer; cdecl; external 'dl';$/;"	f
dlsym	Engines/ZenGL/src/zgl_utils.pas	/^function dlsym  ( hModule : HMODULE; lpProcName : PAnsiChar) : Pointer; stdcall; external 'kerne/;"	f
dsu_CalcPos	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function  dsu_CalcPos( X, Y, Z : Single; out Volume : Single ) : Integer;$/;"	f
dsu_CalcPos	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function dsu_CalcPos( X, Y, Z : Single; out Volume : Single ) : Integer;$/;"	f
dsu_CalcVolume	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function  dsu_CalcVolume( Volume : Single ) : Integer;$/;"	f
dsu_CalcVolume	Engines/ZenGL/src/zgl_sound_dsound.pas	/^function dsu_CalcVolume( Volume : Single ) : Integer;$/;"	f
dsu_CreateBuffer	Engines/ZenGL/src/zgl_sound_dsound.pas	/^procedure dsu_CreateBuffer( var Buffer : IDirectSoundBuffer; BufferSize : LongWord; Format : Poi/;"	p
dsu_FillData	Engines/ZenGL/src/zgl_sound_dsound.pas	/^procedure dsu_FillData( var Buffer : IDirectSoundBuffer; Data : PByteArray; DataSize : LongWord;/;"	p
dup	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure dup; cdecl; external 'msvcrt.dll' name '_dup';$/;"	p
emitter2d_Add	Engines/ZenGL/src/zgl_particles_2d.pas	/^function  emitter2d_Add : zglPEmitter2D;$/;"	f
emitter2d_Add	Engines/ZenGL/src/zgl_particles_2d.pas	/^function emitter2d_Add : zglPEmitter2D;$/;"	f
emitter2d_Del	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_Del( var Emitter : zglPEmitter2D );$/;"	p
emitter2d_Draw	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_Draw( Emitter : zglPEmitter2D );$/;"	p
emitter2d_Free	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_Free( var Emitter : zglPEmitter2D );$/;"	p
emitter2d_Init	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_Init( Emitter : zglPEmitter2D );$/;"	p
emitter2d_Load	Engines/ZenGL/src/zgl_particles_2d.pas	/^function  emitter2d_Load( const FileName : UTF8String ) : zglPEmitter2D;$/;"	f
emitter2d_Load	Engines/ZenGL/src/zgl_particles_2d.pas	/^function emitter2d_Load( const FileName : UTF8String ) : zglPEmitter2D;$/;"	f
emitter2d_LoadFromFile	Engines/ZenGL/src/zgl_particles_2d.pas	/^function  emitter2d_LoadFromFile( const FileName : UTF8String ) : zglPEmitter2D;$/;"	f
emitter2d_LoadFromFile	Engines/ZenGL/src/zgl_particles_2d.pas	/^function emitter2d_LoadFromFile( const FileName : UTF8String ) : zglPEmitter2D;$/;"	f
emitter2d_LoadFromMemory	Engines/ZenGL/src/zgl_particles_2d.pas	/^function  emitter2d_LoadFromMemory( const Memory : zglTMemory ) : zglPEmitter2D;$/;"	f
emitter2d_LoadFromMemory	Engines/ZenGL/src/zgl_particles_2d.pas	/^function emitter2d_LoadFromMemory( const Memory : zglTMemory ) : zglPEmitter2D;$/;"	f
emitter2d_LoadTexture	Engines/ZenGL/src/zgl_particles_2d.pas	/^function emitter2d_LoadTexture( const FileName : UTF8String ) : zglPTexture;$/;"	f
emitter2d_Proc	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_Proc( Emitter : zglPEmitter2D; dt : Double );$/;"	p
emitter2d_RestoreAll	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_RestoreAll;$/;"	p
emitter2d_SaveToFile	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_SaveToFile( Emitter : zglPEmitter2D; const FileName : UTF8String );$/;"	p
emitter2d_Sort	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure emitter2d_Sort( Emitter : zglPEmitter2D; iLo, iHi : Integer );$/;"	p
end	Engines/ZenGL/extra/zglChipmunk.pas	/^  end;$/;"	f
enderbuffer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glIsRenderbuffer: function(renderbuffer: GLuint): GLboolean; stdcall;$/;"	f
errno	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure errno; cdecl; external 'msvcrt.dll' name '_errno';$/;"	p
evice	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alGetError             : function(device: PALCdevice): LongInt; cdecl;$/;"	f
evice	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alcCloseDevice         : function(device: PALCdevice): Boolean; cdecl;$/;"	f
evice	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alcCreateContext       : function(device: PALCdevice; const attrlist: PLongInt): PALCcontext; /;"	f
evice	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alcGetString           : function(device: PALCdevice; param: LongInt): PAnsiChar; cdecl;$/;"	f
factorRGB	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glBlendFuncSeparate: procedure(sfactorRGB: GLenum; dfactorRGB: GLenum; sfactorAlpha: GLenum; d/;"	p
fclose	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure fclose; cdecl; external 'msvcrt.dll';$/;"	p
file	Engines/ZenGL/extra/zglModPlug.pas	/^  ModPlug_GetLength : function(_file: PModPlugFile): longint; cdecl;$/;"	f
file	Engines/ZenGL/extra/zglModPlug.pas	/^  ModPlug_Read      : function(_file: PModPlugFile; buffer: pointer; size: longint): longint; cd/;"	f
file	Engines/ZenGL/extra/zglModPlug.pas	/^  ModPlug_Seek      : procedure(_file: PModPlugFile; millisecond: longint); cdecl;$/;"	p
file	Engines/ZenGL/extra/zglModPlug.pas	/^  ModPlug_Unload    : procedure(_file: PModPlugFile); cdecl;$/;"	p
file_Close	Engines/ZenGL/src/zgl_file.pas	/^procedure file_Close( var FileHandle : zglTFile );$/;"	p
file_CloseArchive	Engines/ZenGL/src/zgl_file.pas	/^procedure file_CloseArchive;$/;"	p
file_Exists	Engines/ZenGL/src/zgl_file.pas	/^function  file_Exists( const Name : UTF8String ) : Boolean;$/;"	f
file_Exists	Engines/ZenGL/src/zgl_file.pas	/^function file_Exists( const Name : UTF8String ) : Boolean;$/;"	f
file_Find	Engines/ZenGL/src/zgl_file.pas	/^procedure file_Find( const Directory : UTF8String; out List : zglTFileList; FindDir : Boolean );$/;"	p
file_Flush	Engines/ZenGL/src/zgl_file.pas	/^procedure file_Flush( FileHandle : zglTFile );$/;"	p
file_GetDirectory	Engines/ZenGL/src/zgl_file.pas	/^function  file_GetDirectory( const FileName : UTF8String ) : UTF8String;$/;"	f
file_GetDirectory	Engines/ZenGL/src/zgl_file.pas	/^function file_GetDirectory( const FileName : UTF8String ) : UTF8String;$/;"	f
file_GetExtension	Engines/ZenGL/src/zgl_file.pas	/^function  file_GetExtension( const FileName : UTF8String ) : UTF8String;$/;"	f
file_GetExtension	Engines/ZenGL/src/zgl_file.pas	/^function file_GetExtension( const FileName : UTF8String ) : UTF8String;$/;"	f
file_GetName	Engines/ZenGL/src/zgl_file.pas	/^function  file_GetName( const FileName : UTF8String ) : UTF8String;$/;"	f
file_GetName	Engines/ZenGL/src/zgl_file.pas	/^function file_GetName( const FileName : UTF8String ) : UTF8String;$/;"	f
file_GetPos	Engines/ZenGL/src/zgl_file.pas	/^function  file_GetPos( FileHandle : zglTFile ) : LongWord;$/;"	f
file_GetPos	Engines/ZenGL/src/zgl_file.pas	/^function file_GetPos( FileHandle : zglTFile ) : LongWord;$/;"	f
file_GetSize	Engines/ZenGL/src/zgl_file.pas	/^function  file_GetSize( FileHandle : zglTFile ) : LongWord;$/;"	f
file_GetSize	Engines/ZenGL/src/zgl_file.pas	/^function file_GetSize( FileHandle : zglTFile ) : LongWord;$/;"	f
file_MakeDir	Engines/ZenGL/src/zgl_file.pas	/^function  file_MakeDir( const Directory : UTF8String ) : Boolean;$/;"	f
file_MakeDir	Engines/ZenGL/src/zgl_file.pas	/^function file_MakeDir( const Directory : UTF8String ) : Boolean;$/;"	f
file_Open	Engines/ZenGL/src/zgl_file.pas	/^function  file_Open( out FileHandle : zglTFile; const FileName : UTF8String; Mode : Byte ) : Boo/;"	f
file_Open	Engines/ZenGL/src/zgl_file.pas	/^function file_Open( out FileHandle : zglTFile; const FileName : UTF8String; Mode : Byte ) : Bool/;"	f
file_OpenArchive	Engines/ZenGL/src/zgl_file.pas	/^function  file_OpenArchive( const FileName : UTF8String; const Password : UTF8String = '' ) : Bo/;"	f
file_OpenArchive	Engines/ZenGL/src/zgl_file.pas	/^function file_OpenArchive( const FileName : UTF8String; const Password : UTF8String = '' ) : Boo/;"	f
file_Read	Engines/ZenGL/src/zgl_file.pas	/^function  file_Read( FileHandle : zglTFile; var Buffer; Bytes : LongWord ) : LongWord;$/;"	f
file_Read	Engines/ZenGL/src/zgl_file.pas	/^function file_Read( FileHandle : zglTFile; var Buffer; Bytes : LongWord ) : LongWord;$/;"	f
file_Remove	Engines/ZenGL/src/zgl_file.pas	/^function  file_Remove( const Name : UTF8String ) : Boolean;$/;"	f
file_Remove	Engines/ZenGL/src/zgl_file.pas	/^function file_Remove( const Name : UTF8String ) : Boolean;$/;"	f
file_Seek	Engines/ZenGL/src/zgl_file.pas	/^function  file_Seek( FileHandle : zglTFile; Offset, Mode : Integer ) : LongWord;$/;"	f
file_Seek	Engines/ZenGL/src/zgl_file.pas	/^function file_Seek( FileHandle : zglTFile; Offset, Mode : Integer ) : LongWord;$/;"	f
file_SetPath	Engines/ZenGL/src/zgl_file.pas	/^procedure file_SetPath( const Path : UTF8String );$/;"	p
file_Write	Engines/ZenGL/src/zgl_file.pas	/^function  file_Write( FileHandle : zglTFile; const Buffer; Bytes : LongWord ) : LongWord;$/;"	f
file_Write	Engines/ZenGL/src/zgl_file.pas	/^function file_Write( FileHandle : zglTFile; const Buffer; Bytes : LongWord ) : LongWord;$/;"	f
font_Add	Engines/ZenGL/src/zgl_font.pas	/^function  font_Add : zglPFont;$/;"	f
font_Add	Engines/ZenGL/src/zgl_font.pas	/^function font_Add;$/;"	f
font_Del	Engines/ZenGL/src/zgl_font.pas	/^procedure font_Del( var Font : zglPFont );$/;"	p
font_Load	Engines/ZenGL/src/zgl_font.pas	/^procedure font_Load( var fnt : zglPFont; var fntMem : zglTMemory );$/;"	p
font_LoadFromFile	Engines/ZenGL/src/zgl_font.pas	/^function font_LoadFromFile( const FileName : UTF8String ) : zglPFont;$/;"	f
font_LoadFromMemory	Engines/ZenGL/src/zgl_font.pas	/^function font_LoadFromMemory( const Memory : zglTMemory ) : zglPFont;$/;"	f
font_RestoreFromFile	Engines/ZenGL/src/zgl_font.pas	/^procedure font_RestoreFromFile( var Font : zglPFont; const FileName : UTF8String );$/;"	p
fopen	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure fopen; cdecl; external 'msvcrt.dll';$/;"	p
for	Engines/ZenGL/extra/zglChipmunk.pas	/^  \/\/ Iterator function for iterating the bodies in a space.$/;"	f
for	Engines/ZenGL/extra/zglChipmunk.pas	/^\/\/ Convenience constructor for cpVect structs.$/;"	p
fpGetTimeOfDay	Engines/ZenGL/src/zgl_timers.pas	/^function fpGetTimeOfDay( val : PTimeVal; tzp : Pointer ) : Integer; cdecl; external 'libc' name /;"	f
fputc	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure fputc; cdecl; external 'msvcrt.dll';$/;"	p
fread	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure fread; cdecl; external 'msvcrt.dll';$/;"	p
free	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure free; cdecl; external 'msvcrt.dll';$/;"	p
fseek	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function fseek( stream : Pointer; offset : clong; origin : cint ) : cint; cdecl; external 'msv/;"	f
fstat	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure fstat; cdecl; external 'msvcrt.dll' name '_fstat';$/;"	p
ftell	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function ftell( stream : Pointer ) : clong; cdecl; external 'msvcrt.dll';$/;"	f
functions.	Engines/ZenGL/extra/zglChipmunk.pas	/^  \/\/ Basic destructor functions. (allocation functions are not shared)$/;"	p
fwrite	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure fwrite; cdecl; external 'msvcrt.dll';$/;"	p
fx2d_SetColor	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx2d_SetColor( Color : LongWord );$/;"	p
fx2d_SetRotatingPivot	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx2d_SetRotatingPivot( X, Y : Single );$/;"	p
fx2d_SetScale	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx2d_SetScale( scaleX, scaleY : Single );$/;"	p
fx2d_SetVCA	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx2d_SetVCA( c1, c2, c3, c4 : LongWord; a1, a2, a3, a4 : Byte );$/;"	p
fx2d_SetVertexes	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx2d_SetVertexes( x1, y1, x2, y2, x3, y3, x4, y4 : Single );$/;"	p
fx_SetBlendMode	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx_SetBlendMode( Mode : Byte; SeparateAlpha : Boolean = TRUE );$/;"	p
fx_SetColorMask	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx_SetColorMask( R, G, B, Alpha : Boolean );$/;"	p
fx_SetColorMode	Engines/ZenGL/src/zgl_fx.pas	/^procedure fx_SetColorMode( Mode : Byte );$/;"	p
g	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_page_bos          : function(og: pogg_page): cint; cdecl;$/;"	f
g	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_page_granulepos   : function(og: pogg_page): ogg_int64_t; cdecl;$/;"	f
g	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_page_serialno     : function(og: pogg_page): cint; cdecl;$/;"	f
get_Attributes	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_Attributes(out dwAttr: Longint): HResult; stdcall;$/;"	f
get_CurDC	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_CurDC(out dcOut: HDC): HResult; stdcall;$/;"	f
get_Handle	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_Handle(out handle: OLE_HANDLE): HResult;  stdcall;$/;"	f
get_Height	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_Height(out height: OLE_YSIZE_HIMETRIC): HResult; stdcall;$/;"	f
get_KeepOriginalFormat	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_KeepOriginalFormat(out fkeep: BOOL): HResult; stdcall;$/;"	f
get_Type	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_Type(out typ: Smallint): HResult; stdcall;$/;"	f
get_Width	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_Width(out width: OLE_XSIZE_HIMETRIC): HResult; stdcall;$/;"	f
get_hPal	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function get_hPal(out handle: OLE_HANDLE): HResult; stdcall;$/;"	f
get_yuv2bgr565_table	Engines/ZenGL/src/zgl_video_theora.pas	/^function  get_yuv2bgr565_table : pcuint32; cdecl; external;$/;"	f
getmem_f	Engines/ZenGL/src/zgl_textures_jpg.pas	/^function getmem_f( Size : Integer ) : PByte; cdecl;$/;"	f
glAlphaFunc	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glAlphaFunc(func: GLenum; ref: GLclampf); stdcall; external libGL;$/;"	p
glBegin	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glBegin(mode: GLenum); stdcall; external libGL;$/;"	p
glBindTexture	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glBindTexture(target: GLenum; texture: GLuint); stdcall; external libGL;$/;"	p
glBlendFunc	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glBlendFunc(sfactor, dfactor: GLenum); stdcall; external libGL;$/;"	p
glClear	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glClear(mask: GLbitfield); stdcall; external libGL;$/;"	p
glClearColor	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glClearColor(red, green, blue, alpha: GLclampf); stdcall; external libGL;$/;"	p
glClearDepth	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glClearDepth(depth: GLclampd); stdcall; external libGL;$/;"	p
glColor4f	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glColor4f(red, green, blue, alpha: GLfloat); stdcall; external libGL;$/;"	p
glColor4ub	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glColor4ub(red, green, blue, alpha: GLubyte); stdcall; external libGL;$/;"	p
glColor4ubv	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glColor4ubv(v: PGLubyte); stdcall; external libGL;$/;"	p
glColorMask	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glColorMask(red, green, blue, alpha: GLboolean); stdcall; external libGL;$/;"	p
glCopyTexSubImage2D	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glCopyTexSubImage2D(target: GLenum; level, xoffset, yoffset, x, y: GLint; width, hei/;"	p
glDeleteTextures	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glDeleteTextures(n: GLsizei; const textures: PGLuint); stdcall; external libGL;$/;"	p
glDepthFunc	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glDepthFunc(func: GLenum); stdcall; external libGL;$/;"	p
glDepthMask	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glDepthMask(flag: GLboolean); stdcall; external libGL;$/;"	p
glDisable	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glDisable(cap: GLenum); stdcall; external libGL;$/;"	p
glDisableClientState	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glDisableClientState(aarray: GLenum); stdcall; external libGL;$/;"	p
glEnable	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glEnable(cap: GLenum); stdcall; external libGL;$/;"	p
glEnableClientState	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glEnableClientState(aarray: GLenum); stdcall; external libGL;$/;"	p
glEnd	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glEnd; stdcall; external libGL;$/;"	p
glGenTextures	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glGenTextures(n: GLsizei; textures: PGLuint); stdcall; external libGL;$/;"	p
glGetFloatv	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glGetFloatv(pname: GLenum; params: PGLfloat); stdcall; external libGL;$/;"	p
glGetIntegerv	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glGetIntegerv(pname: GLenum; params: PGLint); stdcall; external libGL;$/;"	p
glGetString	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glGetString(name: GLenum): PAnsiChar; stdcall; external libGL;$/;"	f
glGetTexImage	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glGetTexImage(target: GLenum; level: GLint; format: GLenum; atype: GLenum; pixels: P/;"	p
glHint	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glHint(target, mode: GLenum); stdcall; external libGL;$/;"	p
glLoadIdentity	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glLoadIdentity; stdcall; external libGL;$/;"	p
glLoadMatrixf	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glLoadMatrixf(const m: PGLfloat); stdcall; external libGL;$/;"	p
glMatrixMode	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glMatrixMode(mode: GLenum); stdcall; external libGL;$/;"	p
glOrtho	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glOrtho(left, right, bottom, top, zNear, zFar: GLdouble); stdcall; external libGL;$/;"	p
glPixelStorei	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glPixelStorei(pname: GLenum; param: GLint); stdcall; external libGL;$/;"	p
glPopMatrix	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glPopMatrix; stdcall; external libGL;$/;"	p
glPushMatrix	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glPushMatrix; stdcall; external libGL;$/;"	p
glReadPixels	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glReadPixels(x, y: GLint; width, height: GLsizei; format, atype: GLenum; pixels: Poi/;"	p
glRotatef	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glRotatef(angle, x, y, z: GLfloat); stdcall; external libGL;$/;"	p
glScalef	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glScalef(x, y, z: GLfloat); stdcall; external libGL;$/;"	p
glScissor	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glScissor(x, y: GLint; width, height: GLsizei); stdcall; external libGL;$/;"	p
glShadeModel	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glShadeModel(mode: GLenum); stdcall; external libGL;$/;"	p
glTexCoord2f	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexCoord2f(s, t: GLfloat); stdcall; external libGL;$/;"	p
glTexCoord2fv	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexCoord2fv(v: PGLfloat); stdcall; external libGL;$/;"	p
glTexEnvi	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexEnvi(target: GLenum; pname: GLenum; param: GLint); stdcall; external libGL;$/;"	p
glTexImage2D	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexImage2D(target: GLenum; level, internalformat: GLint; width, height: GLsizei; b/;"	p
glTexParameterf	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexParameterf(target: GLenum; pname: GLenum; param: GLfloat); stdcall; external li/;"	p
glTexParameteri	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexParameteri(target: GLenum; pname: GLenum; param: GLint); stdcall; external libG/;"	p
glTexSubImage2D	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTexSubImage2D(target: GLenum; level, xoffset, yoffset: GLint; width, height: GLsiz/;"	p
glTranslatef	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glTranslatef(x, y, z: GLfloat); stdcall; external libGL;$/;"	p
glVertex2f	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glVertex2f(x, y: GLfloat); stdcall; external libGL;$/;"	p
glVertex2fv	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glVertex2fv(v: PGLfloat); stdcall; external libGL;$/;"	p
glVertex3f	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glVertex3f(x, y, z: GLfloat); stdcall; external libGL;$/;"	p
glVertexPointer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glVertexPointer(size: GLint; atype: GLenum; stride: GLsizei; const pointer: Pointer)/;"	p
glViewport	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glViewport(x, y: GLint; width, height: GLsizei); stdcall; external libGL;$/;"	p
glXChooseVisual	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXChooseVisual(dpy: PDisplay; screen: Integer; attribList: PInteger): PXVisualInfo;/;"	f
glXCreateContext	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXCreateContext(dpy: PDisplay; vis: PXVisualInfo; shareList: GLXContext; direct: Bo/;"	f
glXDestroyContext	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glXDestroyContext(dpy: PDisplay; ctx: GLXContext); cdecl; external libGL;$/;"	p
glXIsDirect	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXIsDirect(dpy: PDisplay; ctx: GLXContext): Boolean; cdecl; external libGL;$/;"	f
glXMakeCurrent	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXMakeCurrent(dpy: PDisplay; drawable: GLXDrawable; ctx: GLXContext): Boolean; cdec/;"	f
glXQueryExtension	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXQueryExtension(dpy: PDisplay; out errorb, event: Integer): Boolean; cdecl; extern/;"	f
glXQueryServerString	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXQueryServerString(dpy: PDisplay; screen: Integer; name: Integer): PAnsiChar; cdec/;"	f
glXQueryVersion	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  glXQueryVersion(dpy: PDisplay; out major, minor: Integer): Boolean; cdecl; external /;"	f
glXSwapBuffers	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure glXSwapBuffers(dpy: PDisplay; drawable: GLXDrawable); cdecl; external libGL;$/;"	p
gl_Create	Engines/ZenGL/src/zgl_opengl.pas	/^function  gl_Create : Boolean;$/;"	f
gl_Create	Engines/ZenGL/src/zgl_opengl.pas	/^function gl_Create : Boolean;$/;"	f
gl_Create	Engines/ZenGL/src/zgl_opengles.pas	/^function  gl_Create : Boolean;$/;"	f
gl_Create	Engines/ZenGL/src/zgl_opengles.pas	/^function gl_Create : Boolean;$/;"	f
gl_Destroy	Engines/ZenGL/src/zgl_opengl.pas	/^procedure gl_Destroy;$/;"	p
gl_Destroy	Engines/ZenGL/src/zgl_opengles.pas	/^procedure gl_Destroy;$/;"	p
gl_GetProc	Engines/ZenGL/src/zgl_opengl_all.pas	/^function gl_GetProc( const Proc : UTF8String ) : Pointer;$/;"	f
gl_GetProc	Engines/ZenGL/src/zgl_opengles_all.pas	/^function gl_GetProc( const Proc : UTF8String ) : Pointer;$/;"	f
gl_Initialize	Engines/ZenGL/src/zgl_opengl.pas	/^function  gl_Initialize : Boolean;$/;"	f
gl_Initialize	Engines/ZenGL/src/zgl_opengl.pas	/^function gl_Initialize : Boolean;$/;"	f
gl_Initialize	Engines/ZenGL/src/zgl_opengles.pas	/^function  gl_Initialize : Boolean;$/;"	f
gl_Initialize	Engines/ZenGL/src/zgl_opengles.pas	/^function gl_Initialize : Boolean;$/;"	f
gl_IsSupported	Engines/ZenGL/src/zgl_opengl_all.pas	/^function gl_IsSupported( const Extension, SearchIn : UTF8String ) : Boolean;$/;"	f
gl_IsSupported	Engines/ZenGL/src/zgl_opengl_all.pas	/^function gl_IsSupported( const Extension, SearchIn: UTF8String ) : Boolean;$/;"	f
gl_IsSupported	Engines/ZenGL/src/zgl_opengles_all.pas	/^function gl_IsSupported( const Extension, SearchIn : UTF8String ) : Boolean;$/;"	f
gl_LoadEx	Engines/ZenGL/src/zgl_opengl.pas	/^procedure gl_LoadEx;$/;"	p
gl_LoadEx	Engines/ZenGL/src/zgl_opengles.pas	/^procedure gl_LoadEx;$/;"	p
gl_ResetState	Engines/ZenGL/src/zgl_opengl.pas	/^procedure gl_ResetState;$/;"	p
gl_ResetState	Engines/ZenGL/src/zgl_opengles.pas	/^procedure gl_ResetState;$/;"	p
gles_GetErrorStr	Engines/ZenGL/src/zgl_opengles.pas	/^function gles_GetErrorStr( ErrorCode : LongWord ) : UTF8String;$/;"	f
gluBuild2DMipmaps	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  gluBuild2DMipmaps(target: GLenum; components, width, height: GLint; format, atype: G/;"	f
gluDeleteTess	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluDeleteTess(tess: Integer); stdcall external libGLU;$/;"	p
gluErrorString	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  gluErrorString(error: Integer): PAnsiChar; stdcall external libGLU;$/;"	f
gluNewTess	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function  gluNewTess: Integer; stdcall external libGLU;$/;"	f
gluPerspective	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluPerspective(fovy, aspect, zNear, zFar: GLdouble); stdcall; external libGLU;$/;"	p
gluTessBeginContour	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluTessBeginContour(tess: Integer); stdcall external libGLU;$/;"	p
gluTessBeginPolygon	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluTessBeginPolygon(tess: Integer; data: Pointer); stdcall external libGLU;$/;"	p
gluTessCallback	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluTessCallback(tess: Integer; which: Integer; fn: Pointer); stdcall external libGLU/;"	p
gluTessEndContour	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluTessEndContour(tess: Integer); stdcall external libGLU;$/;"	p
gluTessEndPolygon	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluTessEndPolygon(tess: Integer); stdcall external libGLU;$/;"	p
gluTessVertex	Engines/ZenGL/src/zgl_opengl_all.pas	/^  procedure gluTessVertex(tess: Integer; vertex: PDouble; data: Pointer); stdcall external libGL/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashDestroy : procedure( hash : PcpSpaceHash ); cdecl;$/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashEach : procedure( hash : PcpSpaceHash; func : cpSpaceHashIterator; data : Pointer )/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashFree : procedure( hash : PcpSpaceHash ); cdecl;$/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashInit : function( hash : PcpSpaceHash; clldim : cpFloat; cells : Integer; bbfunc : c/;"	f
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashInsert : procedure( hash : PcpSpaceHash; obj : Pointer; id : cpHashValue; _deprecat/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashPointQuery : procedure( hash : PcpSpaceHash; point : cpVect; func : cpSpaceHashQuer/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashQuery : procedure( hash : PcpSpaceHash; obj : Pointer; bb : cpBB; func : cpSpaceHas/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashQueryInsert : procedure( hash : PcpSpaceHash; obj : Pointer; bb : cpBB; func : cpSp/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashQueryRehash : procedure( hash : PcpSpaceHash; func : cpSpaceHashQueryFunc; data : P/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashRehash : procedure( hash : PcpSpaceHash ); cdecl;$/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashRehashObject : procedure( hash : PcpSpaceHash; obj : Pointer; id : cpHashValue ); c/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashRemove : procedure( hash : PcpSpaceHash; obj : Pointer; id : cpHashValue ); cdecl;$/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashResize : procedure( hash : PcpSpaceHash; celldim : cpFloat; numcells : Integer ); c/;"	p
hash	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceHashSegmentQuery : procedure( hash : PcpSpaceHash; obj : Pointer; a : cpVect; b : cpVec/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alBufferData           : procedure(bid: LongWord; format: LongInt; data: Pointer; size: LongIn/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alGetSourcei           : procedure(sid: LongWord; param: LongInt; out value: LongInt); cdecl;$/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourcePause          : procedure(sid: LongWord); cdecl;$/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourcePlay           : procedure(sid: LongWord); cdecl;$/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourceQueueBuffers   : procedure(sid: LongWord; numEntries: LongInt; const bids: PLongWord);/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourceRewind         : procedure(sid: LongWord); cdecl;$/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourceStop           : procedure(sid: LongWord); cdecl;$/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourceUnqueueBuffers : procedure(sid: LongWord; numEntries: LongInt; bids: PLongWord); cdecl/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourcef              : procedure(sid: LongWord; param: LongInt; value: Single); cdecl;$/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourcefv             : procedure(sid: LongWord; param: LongInt; const values: PSingle); cdec/;"	p
id	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alSourcei              : procedure(sid: LongWord; param: LongInt; value: LongInt); cdecl;$/;"	p
idth	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglCreatePBuffer : function(width:GLint; height:GLint; target:GLenum; internalFormat:GLenum; m/;"	f
information.	Engines/ZenGL/extra/zglChipmunk.pas	/^  \/\/ Structure for holding collision pair function information.$/;"	f
ini_Add	Engines/ZenGL/headers/zglHeader.pas	/^  ini_Add           : procedure( const Section, Key : UTF8String );$/;"	p
ini_Add	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_Add( const Section, Key : UTF8String );$/;"	p
ini_Clear	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_Clear( const Section : UTF8String );$/;"	p
ini_CopyKey	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_CopyKey( var k1, k2 : zglTINIKey );$/;"	p
ini_CopySection	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_CopySection( var s1, s2 : zglTINISection );$/;"	p
ini_Del	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_Del( const Section, Key : UTF8String );$/;"	p
ini_Free	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_Free;$/;"	p
ini_GetID	Engines/ZenGL/src/zgl_ini.pas	/^function ini_GetID( const S, K : UTF8String; out idS, idK : Integer ) : Boolean;$/;"	f
ini_IsKey	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_IsKey( const Section, Key : UTF8String ) : Boolean;$/;"	f
ini_IsKey	Engines/ZenGL/src/zgl_ini.pas	/^function ini_IsKey( const Section, Key : UTF8String ) : Boolean;$/;"	f
ini_IsSection	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_IsSection( const Section : UTF8String ) : Boolean;$/;"	f
ini_IsSection	Engines/ZenGL/src/zgl_ini.pas	/^function ini_IsSection( const Section : UTF8String ) : Boolean;$/;"	f
ini_LoadFromFile	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_LoadFromFile( const FileName : UTF8String ) : Boolean;$/;"	f
ini_LoadFromFile	Engines/ZenGL/src/zgl_ini.pas	/^function ini_LoadFromFile( const FileName : UTF8String ) : Boolean;$/;"	f
ini_Process	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_Process;$/;"	p
ini_ReadKeyBool	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_ReadKeyBool( const Section, Key : UTF8String ) : Boolean;$/;"	f
ini_ReadKeyBool	Engines/ZenGL/src/zgl_ini.pas	/^function ini_ReadKeyBool( const Section, Key : UTF8String ) : Boolean;$/;"	f
ini_ReadKeyFloat	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_ReadKeyFloat( const Section, Key : UTF8String ) : Single;$/;"	f
ini_ReadKeyFloat	Engines/ZenGL/src/zgl_ini.pas	/^function ini_ReadKeyFloat( const Section, Key : UTF8String ) : Single;$/;"	f
ini_ReadKeyInt	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_ReadKeyInt( const Section, Key : UTF8String ) : Integer;$/;"	f
ini_ReadKeyInt	Engines/ZenGL/src/zgl_ini.pas	/^function ini_ReadKeyInt( const Section, Key : UTF8String ) : Integer;$/;"	f
ini_ReadKeyStr	Engines/ZenGL/headers/zglHeader.pas	/^  function ini_ReadKeyStr( const Section, Key : UTF8String ) : UTF8String;$/;"	f
ini_ReadKeyStr	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_ReadKeyStr( const Section, Key : UTF8String ) : UTF8String;$/;"	f
ini_ReadKeyStr	Engines/ZenGL/src/zgl_ini.pas	/^function ini_ReadKeyStr( const Section, Key : UTF8String ) : UTF8String;$/;"	f
ini_SaveToFile	Engines/ZenGL/src/zgl_ini.pas	/^procedure ini_SaveToFile( const FileName : UTF8String );$/;"	p
ini_WriteKeyBool	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_WriteKeyBool( const Section, Key : UTF8String; Value : Boolean ) : Boolean;$/;"	f
ini_WriteKeyBool	Engines/ZenGL/src/zgl_ini.pas	/^function ini_WriteKeyBool( const Section, Key : UTF8String; Value : Boolean ) : Boolean;$/;"	f
ini_WriteKeyFloat	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_WriteKeyFloat( const Section, Key : UTF8String; Value : Single; Digits : Integer =/;"	f
ini_WriteKeyFloat	Engines/ZenGL/src/zgl_ini.pas	/^function ini_WriteKeyFloat( const Section, Key : UTF8String; Value : Single; Digits : Integer = /;"	f
ini_WriteKeyInt	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_WriteKeyInt( const Section, Key : UTF8String; Value : Integer ) : Boolean;$/;"	f
ini_WriteKeyInt	Engines/ZenGL/src/zgl_ini.pas	/^function ini_WriteKeyInt( const Section, Key : UTF8String; Value : Integer ) : Boolean;$/;"	f
ini_WriteKeyStr	Engines/ZenGL/src/zgl_ini.pas	/^function  ini_WriteKeyStr( const Section, Key, Value : UTF8String ) : Boolean;$/;"	f
ini_WriteKeyStr	Engines/ZenGL/src/zgl_ini.pas	/^function ini_WriteKeyStr( const Section, Key, Value : UTF8String ) : Boolean;$/;"	f
interval	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXSwapIntervalSGI: function( interval: Integer): Integer; cdecl;$/;"	f
ix	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglCreateContext : function(pix:TAGLPixelFormat; share:TAGLContext):TAGLContext;cdecl;$/;"	f
ix	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglDestroyPixelFormat : procedure(pix:TAGLPixelFormat);cdecl;$/;"	p
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpDampedRotarySpringInit : function( joint : PcpDampedRotarySpring; a : PcpBody; b : PcpBody; /;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpDampedSpringInit : function( joint : PcpDampedSpring; a : PcpBody; b : PcpBody; anchr1 : cpV/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGearJointInit : function( joint : PcpGearJoint; a : PcpBody; b : PcpBody; phase : cpFloat; r/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpGrooveJointInit : function( joint : PcpGrooveJoint; a : PcpBody; b : PcpBody; groove_a : cpV/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPinJointInit : function( joint : PcpPinJoint; a : PcpBody; b : PcpBody; anchr1 : cpVect; anc/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPivotJointInit : function( joint : PcpPivotJoint; a : PcpBody; b : PcpBody; anchr1 : cpVect;/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpRatchetJointInit : function( joint : PcpRatchetJoint; a : PcpBody; b : PcpBody; phase : cpFl/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpRotaryLimitJointInit : function( joint : PcpRotaryLimitJoint; a : PcpBody; b : PcpBody; min /;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSimpleMotorInit : function( joint : PcpSimpleMotor; a : PcpBody; b : PcpBody; rate : cpFloat/;"	f
joint	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSlideJointInit : function( joint : PcpSlideJoint; a : PcpBody; b : PcpBody; anchr1 : cpVect;/;"	f
joyGetDevCapsW	Engines/ZenGL/src/zgl_joystick.pas	/^  function joyGetDevCapsW( uJoyID : LongWord; lpCaps : PJOYCAPSW; uSize : LongWord ) : LongWord;/;"	f
joyGetNumDevs	Engines/ZenGL/src/zgl_joystick.pas	/^  function joyGetNumDevs : LongWord; stdcall; external 'winmm.dll' name 'joyGetNumDevs';$/;"	f
joyGetPosEx	Engines/ZenGL/src/zgl_joystick.pas	/^  function joyGetPosEx( uJoyID : LongWord; lpInfo : PJOYINFOEX ) : LongWord; stdcall; external '/;"	f
joy_AxisPos	Engines/ZenGL/src/zgl_joystick.pas	/^function  joy_AxisPos( JoyID, Axis : Byte ) : Single;$/;"	f
joy_ClearState	Engines/ZenGL/src/zgl_joystick.pas	/^procedure joy_ClearState;$/;"	p
joy_Close	Engines/ZenGL/src/zgl_joystick.pas	/^procedure joy_Close;$/;"	p
joy_Down	Engines/ZenGL/src/zgl_joystick.pas	/^function  joy_Down( JoyID, Button : Byte ) : Boolean;$/;"	f
joy_GetInfo	Engines/ZenGL/src/zgl_joystick.pas	/^function  joy_GetInfo( JoyID : Byte ) : zglPJoyInfo;$/;"	f
joy_Init	Engines/ZenGL/src/zgl_joystick.pas	/^function  joy_Init : Byte;$/;"	f
joy_Init	Engines/ZenGL/src/zgl_joystick.pas	/^function joy_Init : Byte;$/;"	f
joy_Press	Engines/ZenGL/src/zgl_joystick.pas	/^function  joy_Press( JoyID, Button : Byte ) : Boolean;$/;"	f
joy_Proc	Engines/ZenGL/src/zgl_joystick.pas	/^procedure joy_Proc;$/;"	p
joy_Up	Engines/ZenGL/src/zgl_joystick.pas	/^function  joy_Up( JoyID, Button : Byte ) : Boolean;$/;"	f
jpg_FillData	Engines/ZenGL/src/zgl_textures_jpg.pas	/^procedure jpg_FillData( var jpg : zglTJPGData; out Data : PByteArray );$/;"	p
jpg_LoadFromFile	Engines/ZenGL/src/zgl_textures_jpg.pas	/^procedure jpg_LoadFromFile( const FileName : UTF8String; out Data : PByteArray; out W, H, Format/;"	p
jpg_LoadFromMemory	Engines/ZenGL/src/zgl_textures_jpg.pas	/^procedure jpg_LoadFromMemory( const Memory : zglTMemory; out Data : PByteArray; out W, H, Format/;"	p
jpgturbo_Load	Engines/ZenGL/src/zgl_textures_jpg.pas	/^  procedure jpgturbo_Load( var jpgData : zglTJPGData; out Data : Pointer ); cdecl; external {$IF/;"	p
kernel32_MoveFileExA	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function kernel32_MoveFileExA( lpExistingFileName : PAnsiChar; lpNewFileName : PAnsiChar; dwFl/;"	f
kernel32_MoveFileExA	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^function kernel32_MoveFileExA( lpExistingFileName : PAnsiChar; lpNewFileName : PAnsiChar; dwFlag/;"	f
layerClass	Engines/ZenGL/src/zgl_application.pas	/^    class function layerClass: Pobjc_class; override;$/;"	f
ldexp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function ldexp( x : Double; exp : cint ) : Double; cdecl; external 'msvcrt.dll';$/;"	f
localtime	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure localtime; cdecl; external 'msvcrt.dll';$/;"	p
log_Add	Engines/ZenGL/src/zgl_log.pas	/^procedure log_Add( const Message : UTF8String; Timings : Boolean = TRUE );$/;"	p
log_Close	Engines/ZenGL/src/zgl_log.pas	/^procedure log_Close;$/;"	p
log_Flush	Engines/ZenGL/src/zgl_log.pas	/^procedure log_Flush;$/;"	p
log_Init	Engines/ZenGL/src/zgl_log.pas	/^procedure log_Init;$/;"	p
log_Timing	Engines/ZenGL/src/zgl_log.pas	/^function  log_Timing : UTF8String;$/;"	f
log_Timing	Engines/ZenGL/src/zgl_log.pas	/^function log_Timing : UTF8String;$/;"	f
m	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBodyNew : function( m : cpFloat; i : cpFloat ) : PcpBody; cdecl;$/;"	f
m_Angle	Engines/ZenGL/src/zgl_math_2d.pas	/^function  m_Angle( x1, y1, x2, y2 : Single ) : Single;$/;"	f
m_Angle	Engines/ZenGL/src/zgl_math_2d.pas	/^function m_Angle( x1, y1, x2, y2 : Single ) : Single;$/;"	f
m_Cos	Engines/ZenGL/src/zgl_math_2d.pas	/^function  m_Cos( Angle : Integer ) : Single;$/;"	f
m_Cos	Engines/ZenGL/src/zgl_math_2d.pas	/^function m_Cos( Angle : Integer ) : Single;$/;"	f
m_Distance	Engines/ZenGL/src/zgl_math_2d.pas	/^function  m_Distance( x1, y1, x2, y2 : Single ) : Single;$/;"	f
m_Distance	Engines/ZenGL/src/zgl_math_2d.pas	/^function m_Distance( x1, y1, x2, y2 : Single ) : Single;$/;"	f
m_FDistance	Engines/ZenGL/src/zgl_math_2d.pas	/^function  m_FDistance( x1, y1, x2, y2 : Single ) : Single;$/;"	f
m_FDistance	Engines/ZenGL/src/zgl_math_2d.pas	/^function m_FDistance( x1, y1, x2, y2 : Single ) : Single;$/;"	f
m_Orientation	Engines/ZenGL/src/zgl_math_2d.pas	/^function  m_Orientation( x, y, x1, y1, x2, y2 : Single ) : Integer;$/;"	f
m_Orientation	Engines/ZenGL/src/zgl_math_2d.pas	/^function m_Orientation( x, y, x1, y1, x2, y2 : Single ) : Integer;$/;"	f
m_Sin	Engines/ZenGL/src/zgl_math_2d.pas	/^function  m_Sin( Angle : Integer ) : Single;$/;"	f
m_Sin	Engines/ZenGL/src/zgl_math_2d.pas	/^function m_Sin( Angle : Integer ) : Single;$/;"	f
m_SinCos	Engines/ZenGL/src/zgl_math_2d.pas	/^procedure m_SinCos( Angle : Single; out s, c : Single ); {$IFDEF USE_ASM} assembler; {$ELSE} {$I/;"	p
mach_absolute_time	Engines/ZenGL/src/zgl_timers.pas	/^  function mach_absolute_time : QWORD; cdecl; external 'libc';$/;"	f
mach_timebase_info	Engines/ZenGL/src/zgl_timers.pas	/^  function mach_timebase_info( var info : mach_timebase_info_t ) : Integer; cdecl; external 'lib/;"	f
malloc	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure malloc; cdecl; external 'msvcrt.dll';$/;"	p
max	Engines/ZenGL/src/zgl_math_2d.pas	/^function max( a, b : Single ) : Single; {$IFDEF USE_INLINE} inline; {$ENDIF}$/;"	f
mem_Free	Engines/ZenGL/src/zgl_memory.pas	/^procedure mem_Free( var Memory : zglTMemory );$/;"	p
mem_LoadFromFile	Engines/ZenGL/src/zgl_memory.pas	/^function  mem_LoadFromFile( out Memory : zglTMemory; const FileName : UTF8String ) : Boolean;$/;"	f
mem_LoadFromFile	Engines/ZenGL/src/zgl_memory.pas	/^function mem_LoadFromFile( out Memory : zglTMemory; const FileName : UTF8String ) : Boolean;$/;"	f
mem_Read	Engines/ZenGL/src/zgl_memory.pas	/^function  mem_Read( var Memory : zglTMemory; var Buffer; Bytes : LongWord ) : LongWord;$/;"	f
mem_Read	Engines/ZenGL/src/zgl_memory.pas	/^function mem_Read( var Memory : zglTMemory; var Buffer; Bytes : LongWord ) : LongWord;$/;"	f
mem_ReadSwap	Engines/ZenGL/src/zgl_memory.pas	/^function  mem_ReadSwap( var Memory : zglTMemory; var Buffer; Bytes : LongWord ) : LongWord;$/;"	f
mem_ReadSwap	Engines/ZenGL/src/zgl_memory.pas	/^function mem_ReadSwap( var Memory : zglTMemory; var Buffer; Bytes : LongWord ) : LongWord;$/;"	f
mem_SaveToFile	Engines/ZenGL/src/zgl_memory.pas	/^function  mem_SaveToFile( var Memory : zglTMemory; const FileName : UTF8String ) : Boolean;$/;"	f
mem_SaveToFile	Engines/ZenGL/src/zgl_memory.pas	/^function mem_SaveToFile( var Memory : zglTMemory; const FileName : UTF8String ) : Boolean;$/;"	f
mem_Seek	Engines/ZenGL/src/zgl_memory.pas	/^function  mem_Seek( var Memory : zglTMemory; Offset, Mode : Integer ) : LongWord;$/;"	f
mem_Seek	Engines/ZenGL/src/zgl_memory.pas	/^function mem_Seek( var Memory : zglTMemory; Offset, Mode : Integer ) : LongWord;$/;"	f
mem_SetSize	Engines/ZenGL/src/zgl_memory.pas	/^procedure mem_SetSize( var Memory : zglTMemory; Size : LongWord );$/;"	p
mem_Write	Engines/ZenGL/src/zgl_memory.pas	/^function  mem_Write( var Memory : zglTMemory; const Buffer; Bytes : LongWord ) : LongWord;$/;"	f
mem_Write	Engines/ZenGL/src/zgl_memory.pas	/^function mem_Write( var Memory : zglTMemory; const Buffer; Bytes : LongWord ) : LongWord;$/;"	f
memchr	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure memchr; cdecl; external 'msvcrt.dll';$/;"	p
memcmp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function memcmp( ptr1 : Pointer; ptr2 : Pointer; num : csize_t ) : cint; cdecl; external 'msvc/;"	f
memcpy	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure memcpy; cdecl; external 'msvcrt.dll';$/;"	p
memcpy	Engines/ZenGL/src/zgl_utils.pas	/^function memcpy( destination, source : Pointer; num : csize_t ) : Pointer; cdecl; public name 'm/;"	f
memset	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure memset; cdecl; external 'msvcrt.dll';$/;"	p
min	Engines/ZenGL/src/zgl_math_2d.pas	/^function min( a, b : Single ) : Single; {$IFDEF USE_INLINE} inline; {$ENDIF}$/;"	f
mktime	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure mktime; cdecl; external 'msvcrt.dll';$/;"	p
mouse_ClearState	Engines/ZenGL/src/zgl_mouse.pas	/^procedure mouse_ClearState;$/;"	p
mouse_Click	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_Click( Button : Byte ) : Boolean;$/;"	f
mouse_DX	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_DX : Integer;$/;"	f
mouse_DY	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_DY : Integer;$/;"	f
mouse_DblClick	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_DblClick( Button : Byte ) : Boolean;$/;"	f
mouse_Down	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_Down( Button : Byte ) : Boolean;$/;"	f
mouse_Lock	Engines/ZenGL/headers/zglHeader.pas	/^  mouse_Lock       : procedure( X : Integer = -1; Y : Integer = -1 );$/;"	p
mouse_Lock	Engines/ZenGL/src/zgl_mouse.pas	/^procedure mouse_Lock( X : Integer = -1; Y : Integer = -1 );$/;"	p
mouse_Up	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_Up( Button : Byte ) : Boolean;$/;"	f
mouse_Wheel	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_Wheel( Axis : Byte ) : Boolean;$/;"	f
mouse_X	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_X : Integer;$/;"	f
mouse_Y	Engines/ZenGL/src/zgl_mouse.pas	/^function mouse_Y : Integer;$/;"	f
mp_DecoderClose	Engines/ZenGL/extra/zglModPlug.pas	/^procedure mp_DecoderClose( var Stream : zglTSoundStream );$/;"	p
mp_DecoderLoop	Engines/ZenGL/extra/zglModPlug.pas	/^procedure mp_DecoderLoop( var Stream : zglTSoundStream );$/;"	p
mp_DecoderOpen	Engines/ZenGL/extra/zglModPlug.pas	/^function mp_DecoderOpen( var Stream : zglTSoundStream; const FileName : UTF8String ) : Boolean;$/;"	f
mp_DecoderOpenMem	Engines/ZenGL/extra/zglModPlug.pas	/^function mp_DecoderOpenMem( var Stream : zglTSoundStream; const Memory : zglTMemory ) : Boolean;$/;"	f
mp_DecoderRead	Engines/ZenGL/extra/zglModPlug.pas	/^function mp_DecoderRead( var Stream : zglTSoundStream; Buffer : PByteArray; Bytes : LongWord; ou/;"	f
msvcrt_ldexp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function msvcrt_ldexp( x : Double; exp : cint ) : Double; cdecl; public name 'ldexp';$/;"	f
msvcrt_ldexp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^function msvcrt_ldexp( x : Double; exp : cint ) : Double;$/;"	f
msvcrt_memcmp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function msvcrt_memcmp( ptr1 : Pointer; ptr2 : Pointer; num : csize_t ) : cint; cdecl; public /;"	f
msvcrt_memcmp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^function msvcrt_memcmp( ptr1 : Pointer; ptr2 : Pointer; num : csize_t ) : cint;$/;"	f
msvcrt_pow	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function msvcrt_pow( x, y : Double ) : Double; cdecl; public name 'pow';$/;"	f
msvcrt_pow	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^function msvcrt_pow( x, y : Double ) : Double;$/;"	f
nterval	Engines/ZenGL/src/zgl_opengl_all.pas	/^  wglSwapInterval: function(interval: GLint): BOOL; stdcall;$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      AllocObject:function(Env:PJNIEnv;AClass:JClass):JObject;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallBooleanMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JBoolean;{$ifdef ms/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallBooleanMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JBool/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallBooleanMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JBool/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallByteMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JByte;{$ifdef mswindow/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallByteMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JByte;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallByteMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JByte;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallCharMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JChar;{$ifdef mswindow/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallCharMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JChar;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallCharMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JChar;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallDoubleMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JDouble;{$ifdef mswi/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallDoubleMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JDoubl/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallDoubleMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JDoubl/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallFloatMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JFloat;{$ifdef mswind/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallFloatMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JFloat;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallFloatMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JFloat;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallIntMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JInt;{$ifdef mswindows}/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallIntMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JInt;{$if/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallIntMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JInt;{$if/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallLongMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JLong;{$ifdef mswindow/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallLongMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JLong;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallLongMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JLong;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualBooleanMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMetho/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualBooleanMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMeth/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualBooleanMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMeth/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualByteMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodID/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualByteMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualByteMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualCharMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodID/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualCharMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualCharMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualDoubleMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualDoubleMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMetho/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualDoubleMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMetho/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualFloatMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualFloatMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualFloatMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualIntMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodID)/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualIntMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodID/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualIntMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodID/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualLongMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodID/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualLongMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualLongMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualObjectMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualObjectMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMetho/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualObjectMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMetho/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualShortMethod:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualShortMethodA:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualShortMethodV:function(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualVoidMethod:procedure(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethodI/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualVoidMethodA:procedure(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallNonvirtualVoidMethodV:procedure(Env:PJNIEnv;Obj:JObject;AClass:JClass;MethodID:JMethod/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallObjectMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JObject;{$ifdef mswi/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallObjectMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JObjec/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallObjectMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JObjec/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallShortMethod:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID):JShort;{$ifdef mswind/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallShortMethodA:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue):JShort;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallShortMethodV:function(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list):JShort;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticBooleanMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JBoolean;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticBooleanMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValu/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticBooleanMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_lis/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticByteMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JByte;{$ifdef /;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticByteMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue):/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticByteMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list):/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticCharMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JChar;{$ifdef /;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticCharMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue):/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticCharMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list):/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticDoubleMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JDouble;{$if/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticDoubleMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticDoubleMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticFloatMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JFloat;{$ifde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticFloatMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue)/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticFloatMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list)/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticIntMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JInt;{$ifdef ms/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticIntMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue):J/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticIntMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list):J/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticLongMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JLong;{$ifdef /;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticLongMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue):/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticLongMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list):/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticObjectMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JObject;{$if/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticObjectMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticObjectMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticShortMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JShort;{$ifde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticShortMethodA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue)/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticShortMethodV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list)/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticVoidMethod:procedure(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID);{$ifdef mswin/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticVoidMethodA:procedure(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue)/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallStaticVoidMethodV:procedure(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list)/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallVoidMethod:procedure(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID);{$ifdef mswindows}std/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallVoidMethodA:procedure(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:PJValue);{$ifdef/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      CallVoidMethodV:procedure(Env:PJNIEnv;Obj:JObject;MethodID:JMethodID;Args:va_list);{$ifdef/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      DefineClass:function(Env:PJNIEnv;const Name:pchar;Loader:JObject;const Buf:PJByte;Len:JSiz/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      DeleteGlobalRef:procedure(Env:PJNIEnv;GRef:JObject);{$ifdef mswindows}stdcall;{$else}cdecl/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      DeleteLocalRef:procedure(Env:PJNIEnv;Obj:JObject);{$ifdef mswindows}stdcall;{$else}cdecl;{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      DeleteWeakGlobalRef:procedure(Env:PJNIEnv;Ref:JWeak);{$ifdef mswindows}stdcall;{$else}cdec/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      EnsureLocalCapacity:function(Env:PJNIEnv;Capacity:JInt):JObject;{$ifdef mswindows}stdcall;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      ExceptionCheck:function(Env:PJNIEnv):JBoolean;{$ifdef mswindows}stdcall;{$else}cdecl;{$end/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      ExceptionClear:procedure(Env:PJNIEnv);{$ifdef mswindows}stdcall;{$else}cdecl;{$endif}$/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ExceptionDescribe:procedure(Env:PJNIEnv);{$ifdef mswindows}stdcall;{$else}cdecl;{$endif}$/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ExceptionOccurred:function(Env:PJNIEnv):JThrowable;{$ifdef mswindows}stdcall;{$else}cdecl;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      FatalError:procedure(Env:PJNIEnv;const Msg:pchar);{$ifdef mswindows}stdcall;{$else}cdecl;{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      FindClass:function(Env:PJNIEnv;const Name:pchar):JClass;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      FromReflectedField:function(Env:PJNIEnv;Field:JObject):JFieldID;{$ifdef mswindows}stdcall;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      FromReflectedMethod:function(Env:PJNIEnv;Method:JObject):JMethodID;{$ifdef mswindows}stdca/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetArrayLength:function(Env:PJNIEnv;AArray:JArray):JSize;{$ifdef mswindows}stdcall;{$else}/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetBooleanArrayElements:function(Env:PJNIEnv;AArray:JBooleanArray;var IsCopy:JBoolean):PJB/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetBooleanArrayRegion:procedure(Env:PJNIEnv;AArray:JBooleanArray;Start:JSize;Len:JSize;Buf/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetBooleanField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JBoolean;{$ifdef mswind/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetByteArrayElements:function(Env:PJNIEnv;AArray:JByteArray;var IsCopy:JBoolean):PJByte;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetByteArrayRegion:procedure(Env:PJNIEnv;AArray:JByteArray;Start:JSize;Len:JSize;Buf:PJByt/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetByteField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JByte;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetCharArrayElements:function(Env:PJNIEnv;AArray:JCharArray;var IsCopy:JBoolean):PJChar;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetCharArrayRegion:procedure(Env:PJNIEnv;AArray:JCharArray;Start:JSize;Len:JSize;Buf:PJCha/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetCharField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JChar;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetDirectBufferAddress:function(Env:PJNIEnv;Buf:JObject):pointer;{$ifdef mswindows}stdcall/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetDirectBufferCapacity:function(Env:PJNIEnv;Buf:JObject):JLong;{$ifdef mswindows}stdcall;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetDoubleArrayElements:function(Env:PJNIEnv;AArray:JDoubleArray;var IsCopy:JBoolean):PJDou/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetDoubleArrayRegion:procedure(Env:PJNIEnv;AArray:JDoubleArray;Start:JSize;Len:JSize;Buf:P/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetDoubleField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JDouble;{$ifdef mswindow/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetFieldID:function(Env:PJNIEnv;AClass:JClass;const Name:pchar;const Sig:pchar):JFieldID;{/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetFloatArrayElements:function(Env:PJNIEnv;AArray:JFloatArray;var IsCopy:JBoolean):PJFloat/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetFloatArrayRegion:procedure(Env:PJNIEnv;AArray:JFloatArray;Start:JSize;Len:JSize;Buf:PJF/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetFloatField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JFloat;{$ifdef mswindows}/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetIntArrayElements:function(Env:PJNIEnv;AArray:JIntArray;var IsCopy:JBoolean):PJInt;{$ifd/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetIntArrayRegion:procedure(Env:PJNIEnv;AArray:JIntArray;Start:JSize;Len:JSize;Buf:PJInt);/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetIntField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JInt;{$ifdef mswindows}stdc/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetJavaVM:function(Env:PJNIEnv;var VM:JavaVM):JInt;{$ifdef mswindows}stdcall;{$else}cdecl;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetLongArrayElements:function(Env:PJNIEnv;AArray:JLongArray;var IsCopy:JBoolean):PJLong;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetLongArrayRegion:procedure(Env:PJNIEnv;AArray:JLongArray;Start:JSize;Len:JSize;Buf:PJLon/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetLongField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JLong;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetMethodID:function(Env:PJNIEnv;AClass:JClass;const Name:pchar;const Sig:pchar):JMethodID/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetObjectArrayElement:function(Env:PJNIEnv;AArray:JObjectArray;Index:JSize):JObject;{$ifde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetObjectClass:function(Env:PJNIEnv;Obj:JObject):JClass;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetObjectField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JObject;{$ifdef mswindow/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetObjectRefType:function(Env:PJNIEnv;AObject:JObject):jobjectRefType;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetPrimitiveArrayCritical:function(Env:PJNIEnv;AArray:JArray;var IsCopy:JBoolean):pointer;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetShortArrayElements:function(Env:PJNIEnv;AArray:JShortArray;var IsCopy:JBoolean):PJShort/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetShortArrayRegion:procedure(Env:PJNIEnv;AArray:JShortArray;Start:JSize;Len:JSize;Buf:PJS/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetShortField:function(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID):JShort;{$ifdef mswindows}/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticBooleanField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JBoolean;{$ifde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticByteField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JByte;{$ifdef mswi/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticCharField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JChar;{$ifdef mswi/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticDoubleField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JDouble;{$ifdef /;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticFieldID:function(Env:PJNIEnv;AClass:JClass;const Name:pchar;const Sig:pchar):JFie/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticFloatField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JFloat;{$ifdef ms/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticIntField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JInt;{$ifdef mswind/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticLongField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JLong;{$ifdef mswi/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticMethodID:function(Env:PJNIEnv;AClass:JClass;const Name:pchar;const Sig:pchar):JMe/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticObjectField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JObject;{$ifdef /;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStaticShortField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID):JShort;{$ifdef ms/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStringChars:function(Env:PJNIEnv;Str:JString;var IsCopy:JBoolean):PJChar;{$ifdef mswind/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStringCritical:function(Env:PJNIEnv;Str:JString;var IsCopy:JBoolean):PJChar;{$ifdef msw/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStringLength:function(Env:PJNIEnv;Str:JString):JSize;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStringRegion:procedure(Env:PJNIEnv;Str:JString;Start:JSize;Len:JSize;Buf:PJChar);{$ifde/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetStringUTFChars:function(Env:PJNIEnv;Str:JString; IsCopy:PJBoolean):pchar;{$ifdef mswind/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStringUTFLength:function(Env:PJNIEnv;Str:JString):JSize;{$ifdef mswindows}stdcall;{$els/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetStringUTFRegion:procedure(Env:PJNIEnv;Str:JString;Start:JSize;Len:JSize;Buf:pchar);{$if/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      GetSuperclass:function(Env:PJNIEnv;Sub:JClass):JClass;{$ifdef mswindows}stdcall;{$else}cde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      GetVersion:function(Env:PJNIEnv):JInt;{$ifdef mswindows}stdcall;{$else}cdecl;{$endif}$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      IsAssignableFrom:function(Env:PJNIEnv;Sub:JClass;Sup:JClass):JBoolean;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      IsInstanceOf:function(Env:PJNIEnv;Obj:JObject;AClass:JClass):JBoolean;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      IsSameObject:function(Env:PJNIEnv;Obj1:JObject;Obj2:JObject):JBoolean;{$ifdef mswindows}st/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      MonitorEnter:function(Env:PJNIEnv;Obj:JObject):JInt;{$ifdef mswindows}stdcall;{$else}cdecl/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      MonitorExit:function(Env:PJNIEnv;Obj:JObject):JInt;{$ifdef mswindows}stdcall;{$else}cdecl;/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewBooleanArray:function(Env:PJNIEnv;Len:JSize):JBooleanArray;{$ifdef mswindows}stdcall;{$/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewByteArray:function(Env:PJNIEnv;Len:JSize):JByteArray;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewCharArray:function(Env:PJNIEnv;Len:JSize):JCharArray;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewDirectByteBuffer:function(Env:PJNIEnv;Address:pointer;Capacity:JLong):JObject;{$ifdef m/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewDoubleArray:function(Env:PJNIEnv;Len:JSize):JDoubleArray;{$ifdef mswindows}stdcall;{$el/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewFloatArray:function(Env:PJNIEnv;Len:JSize):JFloatArray;{$ifdef mswindows}stdcall;{$else/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewGlobalRef:function(Env:PJNIEnv;LObj:JObject):JObject;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewIntArray:function(Env:PJNIEnv;Len:JSize):JIntArray;{$ifdef mswindows}stdcall;{$else}cde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewLocalRef:function(Env:PJNIEnv;Ref:JObject):JObject;{$ifdef mswindows}stdcall;{$else}cde/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewLongArray:function(Env:PJNIEnv;Len:JSize):JLongArray;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewObject:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID):JObject;{$ifdef mswindows/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewObjectA:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:PJValue):JObject;{$i/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewObjectArray:function(Env:PJNIEnv;Len:JSize;AClass:JClass;Init:JObject):JObjectArray;{$i/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewObjectV:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;Args:va_list):JObject;{$i/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewShortArray:function(Env:PJNIEnv;Len:JSize):JShortArray;{$ifdef mswindows}stdcall;{$else/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewString:function(Env:PJNIEnv;const Unicode:PJChar;Len:JSize):JString;{$ifdef mswindows}s/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewStringUTF:function(Env:PJNIEnv;const UTF:pchar):JString;{$ifdef mswindows}stdcall;{$els/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      NewWeakGlobalRef:function(Env:PJNIEnv;Obj:JObject):JWeak;{$ifdef mswindows}stdcall;{$else}/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      PopLocalFrame:function(Env:PJNIEnv;Result:JObject):JObject;{$ifdef mswindows}stdcall;{$els/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      PushLocalFrame:function(Env:PJNIEnv;Capacity:JInt):JInt;{$ifdef mswindows}stdcall;{$else}c/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      RegisterNatives:function(Env:PJNIEnv;AClass:JClass;const Methods:PJNINativeMethod;NMethods/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseBooleanArrayElements:procedure(Env:PJNIEnv;AArray:JBooleanArray;Elems:PJBoolean;Mod/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseByteArrayElements:procedure(Env:PJNIEnv;AArray:JByteArray;Elems:PJByte;Mode:JInt);{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseCharArrayElements:procedure(Env:PJNIEnv;AArray:JCharArray;Elems:PJChar;Mode:JInt);{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseDoubleArrayElements:procedure(Env:PJNIEnv;AArray:JDoubleArray;Elems:PJDouble;Mode:J/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseFloatArrayElements:procedure(Env:PJNIEnv;AArray:JFloatArray;Elems:PJFloat;Mode:JInt/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseIntArrayElements:procedure(Env:PJNIEnv;AArray:JIntArray;Elems:PJInt;Mode:JInt);{$if/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseLongArrayElements:procedure(Env:PJNIEnv;AArray:JLongArray;Elems:PJLong;Mode:JInt);{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleasePrimitiveArrayCritical:procedure(Env:PJNIEnv;AArray:JArray;CArray:pointer;Mode:JInt/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseShortArrayElements:procedure(Env:PJNIEnv;AArray:JShortArray;Elems:PJShort;Mode:JInt/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseStringChars:procedure(Env:PJNIEnv;Str:JString;const Chars:PJChar);{$ifdef mswindows/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseStringCritical:procedure(Env:PJNIEnv;Str:JString;CString:PJChar);{$ifdef mswindows}/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      ReleaseStringUTFChars:procedure(Env:PJNIEnv;Str:JString;const Chars:pchar);{$ifdef mswindo/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetBooleanArrayRegion:procedure(Env:PJNIEnv;AArray:JBooleanArray;Start:JSize;Len:JSize;Buf/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetBooleanField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JBoolean);{$ifdef m/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetByteArrayRegion:procedure(Env:PJNIEnv;AArray:JByteArray;Start:JSize;Len:JSize;Buf:PJByt/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetByteField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JByte);{$ifdef mswindo/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetCharArrayRegion:procedure(Env:PJNIEnv;AArray:JCharArray;Start:JSize;Len:JSize;Buf:PJCha/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetCharField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JChar);{$ifdef mswindo/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetDoubleArrayRegion:procedure(Env:PJNIEnv;AArray:JDoubleArray;Start:JSize;Len:JSize;Buf:P/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetDoubleField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JDouble);{$ifdef msw/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetFloatArrayRegion:procedure(Env:PJNIEnv;AArray:JFloatArray;Start:JSize;Len:JSize;Buf:PJF/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetFloatField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JFloat);{$ifdef mswin/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetIntArrayRegion:procedure(Env:PJNIEnv;AArray:JIntArray;Start:JSize;Len:JSize;Buf:PJInt);/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetIntField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JInt);{$ifdef mswindows/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetLongArrayRegion:procedure(Env:PJNIEnv;AArray:JLongArray;Start:JSize;Len:JSize;Buf:PJLon/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetLongField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JLong);{$ifdef mswindo/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetObjectArrayElement:procedure(Env:PJNIEnv;AArray:JObjectArray;Index:JSize;Val:JObject);{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetObjectField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JObject);{$ifdef msw/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetShortArrayRegion:procedure(Env:PJNIEnv;AArray:JShortArray;Start:JSize;Len:JSize;Buf:PJS/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetShortField:procedure(Env:PJNIEnv;Obj:JObject;FieldID:JFieldID;Val:JShort);{$ifdef mswin/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticBooleanField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JBoolean);{/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticByteField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JByte);{$ifdef/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticCharField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JChar);{$ifdef/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticDoubleField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JDouble);{$i/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticFloatField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JFloat);{$ifd/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticIntField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JInt);{$ifdef m/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticLongField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JLong);{$ifdef/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticObjectField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JObject);{$i/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      SetStaticShortField:procedure(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;Val:JShort);{$ifd/;"	p
nv	Engines/ZenGL/src/jni.pas	/^      Throw:function(Env:PJNIEnv;Obj:JThrowable):JInt;{$ifdef mswindows}stdcall;{$else}cdecl;{$e/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      ThrowNew:function(Env:PJNIEnv;AClass:JClass;const Msg:pchar):JInt;{$ifdef mswindows}stdcal/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      ToReflectedField:function(Env:PJNIEnv;AClass:JClass;FieldID:JFieldID;IsStatic:JBoolean):JO/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      ToReflectedMethod:function(Env:PJNIEnv;AClass:JClass;MethodID:JMethodID;IsStatic:JBoolean)/;"	f
nv	Engines/ZenGL/src/jni.pas	/^      UnregisterNatives:function(Env:PJNIEnv;AClass:JClass):JInt;{$ifdef mswindows}stdcall;{$els/;"	f
oal_GetSource	Engines/ZenGL/src/zgl_sound_openal.pas	/^function oal_GetSource( Source : Pointer ) : LongWord;$/;"	f
ode	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glBlendEquation: procedure(mode: GLenum); stdcall;$/;"	p
ogg_Close	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_Close( datasource : pointer ) : cint; cdecl;$/;"	f
ogg_CloseMem	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_CloseMem( datasource : pointer ) : cint; cdecl;$/;"	f
ogg_DecoderClose	Engines/ZenGL/src/zgl_sound_ogg.pas	/^procedure ogg_DecoderClose( var Stream : zglTSoundStream );$/;"	p
ogg_DecoderLoop	Engines/ZenGL/src/zgl_sound_ogg.pas	/^procedure ogg_DecoderLoop( var Stream : zglTSoundStream );$/;"	p
ogg_DecoderOpen	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_DecoderOpen( var Stream : zglTSoundStream; const FileName : UTF8String ) : Boolean;$/;"	f
ogg_DecoderOpenMem	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_DecoderOpenMem( var Stream : zglTSoundStream; const Memory : zglTMemory ) : Boolean/;"	f
ogg_DecoderRead	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_DecoderRead( var Stream : zglTSoundStream; Buffer : PByteArray; Bytes : LongWord; o/;"	f
ogg_DecoderSeek	Engines/ZenGL/src/zgl_sound_ogg.pas	/^procedure ogg_DecoderSeek( var Stream : zglTSoundStream; Milliseconds : Double );$/;"	p
ogg_GetPos	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_GetPos( datasource : pointer ) : clong; cdecl;$/;"	f
ogg_GetPosMem	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_GetPosMem( datasource : pointer ) : clong; cdecl;$/;"	f
ogg_LoadFromFile	Engines/ZenGL/src/zgl_sound_ogg.pas	/^procedure ogg_LoadFromFile( const FileName : UTF8String; out Data : PByteArray; out Size, Format/;"	p
ogg_LoadFromMemory	Engines/ZenGL/src/zgl_sound_ogg.pas	/^procedure ogg_LoadFromMemory( const Memory : zglTMemory; out Data : PByteArray; out Size, Format/;"	p
ogg_Read	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_Read( ptr : pointer; size, nmemb : csize_t; datasource : pointer ) : csize_t; cdecl/;"	f
ogg_ReadMem	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_ReadMem( ptr : pointer; size, nmemb : csize_t; datasource : pointer ) : csize_t; cd/;"	f
ogg_Seek	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_Seek( datasource : pointer; offset : cint64; whence : cint ) : cint; cdecl;$/;"	f
ogg_SeekMem	Engines/ZenGL/src/zgl_sound_ogg.pas	/^function ogg_SeekMem( datasource : pointer; offset : cint64; whence : cint ) : cint; cdecl;$/;"	f
ogg_page_bos	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_page_bos(og: pogg_page): cint; cdecl; external;$/;"	f
ogg_page_granulepos	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_page_granulepos(og: pogg_page): ogg_int64_t; cdecl; external;$/;"	f
ogg_page_serialno	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_page_serialno(og: pogg_page): cint; cdecl; external;$/;"	f
ogg_stream_clear	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_stream_clear(os: pogg_stream_state): cint; cdecl; external;$/;"	f
ogg_stream_init	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_stream_init(os: pogg_stream_state; serialno: cint): cint; cdecl; external;$/;"	f
ogg_stream_packetout	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_stream_packetout(os: pogg_stream_state; op: pogg_packet): cint; cdecl; external;$/;"	f
ogg_stream_packetpeek	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_stream_packetpeek(os: pogg_stream_state; op: pogg_packet): cint; cdecl; external;$/;"	f
ogg_stream_pagein	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_stream_pagein(os: pogg_stream_state; og: pogg_page): cint; cdecl; external;$/;"	f
ogg_stream_reset	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_stream_reset(os: pogg_stream_state): cint; cdecl; external;$/;"	f
ogg_sync_buffer	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_buffer(oy: pogg_sync_state; size: clong): pointer; cdecl; external;$/;"	f
ogg_sync_clear	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_clear(oy: pogg_sync_state): cint; cdecl; external;$/;"	f
ogg_sync_init	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_init(oy: pogg_sync_state): cint; cdecl; external;$/;"	f
ogg_sync_pageout	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_pageout(oy: pogg_sync_state; og: pogg_page): cint; cdecl; external;$/;"	f
ogg_sync_pageseek	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_pageseek(oy: pogg_sync_state; og: pogg_page): cint; cdecl; external;$/;"	f
ogg_sync_reset	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_reset(oy: pogg_sync_state): cint; cdecl; external;$/;"	f
ogg_sync_wrote	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ogg_sync_wrote(oy: pogg_sync_state; bytes: clong): cint; cdecl; external;$/;"	f
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPBodyPositionEvent = procedure(const Body: TCPBody;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPBodyVelocityEvent = procedure(const Body: TCPBody; const Gravity: TCPVect;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPCollisionBeginEvent = function(const Space: TCPSpace;$/;"	f
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPCollisionPostSolveEvent = procedure(const Space: TCPSpace;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPCollisionPreSolveEvent = function(const Space: TCPSpace;$/;"	f
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPCollisionSeparateEvent = procedure(const Space: TCPSpace;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPDampedSpringForceEvent = function(const Spring: TCPDampedSpring;$/;"	f
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPForEachArbiterEvent = procedure(const Space: TCPSpace;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPForEachBodyEvent = procedure(const Space: TCPSpace;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPForEachShapeEvent = procedure(const Space: TCPSpace;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPPointQueryEvent = procedure(const Shape: TCPShape; const Data: Pointer) of Object;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPPostStepEvent = procedure(const Space: TCPSpace; const Obj, Data: Pointer) of Object;$/;"	p
onst	Engines/MondoZenGL/mzChipmunk.pas	/^  TCPSegmentQueryEvent = procedure(const Shape: TCPShape; const Distance: TCPFloat;$/;"	p
onst	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alcOpenDevice          : function(const devicename: PAnsiChar): PALCdevice; cdecl;$/;"	f
ontext	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alcDestroyContext      : procedure(context: PALCcontext); cdecl;$/;"	p
ontext	Engines/ZenGL/src/zgl_sound_openal.pas	/^  alcMakeContextCurrent  : function(context: PALCcontext): Boolean; cdecl;$/;"	f
out	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_GetMem      : procedure( out Mem : Pointer; Size : LongWord );$/;"	p
ov_clear	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_clear(var vf: OggVorbis_File): cint; cdecl; external;$/;"	f
ov_info	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_info(var vf: OggVorbis_File; link: cint): pvorbis_info; cdecl; external;$/;"	f
ov_open_callbacks	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_open_callbacks(datasource: pointer; out vf: OggVorbis_File; initial: pointer; ibyt/;"	f
ov_pcm_seek	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_pcm_seek(var vf: OggVorbis_File; pos: cint64): cint; cdecl; external;$/;"	f
ov_pcm_total	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_pcm_total(var vf: OggVorbis_File; i: cint): ogg_int64_t; cdecl; external;$/;"	f
ov_read	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_read(var vf: OggVorbis_File; buffer: pointer; length: cint; {$IFDEF USE_VORBIS} bi/;"	f
ov_time_seek	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  function ov_time_seek(var vf: OggVorbis_File; {$IFDEF USE_VORBIS} time: double {$ELSE} ms: ogg/;"	f
pData	Engines/ZenGL/src/zgl_textures.pas	/^  tex_CalcCustomEffect : procedure( pData : PByteArray; Width, Height : Word );$/;"	p
particle2d_Proc	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure particle2d_Proc( Particle : zglPParticle2D; Params : zglPParticleParams; dt : Double )/;"	p
pengine2d_AddEmitter	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_AddEmitter( Emitter : zglPEmitter2D; Result : zglPPEmitter2D = nil; X : Sing/;"	p
pengine2d_ClearAll	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_ClearAll;$/;"	p
pengine2d_DelEmitter	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_DelEmitter( ID : Integer );$/;"	p
pengine2d_Draw	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_Draw;$/;"	p
pengine2d_Get	Engines/ZenGL/src/zgl_particles_2d.pas	/^function  pengine2d_Get : zglPPEngine2D;$/;"	f
pengine2d_Get	Engines/ZenGL/src/zgl_particles_2d.pas	/^function pengine2d_Get : zglPPEngine2D;$/;"	f
pengine2d_Proc	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_Proc( dt : Double );$/;"	p
pengine2d_Set	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_Set( PEngine : zglPPEngine2D );$/;"	p
pengine2d_Sort	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_Sort( iLo, iHi : Integer );$/;"	p
pengine2d_SortID	Engines/ZenGL/src/zgl_particles_2d.pas	/^procedure pengine2d_SortID( iLo, iHi : Integer );$/;"	p
platform_GetRes	Engines/ZenGL/src/zgl_file.pas	/^function platform_GetRes( const FileName : UTF8String ) : UTF8String;$/;"	f
png_CopyNonInterlacedGrayscaleAlpha	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_CopyNonInterlacedGrayscaleAlpha( Src, Dest : PByte; Width : Integer );$/;"	p
png_CopyNonInterlacedPalette	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_CopyNonInterlacedPalette( Src, Dest : PByte; Width : Integer );$/;"	p
png_CopyNonInterlacedRGB	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_CopyNonInterlacedRGB( Src, Dest : PByte; Width : Integer );$/;"	p
png_CopyNonInterlacedRGBAlpha	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_CopyNonInterlacedRGBAlpha( Src, Dest : PByte; Width : Integer );$/;"	p
png_DecodeIDAT	Engines/ZenGL/src/zgl_lib_zip.pas	/^function png_DecodeIDAT( var pngMem : zglTMemory; var pngZStream : z_stream_s; out pngIDATEnd : /;"	f
png_FilterRow	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_FilterRow( var pngRowBuffer : PByteArray; var pngRowBufferPrev : PByteArray; pngRo/;"	p
png_GetPixelInfo	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_GetPixelInfo( var pngHeader : zglTPNGHeader; out pngRowSize, pngOffset : LongWord /;"	p
png_LoadFromFile	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_LoadFromFile( const FileName : UTF8String; out Data : PByteArray; out W, H, Format/;"	p
png_LoadFromMemory	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_LoadFromMemory( const Memory : zglTMemory; out Data : PByteArray; out W, H, Format/;"	p
png_ReadIDAT	Engines/ZenGL/src/zgl_textures_png.pas	/^function png_ReadIDAT( var pngMem : zglTMemory; pngHeader : zglTPNGHeader; var Data : PByteArray/;"	f
png_ReadIHDR	Engines/ZenGL/src/zgl_textures_png.pas	/^function png_ReadIHDR( var pngMem : zglTMemory; out pngHeader : zglTPNGheader; out Data : PByteA/;"	f
png_ReadPLTE	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_ReadPLTE( var pngMem : zglTMemory; Size : Integer );$/;"	p
png_ReadtRNS	Engines/ZenGL/src/zgl_textures_png.pas	/^procedure png_ReadtRNS( var pngMem : zglTMemory; Size : Integer );$/;"	p
poly	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpBoxShapeInit : function( poly : PcpPolyShape; body : PcpBody; width : cpFloat; height : cpFl/;"	f
pow	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  function pow( x, y : Double ) : Double; cdecl; external 'msvcrt.dll';$/;"	f
pr2d_Circle	Engines/ZenGL/src/zgl_primitives_2d.pas	/^procedure pr2d_Circle( X, Y, Radius : Single; Color : LongWord; Alpha : Byte = 255; Quality : Wo/;"	p
pr2d_Ellipse	Engines/ZenGL/src/zgl_primitives_2d.pas	/^procedure pr2d_Ellipse( X, Y, xRadius, yRadius : Single; Color : LongWord; Alpha : Byte = 255; Q/;"	p
pr2d_Line	Engines/ZenGL/src/zgl_primitives_2d.pas	/^procedure pr2d_Line( X1, Y1, X2, Y2 : Single; Color : LongWord; Alpha : Byte = 255; FX : LongWor/;"	p
pr2d_Pixel	Engines/ZenGL/src/zgl_primitives_2d.pas	/^procedure pr2d_Pixel( X, Y : Single; Color : LongWord; Alpha : Byte = 255 );$/;"	p
pr2d_Rect	Engines/ZenGL/src/zgl_primitives_2d.pas	/^procedure pr2d_Rect( X, Y, W, H : Single; Color : LongWord; Alpha : Byte = 255; FX : LongWord = /;"	p
pr2d_TriList	Engines/ZenGL/src/zgl_primitives_2d.pas	/^procedure pr2d_TriList( Texture : zglPTexture; TriList, TexCoords : zglPPoints2D; iLo, iHi : Int/;"	p
printf	Engines/ZenGL/src/zgl_utils.pas	/^function printf( format : PAnsiChar; const args : array of const ) : Integer; cdecl; external 'l/;"	f
ptr	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpArrayIter = procedure( ptr : Pointer; data : Pointer ); cdecl;$/;"	p
put_KeepOriginalFormat	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function put_KeepOriginalFormat(fkeep: BOOL): HResult; stdcall;$/;"	f
pvr_LoadFromFile	Engines/ZenGL/src/zgl_textures_pvr.pas	/^procedure pvr_LoadFromFile( const FileName : UTF8String; out Data : PByteArray; out W, H, Format/;"	p
pvr_LoadFromMemory	Engines/ZenGL/src/zgl_textures_pvr.pas	/^procedure pvr_LoadFromMemory( const Memory : zglTMemory; out Data : PByteArray; out W, H, Format/;"	p
py	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXChooseFBConfig: function(dpy: PDisplay; screen: Integer; attribList: PInteger; nitems: PInt/;"	f
py	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXCreateGLXPbufferSGIX: function(dpy: PDisplay; config: Integer; width, height: LongWord; att/;"	f
py	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXCreatePbuffer: function(dpy: PDisplay; config: Integer; attribList: PInteger): GLXPBuffer; /;"	f
py	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXDestroyGLXPbufferSGIX: procedure(dpy: PDisplay; pbuf: GLXPBuffer); cdecl;$/;"	p
py	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXDestroyPbuffer: procedure(dpy: PDisplay; pbuf: GLXPBuffer); cdecl;$/;"	p
py	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glXGetVisualFromFBConfig: function(dpy: PDisplay; config: Integer): PXVisualInfo; cdecl;$/;"	f
qsort	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure qsort; cdecl; external 'msvcrt.dll';$/;"	p
ramebuffer	Engines/ZenGL/src/zgl_opengl_all.pas	/^  glIsFramebuffer: function(framebuffer: GLuint): GLboolean; stdcall;$/;"	f
realloc	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure realloc; cdecl; external 'msvcrt.dll';$/;"	p
remove	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure remove; cdecl; external 'msvcrt.dll';$/;"	p
res_AddToQueue	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_AddToQueue( Type_ : Integer; FromFile : Boolean; Resource : Pointer );$/;"	p
res_BeginQueue	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_BeginQueue( QueueID : Byte );$/;"	p
res_DelItem	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_DelItem( var Item : zglPResourceItem );$/;"	p
res_EndQueue	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_EndQueue;$/;"	p
res_Free	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_Free;$/;"	p
res_GetCompleted	Engines/ZenGL/src/zgl_resources.pas	/^function  res_GetCompleted : Integer;$/;"	f
res_GetCompleted	Engines/ZenGL/src/zgl_resources.pas	/^function res_GetCompleted : Integer;$/;"	f
res_GetPercentage	Engines/ZenGL/src/zgl_resources.pas	/^function  res_GetPercentage( QueueID : Byte ) : Integer;$/;"	f
res_GetPercentage	Engines/ZenGL/src/zgl_resources.pas	/^function res_GetPercentage( QueueID : Byte ) : Integer;$/;"	f
res_Init	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_Init;$/;"	p
res_Proc	Engines/ZenGL/src/zgl_resources.pas	/^procedure res_Proc;$/;"	p
res_ProcQueue	Engines/ZenGL/src/zgl_resources.pas	/^function res_ProcQueue( data : Pointer ) : LongInt; {$IFDEF USE_EXPORT_C} register; {$ENDIF}$/;"	f
rtarget_Add	Engines/ZenGL/src/zgl_render_target.pas	/^function  rtarget_Add( Surface : zglPTexture; Flags : Byte ) : zglPRenderTarget;$/;"	f
rtarget_Add	Engines/ZenGL/src/zgl_render_target.pas	/^function rtarget_Add( Surface : zglPTexture; Flags : Byte ) : zglPRenderTarget;$/;"	f
rtarget_Del	Engines/ZenGL/src/zgl_render_target.pas	/^procedure rtarget_Del( var Target : zglPRenderTarget );$/;"	p
rtarget_DrawIn	Engines/ZenGL/src/zgl_render_target.pas	/^procedure rtarget_DrawIn( Target : zglPRenderTarget; RenderCallback : zglTRenderCallback; Data :/;"	p
rtarget_Restore	Engines/ZenGL/src/zgl_render_target.pas	/^procedure rtarget_Restore( var Target : zglPRenderTarget );$/;"	p
rtarget_Set	Engines/ZenGL/src/zgl_render_target.pas	/^procedure rtarget_Set( Target : zglPRenderTarget );$/;"	p
s	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_stream_clear      : function(os: pogg_stream_state): cint; cdecl;$/;"	f
s	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_stream_init       : function(os: pogg_stream_state; serialno: cint): cint; cdecl;$/;"	f
s	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_stream_packetout  : function(os: pogg_stream_state; op: pogg_packet): cint; cdecl;$/;"	f
s	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_stream_packetpeek : function(os: pogg_stream_state; op: pogg_packet): cint; cdecl;$/;"	f
s	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_stream_pagein     : function(os: pogg_stream_state; og: pogg_page): cint; cdecl;$/;"	f
s	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_stream_reset      : function(os: pogg_stream_state): cint; cdecl;$/;"	f
scissor_Begin	Engines/ZenGL/src/zgl_render.pas	/^procedure scissor_Begin( X, Y, Width, Height : Integer; ConsiderCamera : Boolean = TRUE );$/;"	p
scissor_End	Engines/ZenGL/src/zgl_render.pas	/^procedure scissor_End;$/;"	p
scr_Clear	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_Clear;$/;"	p
scr_CorrectResolution	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_CorrectResolution( Width, Height : Word );$/;"	p
scr_Create	Engines/ZenGL/src/zgl_screen.pas	/^function  scr_Create : Boolean;$/;"	f
scr_Destroy	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_Destroy;$/;"	p
scr_Flush	Engines/ZenGL/headers/zglHeader.pas	/^  scr_Flush             : procedure;$/;"	p
scr_Flush	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_Flush;$/;"	p
scr_GetResList	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_GetResList;$/;"	p
scr_Init	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_Init;$/;"	p
scr_ReadPixels	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_ReadPixels( var pData : Pointer; X, Y, Width, Height : Word );$/;"	p
scr_Reset	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_Reset;$/;"	p
scr_SetFSAA	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_SetFSAA( FSAA : Byte );$/;"	p
scr_SetOptions	Engines/ZenGL/src/zgl_screen.pas	/^function  scr_SetOptions( Width, Height, Refresh : Word; FullScreen, VSync : Boolean ) : Boolean/;"	f
scr_SetVSync	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_SetVSync( VSync : Boolean );$/;"	p
scr_SetViewPort	Engines/ZenGL/src/zgl_screen.pas	/^procedure scr_SetViewPort;$/;"	p
seg	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSegmentShapeInit : function( seg : PcpSegmentShape; body : PcpBody; a : cpVect; b : cpVect; /;"	f
select	Engines/ZenGL/src/zgl_utils.pas	/^function select( n : longint; readfds, writefds, exceptfds : Pointer; var timeout : timeVal ) : /;"	f
sengine2d_AddCustom	Engines/ZenGL/src/zgl_sengine_2d.pas	/^function  sengine2d_AddCustom( Texture : zglPTexture; Size : LongWord; Layer : Integer; OnInit, /;"	f
sengine2d_AddCustom	Engines/ZenGL/src/zgl_sengine_2d.pas	/^function sengine2d_AddCustom( Texture : zglPTexture; Size : LongWord; Layer : Integer; OnInit, O/;"	f
sengine2d_AddSprite	Engines/ZenGL/src/zgl_sengine_2d.pas	/^function  sengine2d_AddSprite( Texture : zglPTexture; Layer : Integer; OnInit, OnDraw, OnProc, O/;"	f
sengine2d_AddSprite	Engines/ZenGL/src/zgl_sengine_2d.pas	/^function sengine2d_AddSprite( Texture : zglPTexture; Layer : Integer; OnInit, OnDraw, OnProc, On/;"	f
sengine2d_ClearAll	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_ClearAll;$/;"	p
sengine2d_DelSprite	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_DelSprite( ID : Integer );$/;"	p
sengine2d_Draw	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_Draw;$/;"	p
sengine2d_Get	Engines/ZenGL/src/zgl_sengine_2d.pas	/^function  sengine2d_Get : zglPSEngine2D;$/;"	f
sengine2d_Get	Engines/ZenGL/src/zgl_sengine_2d.pas	/^function sengine2d_Get : zglPSEngine2D;$/;"	f
sengine2d_Proc	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_Proc;$/;"	p
sengine2d_Set	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_Set( SEngine : zglPSEngine2D );$/;"	p
sengine2d_Sort	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_Sort( iLo, iHi : Integer );$/;"	p
sengine2d_SortID	Engines/ZenGL/src/zgl_sengine_2d.pas	/^procedure sengine2d_SortID( iLo, iHi : Integer );$/;"	p
set_hPal	Engines/ZenGL/src/zgl_textures_jpg.pas	/^    function set_hPal(hpal: OLE_HANDLE): HResult; stdcall;$/;"	f
sgrid2d_Draw	Engines/ZenGL/src/zgl_grid_2d.pas	/^procedure sgrid2d_Draw( Texture : zglPTexture; X, Y : Single; Grid : zglPGrid2D; Alpha : Byte = /;"	p
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^    cacheData : function( shape : PcpShape; p : cpVect; rot : cpVect ) : cpBB; cdecl;$/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^    destroy : procedure( shape : PcpShape ); cdecl;$/;"	p
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^    pointQuery : function( shape : PcpShape; p : cpVect ) : cpBool; cdecl;$/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^    segmentQuery : procedure( shape : PcpShape; a : cpVect; b : cpVect; info : PcpSegmentQueryIn/;"	p
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPolyShapeGetNumVerts : function( shape : PcpShape ) : Integer; cdecl;$/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPolyShapeGetVert : function( shape : PcpShape; idx : Integer ) : cpVect; cdecl;$/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpShapeCacheBB : function( shape : PcpShape ) : cpBB; cdecl;$/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpShapeFree : procedure( shape : PcpShape ); cdecl;$/;"	p
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpShapeInit : function( shape : PcpShape; klass : PcpShapeClass; body : PcpBody ) : PcpShape; /;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpShapePointQuery : function( shape : PcpShape; p : cpVect ) : cpBool; cdecl;$/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpShapeSegmentQuery : function( shape : PcpShape; a : cpVect; b : cpVect; info : PcpSegmentQue/;"	f
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceBBQueryFunc = procedure( shape : PcpShape; data : Pointer ); cdecl;$/;"	p
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpacePointQueryFunc = procedure( shape : PcpShape; data : Pointer ); cdecl;$/;"	p
shape	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceSegmentQueryFunc = procedure( shape : PcpShape; t : cpFloat; n : cpVect; data : Pointer/;"	p
shouldAutorotate	Engines/ZenGL/src/zgl_application.pas	/^    function shouldAutorotate : Boolean; message 'shouldAutorotate';$/;"	f
shouldAutorotateToInterfaceOrientation	Engines/ZenGL/src/zgl_application.pas	/^    function shouldAutorotateToInterfaceOrientation( interfaceOrientation : UIInterfaceOrientati/;"	f
size	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpHashSetNew : function( size : Integer; eqlFunc : cpHashSetEqlFunc; trans : cpHashSetTransFun/;"	f
snd_Add	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_Add( SourceCount : Integer ) : zglPSound;$/;"	f
snd_Add	Engines/ZenGL/src/zgl_sound.pas	/^function snd_Add( SourceCount : Integer ) : zglPSound;$/;"	f
snd_Create	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_Create( var Sound : zglTSound; Format : LongWord );$/;"	p
snd_Del	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_Del( var Sound : zglPSound );$/;"	p
snd_Free	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_Free;$/;"	p
snd_Get	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_Get( Sound : zglPSound; ID, What : Integer ) : Integer;$/;"	f
snd_Get	Engines/ZenGL/src/zgl_sound.pas	/^function snd_Get( Sound : zglPSound; ID, What : Integer ) : Integer;$/;"	f
snd_GetStreamID	Engines/ZenGL/src/zgl_sound.pas	/^function snd_GetStreamID : Integer;$/;"	f
snd_Init	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_Init : Boolean;$/;"	f
snd_Init	Engines/ZenGL/src/zgl_sound.pas	/^function snd_Init : Boolean;$/;"	f
snd_LoadFromFile	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_LoadFromFile( const FileName : UTF8String; SourceCount : Integer = 8 ) : zglPSound/;"	f
snd_LoadFromFile	Engines/ZenGL/src/zgl_sound.pas	/^function snd_LoadFromFile( const FileName : UTF8String; SourceCount : Integer = 8 ) : zglPSound;$/;"	f
snd_LoadFromMemory	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_LoadFromMemory( const Memory : zglTMemory; const Extension : UTF8String; SourceCou/;"	f
snd_LoadFromMemory	Engines/ZenGL/src/zgl_sound.pas	/^function snd_LoadFromMemory( const Memory : zglTMemory; const Extension : UTF8String; SourceCoun/;"	f
snd_MainLoop	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_MainLoop;$/;"	p
snd_PauseStream	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_PauseStream( ID : Integer );$/;"	p
snd_Play	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_Play( Sound : zglPSound; Loop : Boolean = FALSE; X : Single = 0; Y : Single = 0; Z/;"	f
snd_Play	Engines/ZenGL/src/zgl_sound.pas	/^function snd_Play( Sound : zglPSound; Loop : Boolean = FALSE; X : Single = 0; Y : Single = 0; Z /;"	f
snd_PlayFile	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_PlayFile( const FileName : UTF8String; Loop : Boolean = FALSE; Volume : Single = S/;"	f
snd_PlayFile	Engines/ZenGL/src/zgl_sound.pas	/^function snd_PlayFile( const FileName : UTF8String; Loop : Boolean = FALSE; Volume : Single = SN/;"	f
snd_PlayMemory	Engines/ZenGL/src/zgl_sound.pas	/^function  snd_PlayMemory( const Memory : zglTMemory; const Extension : UTF8String; Loop : Boolea/;"	f
snd_PlayMemory	Engines/ZenGL/src/zgl_sound.pas	/^function snd_PlayMemory( const Memory : zglTMemory; const Extension : UTF8String; Loop : Boolean/;"	f
snd_PlayStream	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_PlayStream( ID : Integer; Loop : Boolean; Volume : Single );$/;"	p
snd_ProcStream	Engines/ZenGL/src/zgl_sound.pas	/^function snd_ProcStream( data : Pointer ) : LongInt; {$IFDEF USE_EXPORT_C} register; {$ENDIF}$/;"	f
snd_ResumeStream	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_ResumeStream( ID : Integer );$/;"	p
snd_SeekStream	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_SeekStream( ID : Integer; Milliseconds : Double );$/;"	p
snd_SetPos	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_SetPos( Sound : zglPSound; ID : Integer; X, Y, Z : Single );$/;"	p
snd_SetSpeed	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_SetSpeed( Sound : zglPSound; ID : Integer; Speed : Single );$/;"	p
snd_SetVolume	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_SetVolume( Sound : zglPSound; ID : Integer; Volume : Single );$/;"	p
snd_Stop	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_Stop( Sound : zglPSound; ID : Integer );$/;"	p
snd_StopStream	Engines/ZenGL/src/zgl_sound.pas	/^procedure snd_StopStream( ID : Integer );$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPostStepFunc = procedure( space : PcpSpace; obj : Pointer; data : Pointer ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceAddBody : function( space : PcpSpace; body : PcpBody ) : PcpBody; cdecl;$/;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceAddCollisionHandler : procedure( space : PcpSpace; a : cpCollisionType; b : cpCollision/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceAddConstraint : function( space : PcpSpace; constraint : PcpConstraint ) : PcpConstrain/;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceAddShape : function( space : PcpSpace; shape : PcpShape ) : PcpShape; cdecl;$/;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceAddStaticShape : function( space : PcpSpace; shape : PcpShape ) : PcpShape; cdecl;$/;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceDestroy : procedure( space : PcpSpace ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceFree : procedure( space : PcpSpace ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceFreeChildren : procedure( space : PcpSpace ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceInit : function( space : PcpSpace ) : PcpSpace; cdecl;$/;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpacePointQueryFirst : function( space : PcpSpace; point : cpVect; layers : cpLayers; group /;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRehashShape : procedure( space : PcpSpace; shape : PcpShape ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRehashStatic : procedure( space : PcpSpace ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRemoveBody : procedure( space : PcpSpace; body : PcpBody ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRemoveCollisionHandler : procedure( space : PcpSpace; a : cpCollisionType; b : cpCollis/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRemoveConstraint : procedure( space : PcpSpace; constraint : PcpConstraint );  cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRemoveShape : procedure( space : PcpSpace; shape : PcpShape ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceRemoveStaticShape : procedure( space : PcpSpace; shape : PcpShape ); cdecl;$/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceResizeActiveHash : procedure( space : PcpSpace; dim : cpFloat; count : Integer ); cdecl/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceResizeStaticHash : procedure( space : PcpSpace; dim : cpFloat; count : Integer ); cdecl/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceSegmentQueryFirst : function( space : PcpSpace; start : cpVect; _end : cpVect; layers :/;"	f
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceSetDefaultCollisionHandler : procedure( space : PcpSpace; _begin : cpCollisionBeginFunc/;"	p
space	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpSpaceStep : procedure( space : PcpSpace; dt : cpFloat ); cdecl;$/;"	p
spring	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpDampedRotarySpringTorqueFunc = function( spring : PcpConstraint; relativeAngle : cpFloat ) :/;"	f
spring	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpDampedSpringForceFunc = function( spring : PcpConstraint; dist : cpFloat ) : cpFloat; cdecl;$/;"	f
sprintf	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure sprintf; cdecl; external 'msvcrt.dll';$/;"	p
sprite2d_InScreenCamera	Engines/ZenGL/src/zgl_render_2d.pas	/^function sprite2d_InScreenCamera( X, Y, W, H, Angle : Single ) : Boolean;$/;"	f
sprite2d_InScreenSimple	Engines/ZenGL/src/zgl_render_2d.pas	/^function sprite2d_InScreenSimple( X, Y, W, H, Angle : Single ) : Boolean;$/;"	f
ssprite2d_Draw	Engines/ZenGL/src/zgl_sprite_2d.pas	/^procedure ssprite2d_Draw( Texture : zglPTexture; X, Y, W, H, Angle : Single; Alpha : Byte = 255;/;"	p
strcmp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure strcmp; cdecl; external 'msvcrt.dll';$/;"	p
strerror	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure strerror; cdecl; external 'msvcrt.dll';$/;"	p
strlen	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure strlen; cdecl; external 'msvcrt.dll';$/;"	p
strncmp	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure strncmp; cdecl; external 'msvcrt.dll';$/;"	p
strrchr	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure strrchr; cdecl; external 'msvcrt.dll';$/;"	p
strtoul	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure strtoul; cdecl; external 'msvcrt.dll';$/;"	p
supportedInterfaceOrientations	Engines/ZenGL/src/zgl_application.pas	/^    function supportedInterfaceOrientations : LongWord; message 'supportedInterfaceOrientations'/;"	f
tessBegin	Engines/ZenGL/src/zgl_math_2d.pas	/^procedure tessBegin( Mode : Integer ); stdcall;$/;"	p
tessVertex2f	Engines/ZenGL/src/zgl_math_2d.pas	/^procedure tessVertex2f( Vertex : zglPPoint2D ); stdcall;$/;"	p
tess_AddHole	Engines/ZenGL/src/zgl_math_2d.pas	/^procedure tess_AddHole( Contour : zglPPoints2D; iLo, iHi : Integer; LastHole : Boolean = TRUE );$/;"	p
tess_GetData	Engines/ZenGL/src/zgl_math_2d.pas	/^function  tess_GetData( out TriPoints : zglPPoints2D ) : Integer;$/;"	f
tess_GetData	Engines/ZenGL/src/zgl_math_2d.pas	/^function tess_GetData( out TriPoints : zglPPoints2D ) : Integer;$/;"	f
tess_Triangulate	Engines/ZenGL/src/zgl_math_2d.pas	/^procedure tess_Triangulate( Contour : zglPPoints2D; iLo, iHi : Integer; AddHoles : Boolean = FAL/;"	p
tex_Add	Engines/ZenGL/src/zgl_textures.pas	/^function  tex_Add : zglPTexture;$/;"	f
tex_Add	Engines/ZenGL/src/zgl_textures.pas	/^function tex_Add : zglPTexture;$/;"	f
tex_CalcAlpha	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcAlpha( pData : PByteArray; Width, Height : Word );$/;"	p
tex_CalcFlags	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcFlags( var Texture : zglTTexture; var pData : PByteArray );$/;"	p
tex_CalcGrayScale	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcGrayScale( pData : PByteArray; Width, Height : Word );$/;"	p
tex_CalcInvert	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcInvert( pData : PByteArray; Width, Height : Word );$/;"	p
tex_CalcPOT	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcPOT( var pData : PByteArray; var Width, Height : Word; var U, V : Single; Pixe/;"	p
tex_CalcTexCoords	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcTexCoords( var Texture : zglTTexture; FramesX : Integer = 1; FramesY : Integer/;"	p
tex_CalcTransparent	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_CalcTransparent( pData : PByteArray; TransparentColor : LongWord; Width, Height : /;"	p
tex_Create	Engines/ZenGL/src/zgl_textures.pas	/^function  tex_Create( var Data : PByteArray; Width, Height : Word; Format : Word = TEX_FORMAT_RG/;"	f
tex_Create	Engines/ZenGL/src/zgl_textures.pas	/^function tex_Create( var Data : PByteArray; Width, Height : Word; Format : Word = TEX_FORMAT_RGB/;"	f
tex_CreateGL	Engines/ZenGL/src/zgl_textures.pas	/^function  tex_CreateGL( var Texture : zglTTexture; pData : PByteArray ) : Boolean;$/;"	f
tex_CreateGL	Engines/ZenGL/src/zgl_textures.pas	/^function tex_CreateGL( var Texture : zglTTexture; pData : PByteArray ) : Boolean;$/;"	f
tex_CreateZero	Engines/ZenGL/src/zgl_textures.pas	/^function  tex_CreateZero( Width, Height : Word; Color : LongWord = $000000; Flags : LongWord = T/;"	f
tex_CreateZero	Engines/ZenGL/src/zgl_textures.pas	/^function tex_CreateZero( Width, Height : Word; Color, Flags : LongWord ) : zglPTexture;$/;"	f
tex_Del	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_Del( var Texture : zglPTexture );$/;"	p
tex_Filter	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_Filter( Texture : zglPTexture; Flags : LongWord );$/;"	p
tex_GetData	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_GetData( Texture : zglPTexture; out pData : PByteArray );$/;"	p
tex_GetVRAM	Engines/ZenGL/src/zgl_textures.pas	/^function tex_GetVRAM( Texture : zglPTexture ) : LongWord;$/;"	f
tex_LoadFromFile	Engines/ZenGL/src/zgl_textures.pas	/^function  tex_LoadFromFile( const FileName : UTF8String; TransparentColor : LongWord = TEX_NO_CO/;"	f
tex_LoadFromFile	Engines/ZenGL/src/zgl_textures.pas	/^function tex_LoadFromFile( const FileName : UTF8String; TransparentColor, Flags : LongWord ) : z/;"	f
tex_LoadFromMemory	Engines/ZenGL/src/zgl_textures.pas	/^function  tex_LoadFromMemory( const Memory : zglTMemory; const Extension : UTF8String; Transpare/;"	f
tex_LoadFromMemory	Engines/ZenGL/src/zgl_textures.pas	/^function tex_LoadFromMemory( const Memory : zglTMemory; const Extension : UTF8String; Transparen/;"	f
tex_RestoreFromFile	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_RestoreFromFile( var Texture : zglPTexture; const FileName : UTF8String; Transpare/;"	p
tex_RestoreFromMemory	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_RestoreFromMemory( var Texture : zglPTexture; const Memory : zglTMemory; const Ext/;"	p
tex_SetAnisotropy	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_SetAnisotropy( Level : Byte );$/;"	p
tex_SetData	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_SetData( Texture : zglPTexture; pData : PByteArray; X, Y, Width, Height : Word; St/;"	p
tex_SetFrameSize	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_SetFrameSize( var Texture : zglPTexture; FrameWidth, FrameHeight : Word );$/;"	p
tex_SetMask	Engines/ZenGL/src/zgl_textures.pas	/^procedure tex_SetMask( var Texture : zglPTexture; Mask : zglPTexture );$/;"	p
textFieldDidEndEditing	Engines/ZenGL/src/zgl_application.pas	/^    function textFieldDidEndEditing( textField : UITextField ) : Boolean; message 'textFieldDidE/;"	f
textFieldEditingChanged	Engines/ZenGL/src/zgl_application.pas	/^    procedure textFieldEditingChanged; message 'textFieldEditingChanged';$/;"	p
textFieldShouldBeginEditing	Engines/ZenGL/src/zgl_application.pas	/^    function textFieldShouldBeginEditing( textField : UITextField ) : Boolean; message 'textFiel/;"	f
textFieldShouldReturn	Engines/ZenGL/src/zgl_application.pas	/^    function textFieldShouldReturn( textField : UITextField ) : Boolean; message 'textFieldShoul/;"	f
textField_shouldChangeCharactersInRange_replacementString	Engines/ZenGL/src/zgl_application.pas	/^    function textField_shouldChangeCharactersInRange_replacementString( textField : UITextField;/;"	f
textFx_SetLength	Engines/ZenGL/src/zgl_text.pas	/^procedure textFx_SetLength( Length : Integer; LastCoord : zglPPoint2D = nil; LastCharDesc : zglP/;"	p
text_CalcRect	Engines/ZenGL/src/zgl_text.pas	/^procedure text_CalcRect( Font : zglPFont; const Rect : zglTRect; const Text : UTF8String; Flags /;"	p
text_Draw	Engines/ZenGL/src/zgl_text.pas	/^procedure text_Draw( Font : zglPFont; X, Y : Single; const Text : UTF8String; Flags : LongWord =/;"	p
text_DrawEx	Engines/ZenGL/src/zgl_text.pas	/^procedure text_DrawEx( Font : zglPFont; X, Y, Scale, Step : Single; const Text : UTF8String; Alp/;"	p
text_DrawInRect	Engines/ZenGL/src/zgl_text.pas	/^procedure text_DrawInRect( Font : zglPFont; const Rect : zglTRect; const Text : UTF8String; Flag/;"	p
text_DrawInRectEx	Engines/ZenGL/src/zgl_text.pas	/^procedure text_DrawInRectEx( Font : zglPFont; const Rect : zglTRect; Scale, Step : Single; const/;"	p
text_GetHeight	Engines/ZenGL/src/zgl_text.pas	/^function  text_GetHeight( Font : zglPFont; Width : Single; const Text : UTF8String; Scale : Sing/;"	f
text_GetHeight	Engines/ZenGL/src/zgl_text.pas	/^function text_GetHeight( Font : zglPFont; Width : Single; const Text : UTF8String; Scale : Singl/;"	f
text_GetWidth	Engines/ZenGL/src/zgl_text.pas	/^function  text_GetWidth( Font : zglPFont; const Text : UTF8String; Step : Single = 0.0 ) : Singl/;"	f
text_GetWidth	Engines/ZenGL/src/zgl_text.pas	/^function text_GetWidth( Font : zglPFont; const Text : UTF8String; Step : Single = 0.0 ) : Single/;"	f
texture2d_Draw	Engines/ZenGL/src/zgl_sprite_2d.pas	/^procedure texture2d_Draw( Texture : zglPTexture; const TexCoord : array of zglTPoint2D; X, Y, W,/;"	p
tga_FlipHorizontally	Engines/ZenGL/src/zgl_textures_tga.pas	/^procedure tga_FlipHorizontally( Data : PByteArray; w, h : Integer );$/;"	p
tga_FlipVertically	Engines/ZenGL/src/zgl_textures_tga.pas	/^procedure tga_FlipVertically( Data : PByteArray; w, h : Integer );$/;"	p
tga_LoadFromFile	Engines/ZenGL/src/zgl_textures_tga.pas	/^procedure tga_LoadFromFile( const FileName : UTF8String; out Data : PByteArray; out W, H, Format/;"	p
tga_LoadFromMemory	Engines/ZenGL/src/zgl_textures_tga.pas	/^procedure tga_LoadFromMemory( const Memory : zglTMemory; out Data : PByteArray; out W, H, Format/;"	p
tga_PaletteDecode	Engines/ZenGL/src/zgl_textures_tga.pas	/^function tga_PaletteDecode( var Header : zglTTGAHeader; var Data : PByteArray; Palette : PByteAr/;"	f
tga_RLEDecode	Engines/ZenGL/src/zgl_textures_tga.pas	/^procedure tga_RLEDecode( var tgaMem : zglTMemory; var Header : zglTTGAHeader; out Data : PByteAr/;"	p
th_comment_clear	Engines/ZenGL/src/zgl_lib_theora.pas	/^  procedure th_comment_clear( _tc : pth_comment ); cdecl; external;$/;"	p
th_comment_init	Engines/ZenGL/src/zgl_lib_theora.pas	/^  procedure th_comment_init( _tc : pth_comment ); cdecl; external;$/;"	p
th_decode_alloc	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_decode_alloc( const _info : pth_info; const _setup : pth_setup_info ) : pth_dec_ct/;"	f
th_decode_ctl	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_decode_ctl( _dec : pth_dec_ctx; _req : cint; _buf : Pointer; _buf_sz : csize_t ) :/;"	f
th_decode_free	Engines/ZenGL/src/zgl_lib_theora.pas	/^  procedure th_decode_free( _dec : pth_dec_ctx ); cdecl; external;$/;"	p
th_decode_headerin	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_decode_headerin( _info : pth_info; _tc : pth_comment; _setup : ppth_setup_info; _o/;"	f
th_decode_packetin	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_decode_packetin( _dec : pth_dec_ctx; const _op : pogg_packet; _granpos : pogg_int6/;"	f
th_decode_ycbcr_out	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_decode_ycbcr_out( _dec : pth_dec_ctx; _ycbcr : pth_ycbcr_buffer ) : cint; cdecl; e/;"	f
th_granule_frame	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_granule_frame( _encdec : Pointer; _granpos : ogg_int64_t ) : ogg_int64_t; cdecl; e/;"	f
th_granule_time	Engines/ZenGL/src/zgl_lib_theora.pas	/^  function th_granule_time( _encdec : Pointer; _granpos : ogg_int64_t ) : cdouble; cdecl; extern/;"	f
th_info_clear	Engines/ZenGL/src/zgl_lib_theora.pas	/^  procedure th_info_clear( _info : pth_info ); cdecl; external;$/;"	p
th_info_init	Engines/ZenGL/src/zgl_lib_theora.pas	/^  procedure th_info_init( _info : pth_info ); cdecl; external;$/;"	p
th_setup_free	Engines/ZenGL/src/zgl_lib_theora.pas	/^  procedure th_setup_free( _setup : pth_setup_info ); cdecl; external;$/;"	p
that	Engines/ZenGL/extra/zglChipmunk.pas	/^    \/\/ Function that is called to integrate the body's velocity. (Defaults to cpBodyUpdateVelo/;"	f
theora_DecoderClose	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure theora_DecoderClose( var Stream : zglTVideoStream );$/;"	p
theora_DecoderLoop	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure theora_DecoderLoop( var Stream : zglTVideoStream );$/;"	p
theora_DecoderOpen	Engines/ZenGL/src/zgl_video_theora.pas	/^function theora_DecoderOpen( var Stream : zglTVideoStream; const FileName : UTF8String ) : Boole/;"	f
theora_DecoderOpenMem	Engines/ZenGL/src/zgl_video_theora.pas	/^function theora_DecoderOpenMem( var Stream : zglTVideoStream; const Memory : zglTMemory ) : Bool/;"	f
theora_DecoderSeek	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure theora_DecoderSeek( var Stream : zglTVideoStream; Milliseconds : Double );$/;"	p
theora_DecoderUpdate	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure theora_DecoderUpdate( var Stream : zglTVideoStream; Milliseconds : Double; Data : PByt/;"	p
theora_Open	Engines/ZenGL/src/zgl_video_theora.pas	/^function theora_Open( var TheoraData : zglTTheoraData; var Width, Height : Word; var FrameRate :/;"	f
theora_Seek	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure theora_Seek( var TheoraData : zglTTheoraData; Frame : Integer );$/;"	p
theora_SeekToFrame	Engines/ZenGL/src/zgl_video_theora.pas	/^function theora_SeekToFrame( var TheoraData : zglTTheoraData; Frame : Integer; Keyframe : Boolea/;"	f
theora_Update	Engines/ZenGL/src/zgl_video_theora.pas	/^function theora_Update( var TheoraData : zglTTheoraData; Time : Double; Data : PByteArray ) : In/;"	f
thread_CSDone	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_CSDone( var CS : TRTLCriticalSection );$/;"	p
thread_CSEnter	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_CSEnter( var CS : TRTLCriticalSection );$/;"	p
thread_CSInit	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_CSInit( var CS : TRTLCriticalSection );$/;"	p
thread_CSLeave	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_CSLeave( var CS : TRTLCriticalSection );$/;"	p
thread_Close	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_Close( var Thread : zglTThread );$/;"	p
thread_Create	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_Create( var Thread : zglTThread; Callback : zglTThreadCallback; Data : Pointer /;"	p
thread_EventCreate	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_EventCreate( var Event : zglTEvent );$/;"	p
thread_EventDestroy	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_EventDestroy( var Event : zglTEvent );$/;"	p
thread_EventReset	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_EventReset( var Event : zglTEvent );$/;"	p
thread_EventSet	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_EventSet( var Event : zglTEvent );$/;"	p
thread_EventWait	Engines/ZenGL/src/zgl_threads.pas	/^procedure thread_EventWait( var Event : zglTEvent; Milliseconds : LongWord = $FFFFFFFF );$/;"	p
tiles2d_Draw	Engines/ZenGL/src/zgl_tiles_2d.pas	/^procedure tiles2d_Draw( Texture : zglPTexture; X, Y : Single; Tiles : zglPTiles2D; Alpha : Byte /;"	p
time	Engines/ZenGL/src/zgl_lib_msvcrt.pas	/^  procedure time; cdecl; external 'msvcrt.dll';$/;"	p
timer_Add	Engines/ZenGL/src/zgl_timers.pas	/^function  timer_Add( OnTimer : Pointer; Interval : LongWord; UseSenderForCallback : Boolean = FA/;"	f
timer_Add	Engines/ZenGL/src/zgl_timers.pas	/^function timer_Add( OnTimer : Pointer; Interval : LongWord; UseSenderForCallback : Boolean = FAL/;"	f
timer_Del	Engines/ZenGL/src/zgl_timers.pas	/^procedure timer_Del( var Timer : zglPTimer );$/;"	p
timer_GetTicks	Engines/ZenGL/src/zgl_timers.pas	/^function  timer_GetTicks : Double;$/;"	f
timer_GetTicks	Engines/ZenGL/src/zgl_timers.pas	/^function timer_GetTicks : Double;$/;"	f
timer_MainLoop	Engines/ZenGL/src/zgl_timers.pas	/^procedure timer_MainLoop;$/;"	p
timer_Reset	Engines/ZenGL/src/zgl_timers.pas	/^procedure timer_Reset;$/;"	p
to	Engines/ZenGL/extra/zglChipmunk.pas	/^  \/\/ Register a post step function to be called after cpSpaceStep() has finished.$/;"	f
touch_ClearState	Engines/ZenGL/src/zgl_touch.pas	/^procedure touch_ClearState;$/;"	p
touch_Down	Engines/ZenGL/src/zgl_touch.pas	/^function touch_Down( Finger : Byte ) : Boolean;$/;"	f
touch_Tap	Engines/ZenGL/src/zgl_touch.pas	/^function touch_Tap( Finger : Byte ) : Boolean;$/;"	f
touch_Up	Engines/ZenGL/src/zgl_touch.pas	/^function touch_Up( Finger : Byte ) : Boolean;$/;"	f
touch_X	Engines/ZenGL/src/zgl_touch.pas	/^function touch_X( Finger : Byte ) : Integer;$/;"	f
touch_Y	Engines/ZenGL/src/zgl_touch.pas	/^function touch_Y( Finger : Byte ) : Integer;$/;"	f
touchesBegan_withEvent	Engines/ZenGL/src/zgl_application.pas	/^    procedure touchesBegan_withEvent( touches : NSSet; event : UIevent ); override;$/;"	p
touchesCancelled_withEvent	Engines/ZenGL/src/zgl_application.pas	/^    procedure touchesCancelled_withEvent( touches : NSSet; event : UIevent ); override;$/;"	p
touchesEnded_withEvent	Engines/ZenGL/src/zgl_application.pas	/^    procedure touchesEnded_withEvent( touches : NSSet; event : UIevent ); override;$/;"	p
touchesMoved_withEvent	Engines/ZenGL/src/zgl_application.pas	/^    procedure touchesMoved_withEvent( touches : NSSet; event : UIevent ); override;$/;"	p
tr	Engines/ZenGL/src/zgl_lib_ogg.pas	/^  read_func  = function(ptr: pointer; size, nmemb: csize_t; datasource: pointer): csize_t; cdecl/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglDestroyContext : function(ctx:TAGLContext):GLboolean;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglEnable : function(ctx:TAGLContext; pname:GLenum):GLboolean;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglGetDrawable : function(ctx:TAGLContext):TAGLDrawable;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglGetVirtualScreen : function(ctx:TAGLContext):GLint;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglSetCurrentContext : function(ctx:TAGLContext):GLboolean;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglSetDrawable : function(ctx:TAGLContext; draw:TAGLDrawable):GLboolean;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglSetFullScreen : function(ctx:TAGLContext; width:GLsizei; height:GLsizei; freq:GLsizei; devi/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglSetInteger : function(ctx:TAGLContext; pname:GLenum; params:PGLint):GLboolean;cdecl;$/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglSetPBuffer : function(ctx:TAGLContext; pbuffer:TAGLPbuffer; face:GLint; level:GLint; screen/;"	f
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglSwapBuffers : procedure(ctx:TAGLContext);cdecl;$/;"	p
tx	Engines/ZenGL/src/zgl_opengl_all.pas	/^  aglUpdateContext : function(ctx:TAGLContext):GLboolean;cdecl;$/;"	f
types.	Engines/ZenGL/extra/zglChipmunk.pas	/^  \/\/ User collision handler function types.$/;"	f
u_BoolToStr	Engines/ZenGL/src/zgl_utils.pas	/^function u_BoolToStr( Value : Boolean ) : UTF8String;$/;"	f
u_Error	Engines/ZenGL/src/zgl_utils.pas	/^procedure u_Error( const ErrStr : UTF8String );$/;"	p
u_FloatToStr	Engines/ZenGL/src/zgl_utils.pas	/^function u_FloatToStr( Value : Single; Digits : Integer = 2 ) : UTF8String;$/;"	f
u_GetPOT	Engines/ZenGL/src/zgl_utils.pas	/^function u_GetPOT( Value : Integer ) : Integer;$/;"	f
u_Hash	Engines/ZenGL/src/zgl_utils.pas	/^function u_Hash( const Str : UTF8String ) : LongWord;$/;"	f
u_IntToStr	Engines/ZenGL/src/zgl_utils.pas	/^function u_IntToStr( Value : Integer ) : UTF8String;$/;"	f
u_Sleep	Engines/ZenGL/src/zgl_utils.pas	/^procedure u_Sleep( Milliseconds : LongWord );$/;"	p
u_SortList	Engines/ZenGL/src/zgl_utils.pas	/^procedure u_SortList( var List : zglTStringList; iLo, iHi: Integer );$/;"	p
u_StrDown	Engines/ZenGL/src/zgl_utils.pas	/^function u_StrDown( const Str : UTF8String ) : UTF8String;$/;"	f
u_StrToBool	Engines/ZenGL/src/zgl_utils.pas	/^function u_StrToBool( const Value : UTF8String ) : Boolean;$/;"	f
u_StrToFloat	Engines/ZenGL/src/zgl_utils.pas	/^function u_StrToFloat( const Value : UTF8String ) : Single;$/;"	f
u_StrToInt	Engines/ZenGL/src/zgl_utils.pas	/^function u_StrToInt( const Value : UTF8String ) : Integer;$/;"	f
u_StrUp	Engines/ZenGL/src/zgl_utils.pas	/^function u_StrUp( const Str : UTF8String ) : UTF8String;$/;"	f
u_Warning	Engines/ZenGL/src/zgl_utils.pas	/^procedure u_Warning( const ErrStr : UTF8String );$/;"	p
utf16_GetUTF8String	Engines/ZenGL/src/zgl_utils.pas	/^function utf16_GetUTF8String( const Str : PWideChar ) : UTF8String;$/;"	f
utf8_Backspace	Engines/ZenGL/src/zgl_utils.pas	/^procedure utf8_Backspace( var Str : UTF8String );$/;"	p
utf8_Copy	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_Copy( const Str : UTF8String ) : UTF8String; overload;$/;"	f
utf8_Copy	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_Copy( const Str : UTF8String ) : UTF8String;$/;"	f
utf8_Copy	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_Copy( const Str : UTF8String; FromPosition, Count : Integer ) : UTF8String; overlo/;"	f
utf8_Copy	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_Copy( const Str : UTF8String; FromPosition, Count : Integer ) : UTF8String;$/;"	f
utf8_Delete	Engines/ZenGL/src/zgl_utils.pas	/^procedure utf8_Delete( var Str : UTF8String; FromPosition, Count : Integer );$/;"	p
utf8_GetID	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_GetID( const Text : UTF8String; Pos : Integer; Shift : PInteger ) : LongWord;$/;"	f
utf8_GetNSString	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_GetNSString( const Str : UTF8String ) : NSString;$/;"	f
utf8_GetPAnsiChar	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_GetPAnsiChar( const Str : UTF8String ) : PAnsiChar;$/;"	f
utf8_GetPWideChar	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_GetPWideChar( const Str : UTF8String ) : PWideChar;$/;"	f
utf8_GetShift	Engines/ZenGL/src/zgl_utils.pas	/^procedure utf8_GetShift( const Text : UTF8String; Pos : Integer; out NewPos : Integer; Chars : I/;"	p
utf8_Length	Engines/ZenGL/src/zgl_utils.pas	/^function  utf8_Length( const Str : UTF8String ) : Integer;$/;"	f
utf8_Length	Engines/ZenGL/src/zgl_utils.pas	/^function utf8_Length( const Str : UTF8String ) : Integer;$/;"	f
var	Engines/ZenGL/headers/zglHeader.pas	/^  scr_ReadPixels        : procedure( var pData : Pointer; X, Y, Width, Height : Word );$/;"	p
var	Engines/ZenGL/headers/zglHeader.pas	/^  timer_Del      : procedure( var Timer : zglPTimer );$/;"	p
var	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_FreeMem     : procedure( var Mem : Pointer );$/;"	p
var	Engines/ZenGL/headers/zglHeader.pas	/^  zgl_FreeStrList : procedure( var List : zglTStringList );$/;"	p
var	Engines/ZenGL/src/zgl_sengine_2d.pas	/^    OnDraw  : procedure( var Sprite );$/;"	p
var	Engines/ZenGL/src/zgl_sengine_2d.pas	/^    OnFree  : procedure( var Sprite );$/;"	p
var	Engines/ZenGL/src/zgl_sengine_2d.pas	/^    OnInit  : procedure( var Sprite );$/;"	p
var	Engines/ZenGL/src/zgl_sengine_2d.pas	/^    OnProc  : procedure( var Sprite );$/;"	p
var	Engines/ZenGL/src/zgl_sound.pas	/^    Close   : procedure( var Stream : zglTSoundStream );$/;"	p
var	Engines/ZenGL/src/zgl_sound.pas	/^    Loop    : procedure( var Stream : zglTSoundStream );$/;"	p
var	Engines/ZenGL/src/zgl_sound.pas	/^    Open    : function( var Stream : zglTSoundStream; const FileName : UTF8String ) : Boolean;$/;"	f
var	Engines/ZenGL/src/zgl_sound.pas	/^    OpenMem : function( var Stream : zglTSoundStream; const Memory : zglTMemory ) : Boolean;$/;"	f
var	Engines/ZenGL/src/zgl_sound.pas	/^    Read    : function( var Stream : zglTSoundStream; Buffer : PByteArray; Bytes : LongWord; out/;"	f
var	Engines/ZenGL/src/zgl_sound.pas	/^    Seek    : procedure( var Stream : zglTSoundStream; Milliseconds : Double );$/;"	p
var	Engines/ZenGL/src/zgl_video.pas	/^    Close     : procedure( var Stream : zglTVideoStream );$/;"	p
var	Engines/ZenGL/src/zgl_video.pas	/^    Loop      : procedure( var Stream : zglTVideoStream );$/;"	p
var	Engines/ZenGL/src/zgl_video.pas	/^    Open      : function( var Stream : zglTVideoStream; const FileName : UTF8String ) : Boolean;$/;"	f
var	Engines/ZenGL/src/zgl_video.pas	/^    OpenMem   : function( var Stream : zglTVideoStream; const Memory : zglTMemory ) : Boolean;$/;"	f
var	Engines/ZenGL/src/zgl_video.pas	/^    Seek      : procedure( var Stream : zglTVideoStream; Milliseconds : Double );$/;"	p
var	Engines/ZenGL/src/zgl_video.pas	/^    Update    : procedure( var Stream : zglTVideoStream; Milliseconds : Double; Data : PByteArra/;"	p
verts	Engines/ZenGL/extra/zglChipmunk.pas	/^  cpPolyValidate : function( verts : PcpVect; numVerts : Integer ) : cpBool; cdecl;$/;"	f
video_Add	Engines/ZenGL/src/zgl_video.pas	/^function  video_Add : zglPVideoStream;$/;"	f
video_Add	Engines/ZenGL/src/zgl_video.pas	/^function video_Add : zglPVideoStream;$/;"	f
video_Del	Engines/ZenGL/src/zgl_video.pas	/^procedure video_Del( var Stream : zglPVideoStream );$/;"	p
video_OpenFile	Engines/ZenGL/src/zgl_video.pas	/^function  video_OpenFile( const FileName : UTF8String ) : zglPVideoStream;$/;"	f
video_OpenFile	Engines/ZenGL/src/zgl_video.pas	/^function video_OpenFile( const FileName : UTF8String ) : zglPVideoStream;$/;"	f
video_OpenMemory	Engines/ZenGL/src/zgl_video.pas	/^function  video_OpenMemory( const Memory : zglTMemory; const Extension : UTF8String ) : zglPVide/;"	f
video_OpenMemory	Engines/ZenGL/src/zgl_video.pas	/^function video_OpenMemory( const Memory : zglTMemory; const Extension : UTF8String ) : zglPVideo/;"	f
video_Restore	Engines/ZenGL/src/zgl_video.pas	/^procedure video_Restore( var Stream : zglPVideoStream );$/;"	p
video_Seek	Engines/ZenGL/src/zgl_video.pas	/^procedure video_Seek( var Stream : zglPVideoStream; Milliseconds : Double );$/;"	p
video_Update	Engines/ZenGL/src/zgl_video.pas	/^procedure video_Update( var Stream : zglPVideoStream; Milliseconds : Double; Loop : Boolean = FA/;"	p
was	Engines/ZenGL/extra/zglChipmunk.pas	/^  \/\/ This function was very lonely in cpCollision.h :)$/;"	f
wav_LoadFromFile	Engines/ZenGL/src/zgl_sound_wav.pas	/^procedure wav_LoadFromFile( const FileName : UTF8String; out Data : PByteArray; out Size, Format/;"	p
wav_LoadFromMemory	Engines/ZenGL/src/zgl_sound_wav.pas	/^procedure wav_LoadFromMemory( const Memory : zglTMemory; out Data : PByteArray; out Size, Format/;"	p
wglGetProcAddress	Engines/ZenGL/src/zgl_opengl_all.pas	/^  function wglGetProcAddress(proc: PAnsiChar): Pointer; stdcall; external libGL;$/;"	f
will	Engines/ZenGL/headers/zglHeader.pas	/^  \/\/ EN: WARNING: Function will destroy OpenGL context, so all resources must be reloaded$/;"	f
wnd_Create	Engines/ZenGL/src/zgl_window.pas	/^function  wnd_Create( Width, Height : Integer ) : Boolean;$/;"	f
wnd_Create	Engines/ZenGL/src/zgl_window.pas	/^function wnd_Create( Width, Height : Integer ) : Boolean;$/;"	f
wnd_Destroy	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_Destroy;$/;"	p
wnd_Select	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_Select;$/;"	p
wnd_SetCaption	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_SetCaption( const NewCaption : UTF8String );$/;"	p
wnd_SetHints	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_SetHints( Initialized : Boolean = TRUE );$/;"	p
wnd_SetPos	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_SetPos( X, Y : Integer );$/;"	p
wnd_SetSize	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_SetSize( Width, Height : Integer );$/;"	p
wnd_ShowCursor	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_ShowCursor( Show : Boolean );$/;"	p
wnd_Update	Engines/ZenGL/src/zgl_window.pas	/^procedure wnd_Update;$/;"	p
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_buffer       : function(oy: pogg_sync_state; size: clong): pointer; cdecl;$/;"	f
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_clear        : function(oy: pogg_sync_state): cint; cdecl;$/;"	f
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_init         : function(oy: pogg_sync_state): cint; cdecl;$/;"	f
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_pageout      : function(oy: pogg_sync_state; og: pogg_page): cint; cdecl;$/;"	f
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_pageseek     : function(oy: pogg_sync_state; og: pogg_page): cint; cdecl;$/;"	f
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_reset        : function(oy: pogg_sync_state): cint; cdecl;$/;"	f
y	Engines/ZenGL/src/zgl_lib_ogg.pas	/^    ogg_sync_wrote        : function(oy: pogg_sync_state; bytes: clong): cint; cdecl;$/;"	f
yuv420_2_rgb8888	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure yuv420_2_rgb8888( dst_ptr, y_ptr, u_ptr, v_ptr : pcuchar; width, height, y_span, uv_sp/;"	p
yuv422_2_rgb8888	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure yuv422_2_rgb8888( dst_ptr, y_ptr, u_ptr, v_ptr : pcuchar; width, height, y_span, uv_sp/;"	p
yuv444_2_rgb8888	Engines/ZenGL/src/zgl_video_theora.pas	/^procedure yuv444_2_rgb8888( dst_ptr, y_ptr, u_ptr, v_ptr : pcuchar; width, height, y_span, uv_sp/;"	p
zNear	Engines/ZenGL/headers/zglHeader.pas	/^  zbuffer_SetDepth  : procedure( zNear, zFar : Single );$/;"	p
zbuffer_Clear	Engines/ZenGL/src/zgl_render.pas	/^procedure zbuffer_Clear;$/;"	p
zbuffer_SetDepth	Engines/ZenGL/src/zgl_render.pas	/^procedure zbuffer_SetDepth( zNear, zFar : Single );$/;"	p
zglCAppDelegate.EnterMainLoop	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.EnterMainLoop;$/;"	p
zglCAppDelegate.MainLoop	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.MainLoop;$/;"	p
zglCAppDelegate.applicationDidBecomeActive	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationDidBecomeActive( application: UIApplication );$/;"	p
zglCAppDelegate.applicationDidEnterBackground	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationDidEnterBackground( application: UIApplication );$/;"	p
zglCAppDelegate.applicationDidFinishLaunching	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationDidFinishLaunching( application: UIApplication );$/;"	p
zglCAppDelegate.applicationDidReceiveMemoryWarning	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationDidReceiveMemoryWarning;$/;"	p
zglCAppDelegate.applicationWillEnterForeground	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationWillEnterForeground( application: UIApplication );$/;"	p
zglCAppDelegate.applicationWillResignActive	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationWillResignActive( application : UIApplication );$/;"	p
zglCAppDelegate.applicationWillTerminate	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.applicationWillTerminate( application: UIApplication );$/;"	p
zglCAppDelegate.textFieldDidEndEditing	Engines/ZenGL/src/zgl_application.pas	/^function zglCAppDelegate.textFieldDidEndEditing( textField : UITextField ) : Boolean;$/;"	f
zglCAppDelegate.textFieldEditingChanged	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCAppDelegate.textFieldEditingChanged;$/;"	p
zglCAppDelegate.textFieldShouldBeginEditing	Engines/ZenGL/src/zgl_application.pas	/^function zglCAppDelegate.textFieldShouldBeginEditing( textField : UITextField ) : Boolean;$/;"	f
zglCAppDelegate.textFieldShouldReturn	Engines/ZenGL/src/zgl_application.pas	/^function zglCAppDelegate.textFieldShouldReturn( textField : UITextField ) : Boolean;$/;"	f
zglCAppDelegate.textField_shouldChangeCharactersInRange_replacementString	Engines/ZenGL/src/zgl_application.pas	/^function zglCAppDelegate.textField_shouldChangeCharactersInRange_replacementString( textField : /;"	f
zglCSEngine2D.AddSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^function zglCSEngine2D.AddSprite : Integer;$/;"	f
zglCSEngine2D.AddSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^function zglCSEngine2D.AddSprite( Texture : zglPTexture; Layer : Integer ) : zglCSprite2D;$/;"	f
zglCSEngine2D.AddSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.AddSprite( Sprite : zglCSprite2D; Layer : Integer );$/;"	p
zglCSEngine2D.ClearAll	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.ClearAll;$/;"	p
zglCSEngine2D.DelSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.DelSprite( ID : Integer );$/;"	p
zglCSEngine2D.Destroy	Engines/ZenGL/extra/zglSpriteEngine.pas	/^destructor zglCSEngine2D.Destroy;$/;"	p
zglCSEngine2D.Draw	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.Draw;$/;"	p
zglCSEngine2D.GetSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^function zglCSEngine2D.GetSprite( ID : Integer ) : zglCSprite2D;$/;"	f
zglCSEngine2D.Proc	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.Proc;$/;"	p
zglCSEngine2D.SetSprite	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.SetSprite( ID : Integer; Sprite : zglCSprite2D );$/;"	p
zglCSEngine2D.SortByID	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.SortByID( iLo, iHi : Integer );$/;"	p
zglCSEngine2D.SortByLayer	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSEngine2D.SortByLayer( iLo, iHi : Integer );$/;"	p
zglCSprite2D.Create	Engines/ZenGL/extra/zglSpriteEngine.pas	/^constructor zglCSprite2D.Create( _Manager : zglCSEngine2D; _ID : Integer );$/;"	p
zglCSprite2D.Destroy	Engines/ZenGL/extra/zglSpriteEngine.pas	/^destructor zglCSprite2D.Destroy;$/;"	p
zglCSprite2D.OnDraw	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSprite2D.OnDraw;$/;"	p
zglCSprite2D.OnFree	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSprite2D.OnFree;$/;"	p
zglCSprite2D.OnInit	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSprite2D.OnInit( _Texture : zglPTexture; _Layer : Integer );$/;"	p
zglCSprite2D.OnProc	Engines/ZenGL/extra/zglSpriteEngine.pas	/^procedure zglCSprite2D.OnProc;$/;"	p
zglCiOSEAGLView.UpdateTouch	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSEAGLView.UpdateTouch( ID : Integer );$/;"	p
zglCiOSEAGLView.didMoveToSuperview	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSEAGLView.didMoveToSuperview;$/;"	p
zglCiOSEAGLView.layerClass	Engines/ZenGL/src/zgl_application.pas	/^class function zglCiOSEAGLView.layerClass : Pobjc_class;$/;"	f
zglCiOSEAGLView.touchesBegan_withEvent	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSEAGLView.touchesBegan_withEvent( touches : NSSet; event : UIevent );$/;"	p
zglCiOSEAGLView.touchesCancelled_withEvent	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSEAGLView.touchesCancelled_withEvent( touches : NSSet; event : UIevent );$/;"	p
zglCiOSEAGLView.touchesEnded_withEvent	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSEAGLView.touchesEnded_withEvent( touches : NSSet; event : UIevent );$/;"	p
zglCiOSEAGLView.touchesMoved_withEvent	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSEAGLView.touchesMoved_withEvent( touches : NSSet; event : UIevent );$/;"	p
zglCiOSViewController.didRotateFromInterfaceOrientation	Engines/ZenGL/src/zgl_application.pas	/^procedure zglCiOSViewController.didRotateFromInterfaceOrientation( fromInterfaceOrientation : UI/;"	p
zglCiOSViewController.shouldAutorotate	Engines/ZenGL/src/zgl_application.pas	/^function zglCiOSViewController.shouldAutorotate : Boolean;$/;"	f
zglCiOSViewController.shouldAutorotateToInterfaceOrientation	Engines/ZenGL/src/zgl_application.pas	/^function zglCiOSViewController.shouldAutorotateToInterfaceOrientation( interfaceOrientation : UI/;"	f
zglCiOSViewController.supportedInterfaceOrientations	Engines/ZenGL/src/zgl_application.pas	/^function zglCiOSViewController.supportedInterfaceOrientations : LongWord;$/;"	f
zglFree	Engines/ZenGL/headers/zglHeader.pas	/^procedure zglFree;$/;"	p
zglLoad	Engines/ZenGL/headers/zglHeader.pas	/^function zglLoad( LibraryName : AnsiString; Error : Boolean = TRUE ) : Boolean;$/;"	f
zgl_Destroy	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_Destroy;$/;"	p
zgl_Disable	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_Disable( What : LongWord );$/;"	p
zgl_Enable	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_Enable( What : LongWord );$/;"	p
zgl_Exit	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_Exit;$/;"	p
zgl_FreeMem	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_FreeMem( var Mem : Pointer );$/;"	p
zgl_FreeStrList	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_FreeStrList( var List : zglTStringList );$/;"	p
zgl_Get	Engines/ZenGL/src/zgl_main.pas	/^function  zgl_Get( What : LongWord ) : Ptr;$/;"	f
zgl_Get	Engines/ZenGL/src/zgl_main.pas	/^function zgl_Get( What : LongWord ) : Ptr;$/;"	f
zgl_GetMem	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_GetMem( out Mem : Pointer; Size : LongWord );$/;"	p
zgl_GetSysDir	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_GetSysDir;$/;"	p
zgl_Init	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_Init( FSAA : Byte = 0; StencilBits : Byte = 0 );$/;"	p
zgl_InitToHandle	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_InitToHandle( Handle : Ptr; FSAA : Byte = 0; StencilBits : Byte = 0 );$/;"	p
zgl_Reg	Engines/ZenGL/src/zgl_main.pas	/^procedure zgl_Reg( What : LongWord; UserData : Pointer );$/;"	p
zip_close	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_close( archive : Pzip ) : cint; cdecl; external;$/;"	f
zip_fclose	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_fclose( file_ : Pzip_file ) : cint; cdecl; external;$/;"	f
zip_fopen	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_fopen( archive : Pzip; fname : PAnsiChar; flags : cint ) : Pzip_file; cdecl; extern/;"	f
zip_fread	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_fread( file_ : Pzip_file; out buf; nbytes : cuint64 ) : cint; cdecl; external;$/;"	f
zip_get_name	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_get_name( archive : Pzip; index : cuint64; flags : cint ) : PAnsiChar; cdecl; exter/;"	f
zip_get_num_entries	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_get_num_entries( archive : Pzip; flags : cint ) : cuint64; cdecl; external;$/;"	f
zip_open	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_open( path : PAnsiChar; flags : Integer; out errorp : cint ) : Pzip; cdecl; externa/;"	f
zip_set_default_password	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_set_default_password( archive : Pzip; password : PAnsiChar ) : cint; cdecl; externa/;"	f
zip_stat	Engines/ZenGL/src/zgl_lib_zip.pas	/^function zip_stat( archive : Pzip; fname : PAnsiChar; flags : cint; out sb : Tzip_stat ) : Integ/;"	f
zlib_Free	Engines/ZenGL/src/zgl_lib_zip.pas	/^procedure zlib_Free( var strm : z_stream_s ); cdecl; external;$/;"	p
zlib_Init	Engines/ZenGL/src/zgl_lib_zip.pas	/^procedure zlib_Init( out strm : z_stream_s ); cdecl; external;$/;"	p
